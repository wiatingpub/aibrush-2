{"version":3,"sources":["pages/image-editor/enhance-tool.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/inpaint-tool.tsx","pages/image-editor/PaletteButton.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx","lib/aspecRatios.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","pages/image-editor/import-export.tsx","client/api.ts","client/base.ts","client/common.ts","lib/imageutil.ts","pages/image-editor/zoomHelper.tsx","pages/image-editor/tool.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/WorkerConfig.tsx","pages/admin/BoostList.tsx","pages/admin/GlobalSettings.tsx","pages/admin/WorkerList.tsx","pages/admin/Admin.tsx","components/ImageThumbnail.tsx","pages/DeletedImages.tsx","lib/boost.ts","components/BoostLevelPopup.tsx","components/BoostWidget.tsx","components/ImagePopup.tsx","components/PendingImagesThumbnail.tsx","components/PendingImages.tsx","pages/Homepage.tsx","pages/DiscordLogin.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","lib/apisocket.ts","components/ImagePrompt.tsx","lib/upscale.ts","pages/image-editor/selection-tool.tsx","components/BusyModal.tsx","lib/sleep.ts","components/AspectRatioSelector.tsx"],"names":["eraserWidthModifier","EnhanceTool","renderer","selectionTool","prompt","negativePrompt","count","variationStrength","_dirty","_state","stateHandler","selectionControlsListener","imageData","selectedImageDataIndex","selectedImageData","panning","erasing","progressListener","errorListener","dirtyListener","SelectionTool","selectSupported","state","selectionArgs","getArgs","selectionOverlay","x","y","width","getWidth","height","getHeight","updateArgs","this","dirty","listener","handler","error","destroy","setCursor","undefined","outpaint","getUpscaleLevel","event","zoomHelper","translateMouseToCanvasCoordinates","nativeEvent","offsetX","offsetY","button","ImageData","data","slice","erasePoint","onMouseDown","getSelectionOverlay","baseWidth","Math","min","eraserRadius","floor","relX","relY","startX","max","startY","endX","endY","i","j","index","distance","sqrt","pow","alphaPct","alpha","setEditImage","featherWidth","color","radius","type","onPan","updateCursor","onMouseMove","onMouseUp","onMouseLeave","onWheel","args","console","log","api","imageId","baseImage","baseImageData","Promise","resolve","reject","getImageData","responseType","then","resp","base64ImageData","Buffer","from","toString","src","imageElement","Image","onload","canvas","document","createElement","ctx","getContext","drawImage","featherEdges","remove","Error","apisocket","image","a","notifyError","encodedImage","getEncodedImage","input","defaultArgs","label","encoded_image","parent","id","phrases","negative_phrases","stable_diffusion_strength","closestAspectRatio","getClosestAspectRatio","temporary","createImage","newImages","images","length","completed","lastUpdate","moment","onMessage","msg","img","JSON","parse","NOTIFICATION_IMAGE_UPDATED","status","ImageStatusEnum","Completed","loadImageData","startTime","lastCheck","completeCount","sleep","diff","pendingIds","filter","Pending","Processing","map","batchGetImages","ids","updatedImagesResult","updatedImages","byId","reduce","acc","updated","isAfter","sort","b","score","push","direction","saveListener","commitSelection","BaseTool","EnhanceControls","tool","useState","setCount","setDirty","setVariationStrength","setPrompt","setNegativePrompt","setState","progress","setProgress","setError","onChangeState","onProgress","onError","onDirty","style","marginTop","className","role","aria-valuenow","aria-valuemin","aria-valuemax","round","marginBottom","marginLeft","data-dismiss","aria-label","onClick","aria-hidden","lockAspectRatio","htmlFor","value","onChange","e","target","step","parseInt","parseFloat","marginRight","cancel","confirm","erase","submit","when","message","SmudgeTool","brushSize","brushOpacity","lastX","lastY","smudging","sync","smudgeLine","copyEditImageFromBaseImage","SmudgeControls","setBrushSize","setBrushOpacity","useEffect","float","visibility","InpaintTool","imageWidth","imageHeight","selectionWidth","render","alphaMask","applyAlphaMask","snapshot","undo","clearRedoStack","expandToOverlay","encodedMask","getEncodedMask","maskData","encoded_mask","model","window","InpaintControls","setoutpaint","checked","PaletteButton","selectedColor","backgroundColor","ColorPicker","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","position","zIndex","top","right","bottom","left","hex","onChangeComplete","defaultColors","PencilTool","brushColor","palette","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","Controls","setBrushColor","setPalette","indexOf","addToPalette","onColorPicked","display","flexDirection","flexWrap","beginColorpicker","DEFAULT_ASPECT_RATIO","aspectRatios","displayName","aspectRatio","tests","aRatio","bRatio","abs","compareSize","upscale","anonymousClient","axios","create","defaults","headers","common","ImageEditor","showSelectionControls","setShowSelectionControls","tools","name","iconClass","constructor","r","renderControls","t","onShowSelectionControls","setImage","setRenderer","setTool","canUndo","setCanUndo","canRedo","setCanRedo","busyMessage","setBusyMessage","useParams","history","useHistory","canvasRef","useRef","onSelectTool","toolconfig","newTool","onSaveImage","saveNewImage","newArgs","CreateImageInputStatusEnum","nsfw","newImage","imageBlob","encodedImageToBlob","createEncodedThumbnail","encodedThumbnail","thumbnailBlob","getImageUploadUrls","uploadUrls","promise1","uploadBlob","image_url","promise2","thumbnail_url","all","replace","renderTool","buttonClass","isSelected","charAt","toUpperCase","preventDefault","getImage","getImageDownloadUrls","download_urls","get","binaryImageData","current","createRenderer","setBaseImage","loadImage","onSnapshot","addEventListener","removeEventListener","fontSize","textAlign","cursor","paddingBottom","disabled","redo","verticalAlign","touchAction","userSelect","ref","onTouchStart","onTouchMove","onTouchEnd","select","transform","resetView","show","title","Renderer","undoStack","redoStack","currentSnapshot","backgroundLayer","baseImageLayer","editLayer","selectionOverlayPreview","hasSelection","zoom","snapshotListener","allowRedo","pop","clearRect","putImageData","notifySnapshotListener","shift","context","setTransform","drawOverlay","pattern","createPattern","createCheckeredPattern","fillStyle","fillRect","color1","color2","updateSelectionOverlay","initializeBackgroundLayer","setSelectionOverlay","maxWidth","updateZoomAndOffset","lineWidth","strokeStyle","strokeRect","beginPath","arc","PI","stroke","globalAlpha","fill","moveTo","lineTo","result","toDataURL","split","selection","imageDataToEncodedImage","erasure","mask","convertErasureToMask","brushx","brushy","absx","leftEdge","rightEdge","topEdge","bottomEdge","absy","contains","x1","y1","x2","y2","lineCap","unitVector","totalRed","totalGreen","totalBlue","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","minX","minY","newCanvas","ImportExportControls","backupImage","setBackupImage","files","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","AddMetricItemTypeEnum","CreateImageInputHeightEnum","CreateImageInputWidthEnum","CreateServiceAccountInputTypeEnum","HealthcheckStatusEnum","ImageWidthEnum","ImageHeightEnum","ImageUncropOffsetXEnum","ImageUncropOffsetYEnum","UpdateImageInputStatusEnum","UpsertWorkerInputStatusEnum","WorkerStatusEnum","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","addMetrics","addMetricsInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","batchGetImagesInput","createImageInput","createInviteCode","createServiceAccount","createServiceAccountInput","createWorker","upsertWorkerInput","deleteImage","localVarPath","encodeURIComponent","String","deleteWorker","workerId","depositBoost","userId","depositRequest","discordLogin","generateWorkerLoginCode","getAssetsUrl","getBoost","getBoostForUser","getFeatures","getGlobalSettings","getMaskData","getThumbnailData","getWorker","getWorkerConfig","getWorkers","healthcheck","isAdmin","listBoosts","listImages","limit","login","loginInput","loginAsWorker","workerLoginCode","pingWorker","processImage","processImageInput","refresh","refreshLoginInput","updateBoost","updateBoostRequest","updateGlobalSettings","updateGlobalSettingsRequest","updateImage","updateImageInput","updateWorker","updateWorkerConfig","upsertWorkerConfigInput","uploadImageData","body","uploadThumbnailData","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","featherLeftEdge","featherRightEdge","featherTopEdge","featherBottomEdge","pixelIndex","existingAlpha","alphaIndex","cropWidth","cropHeight","cropX","cropY","base64","binaryString","arr","signedUrl","xhr","XMLHttpRequest","open","setRequestHeader","onerror","err","send","ZoomHelper","startTouches","startZoom","startOffsetX","startOffsetY","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","touches","canvasRect","getCanvas","startTouch1","startTouch2","touch1","touch2","startDistance","clientX","clientY","startCenterX","startCenterY","centerX","centerY","startCanvasPoint","xDiff2","yDiff2","mouseX","mouseY","touchHandle","_pinchZooming","localStorage","getItem","setItem","clearTimeout","touch","identifier","pageX","pageY","screenX","screenY","setTimeout","process","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","setErr","location","inviteCode","qs","substring","onLogin","match","client","invite_code","onVerify","fontWeight","href","placeholder","aria-describedby","trim","host","protocol","redirectUri","discordLink","TokenRefresher","onCredentialsRefreshed","credentials","interval","setInterval","refreshToken","loginResult","clearInterval","Healthchecker","healthCheck","setHealthCheck","catch","WorkerConfigPage","Private","setType","setIsAdmin","download","creds","is_admin","BoostList","boosts","setBoosts","amount","setAmount","level","setLevel","showDeposit","setShowDeposit","onDepositBoost","boost","user_id","is_active","add","balance","fromNow","activated_at","Modal","onHide","Header","closeButton","Title","Body","Number","Footer","GlobalSettings","minimum_worker_allocations","stable_diffusion_text2im","stable_diffusion_inpainting","swinir","workerSettings","setWorkerSettings","saving","setSaving","loadWorkerSettings","settings","settings_json","saveWorkerSettings","WorkerList","workers","setWorkers","workerConfigs","setWorkerConfigs","workerConfigPromises","worker","configsByWorkerId","config","worker_id","onDeleteWorker","w","onGenerateCode","login_code","onCreateWorker","display_name","onRenameWorker","num_gpus","gpu_configs","gpu_num","last_ping","Admin","links","setLinks","onGenerateLink","link","ImageThumbnail","assetsUrl","bulkDelete","updated_at","retry","setRetry","backgroundImage","readOnly","DeletedImages","setImages","loadImages","valueOf","deleted_at","onDeleteImage","onRestoreImage","goBack","borderBottom","paddingTop","BOOST_LEVELS","description","BoostLevelPopup","selectedBoostLevel","onUpdateBoostLevel","onCancel","updatedBoostLevel","setUpdatedBoostLevel","centered","boostLevel","COOLDOWN_MILLISECONDS","boostLevelToLabel","1","2","4","8","BoostWidget","onUpdateActive","remainingTime","setRemainingTime","hidden","setHidden","cooldown","setCooldown","updatingBoostLevel","setUpdatingBoostLevel","backgroundSize","borderRadius","paddingLeft","paddingRight","animationName","animationDuration","animationIterationCount","updateRemainingTime","remainingMilliseconds","millisecondsSinceLastActivated","utc","format","fontStyle","animation","ImagePopup","onClose","onDelete","onFork","onEdit","onUpscale","onNSFW","join","negative_score","showNSFW","setShowNSFW","upscaleLevel","size","maxHeight","alt","displayStatus","icon","statusBadge","Saved","toFixed","PendingImagesThumbnail","pendingCount","processingCount","hover","setHover","onMouseEnter","margin","background","lineHeight","PendingImages","imageIcon","pendingDiv","Homepage","apiSocket","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","showPendingImages","setShowPendingImages","hasMore","setHasMore","setSearch","searchDebounce","setSearchDebounce","bulkDeleteSelecting","setBulkDeleteSelecting","bulkDeleting","setBulkDeleting","bulkDeleteIds","setBulkDeleteIds","setBoost","handle","find","onSubmit","scrollTo","onEditNewImage","imagePromise","thumbnailPromise","imageInput","imagesToAdd","sortImages","pollImages","latestCursor","findIndex","deletedIds","updatedImage","timerHandle","uniqueIds","Set","payload","NOTIFICATION_IMAGE_DELETED","NOTIFICATION_BOOST_UPDATED","updatedBoost","refreshBoost","isPendingOrProcessing","aScore","bScore","onLoadMore","minUpdatedAt","forEach","onThumbnailClicked","onConfirmBulkDelete","promises","Object","keys","completedOrSavedImages","pendingOrProcessingImages","pendingImages","processingImages","onUpdateBoostActive","active","alert","ImagePrompt","Dropdown","Toggle","variant","Menu","Item","dataLength","next","loader","res","BusyModal","DiscordLogin","accessToken","apiUrl","httpClient","ApiSocket","updateHttpClient","App","setCredentials","setAssetsUrl","features","setFeatures","init","assets_url","storedCredentials","updateToken","connect","path","exact","removeItem","to","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","messageListener","close","includes","WebSocket","onopen","onmessage","evt","onclose","iterations","encoded_npy","enable_video","enable_zoom","zoom_frequency","zoom_scale","zoom_shift_x","zoom_shift_y","glid_3_xl_clip_guidance","glid_3_xl_clip_guidance_scale","glid_3_xl_skip_iterations","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","defaultAspectRatio","aspectRatioDetails","setAspectRatioDetails","originalWidth","setOriginalWidth","originalHeight","setOriginalHeight","resetState","handleSubmit","bestMatch","onImageSelected","file","HTMLCanvasElement","textDecoration","aspectRatioId","minHeight","clamp","setSelectionOverlayPreview","setSize","children","backdrop","keyboard","ms","AspectRatioSelector","alignItems","border"],"mappings":"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","file":"static/js/main.f03e0c85.chunk.js","sourcesContent":["import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Prompt } from \"react-router\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    ImageStatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { featherEdges, fixRedShift } from \"../../lib/imageutil\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\n\ntype EnhanceToolState = \"select\" | \"default\" | \"busy\" | \"confirm\" | \"erase\";\n\n// eraser width modifier adds a solid core with a feather edge\n// equal to the what is used on enhanced selections\nconst eraserWidthModifier = 1.3;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    readonly selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private _dirty = false;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    set state(state: EnhanceToolState) {\n        if (state !== this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    this.selectionTool.updateArgs({\n                        ...this.selectionTool.getArgs(),\n                        outpaint: false,\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        return !(\n            getUpscaleLevel(\n                this.renderer.getWidth(),\n                this.renderer.getHeight()\n            ) === 0 && this.renderer.getWidth()\n        );\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"enhance\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"default\";\n        }\n        let selectionArgs = this.selectionTool.getArgs();\n        if (!this.selectSupported()) {\n            selectionArgs = {\n                ...selectionArgs,\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: this.renderer.getWidth(),\n                    height: this.renderer.getHeight(),\n                },\n            };\n        }\n        this.selectionTool.updateArgs(selectionArgs);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\" && this.selectedImageData) {\n            this.erasing = true;\n            // clone selected ImageData\n            this.selectedImageData = new ImageData(\n                this.selectedImageData.data.slice(),\n                this.selectedImageData.width,\n                this.selectedImageData.height\n            );\n\n            this.erasePoint(x, y);\n        }\n    }\n\n    // TODO: on erase cancel and on erase confirm\n    // either restore the image data from the array\n    // or overwrite the array with the new image data\n\n    private erasePoint(x: number, y: number) {\n        const selectionOverlay = this.renderer.getSelectionOverlay()!;\n        const baseWidth = Math.min(\n            selectionOverlay.width,\n            selectionOverlay.height\n        );\n        const eraserRadius = Math.floor((baseWidth / 8) * eraserWidthModifier);\n\n        const relX = x - selectionOverlay.x;\n        const relY = y - selectionOverlay.y;\n        const imageData = this.selectedImageData!;\n\n        const startX = Math.max(0, relX - eraserRadius);\n        const startY = Math.max(0, relY - eraserRadius);\n        const endX = Math.min(imageData.width, relX + eraserRadius);\n        const endY = Math.min(imageData.height, relY + eraserRadius);\n\n        // relX=64.28541697636388, relY=64.24464312259761, startX=0.28541697636387653, startY=0.24464312259760845, endX=128.28541697636388, endY=128.2446431225976\n\n        for (let i = startX; i < endX; i++) {\n            for (let j = startY; j < endY; j++) {\n                const index = (j * imageData.width + i) * 4;\n                const distance = Math.sqrt(\n                    Math.pow(i - relX, 2) + Math.pow(j - relY, 2)\n                );\n                if (distance < eraserRadius) {\n                    // set alpha to a linear gradient from the center,\n                    // 100% in the middle and 0% at the edge\n                    const alphaPct =\n                        (distance / eraserRadius) * eraserWidthModifier -\n                        (eraserWidthModifier - 1);\n\n                    const alpha = Math.min(\n                        Math.floor(alphaPct * 255),\n                        imageData.data[index + 3]\n                    );\n                    imageData.data[index + 3] = alpha;\n                }\n            }\n        }\n        this.renderer.setEditImage(imageData);\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\" && this.selectedImageData) {\n            const selectionOverlay = this.renderer.getSelectionOverlay()!;\n            const baseWidth = Math.min(\n                selectionOverlay.width,\n                selectionOverlay.height\n            );\n            const featherWidth = Math.floor(baseWidth / 8);\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: featherWidth * eraserWidthModifier,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else if (this.state == \"confirm\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor(undefined);\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        console.log(\"updateArgs\", args);\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        baseImage: APIImage,\n        baseImageData: ImageData,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        return new Promise((resolve, reject) => {\n            api.getImageData(imageId, {\n                responseType: \"arraybuffer\",\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/png;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = selectionOverlay.width;\n                    canvas.height = selectionOverlay.height;\n                    const ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        reject(new Error(\"Failed to get canvas context\"));\n                        return;\n                    }\n                    ctx.drawImage(\n                        imageElement,\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const imageData = ctx.getImageData(\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    featherEdges(\n                        selectionOverlay,\n                        baseImage.width!,\n                        baseImage.height!,\n                        imageData\n                    );\n                    resolve(imageData);\n                    // remove canvas\n                    canvas.remove();\n                };\n            });\n        });\n    }\n\n    cancel() {\n        if (this.state == \"erase\") {\n            this.state = \"confirm\";\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n            this.renderer.setEditImage(this.selectedImageData);\n        } else {\n            if (this.selectSupported()) {\n                this.state = \"select\";\n            } else {\n                this.state = \"default\";\n            }\n            this.imageData = [];\n            this.renderer.setEditImage(null);\n            this.dirty = false;\n        }\n    }\n\n    erase() {\n        this.state = \"erase\";\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.dirty = true;\n        this.notifyError(null);\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        const baseImageData = this.renderer.getImageData(selectionOverlay!)!;\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.parent = image.id;\n        input.phrases = [this.prompt || image.phrases[0]];\n        input.negative_phrases = [this.negativePrompt || image.negative_phrases[0]];\n        input.stable_diffusion_strength = this.variationStrength;\n        input.count = this.count;\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.width = closestAspectRatio.width;\n        input.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        this.state = \"busy\";\n        let resp: ImageList | null = null;\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"default\";\n            return;\n        }\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === ImageStatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            image,\n                            baseImageData,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = ImageStatusEnum.Completed;\n                    }\n                }\n            } else if (img.status == ImageStatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = ImageStatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            \n            while (!completed) {\n                let completeCount = 0;\n                await sleep(1000);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === ImageStatusEnum.Completed ||\n                        newImages![i].status === ImageStatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                if (this.progressListener) {\n                    this.progressListener(completeCount / newImages!.length);\n                }\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter((img) => img.status === ImageStatusEnum.Pending || img.status === ImageStatusEnum.Processing)\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages({\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (newImages![i].status === ImageStatusEnum.Pending || newImages![i].status === ImageStatusEnum.Processing) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (\n                                    updated.status === ImageStatusEnum.Completed\n                                ) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        image,\n                                        baseImageData,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if ((lastUpdate.isAfter(startTime) && moment().diff(lastUpdate, \"seconds\") > 30) || moment().diff(startTime, \"minutes\") > 2) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === ImageStatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"default\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        this.state = \"default\";\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt],\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        this.renderer.setCursor(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [dirty, setDirty] = useState(false);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.phrases[0]);\n    const [negativePrompt, setNegativePrompt] = useState(image.negative_phrases[0]);\n    console.log(\"negativePrompt\", negativePrompt);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state == \"busy\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp; Enhancing...\n                <br />\n                {/* bootstrap progress bar */}\n                <div\n                    className=\"progress\"\n                    style={{ height: \"20px\", marginTop: \"16px\" }}\n                >\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        style={{ width: `${progress * 100}%` }}\n                        aria-valuenow={progress * 100}\n                        aria-valuemin={0}\n                        aria-valuemax={100}\n                    >\n                        {Math.round(progress * 100)}%\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to enhance\n                    </p>\n                    <SelectionControls\n                        renderer={renderer}\n                        tool={tool.selectionTool}\n                        lockAspectRatio={true}\n                    />\n                </>\n            )}\n            {state === \"default\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    {/* prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negative-prompt\">Negative Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"negative-prompt\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of enhancement options\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"variation-strength\">\n                            Variation Strength:{\" \"}\n                            {Math.round(variationStrength * 100)}%\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"variation-strength\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.05\"\n                            value={variationStrength}\n                            onChange={(e) => {\n                                setVariationStrength(\n                                    parseFloat(e.target.value)\n                                );\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            How much variation to use\n                        </small>\n                    </div>\n                </>\n            )}\n            {state === \"erase\" && (\n                <p>\n                    {/* info icon */}\n                    <i className=\"fa fa-info-circle\"></i>&nbsp; Erase any\n                    undesired sections before saving\n                </p>\n            )}\n\n            <div className=\"form-group\">\n                {state === \"select\" && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.state = \"default\";\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* magic icon */}\n                        <i className=\"fa fa-magic\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {((state === \"default\" && tool.selectSupported()) ||\n                    state === \"confirm\" ||\n                    state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n                {(state === \"confirm\" || state === \"erase\") && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-save\"></i>&nbsp; Save\n                    </button>\n                )}\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.erase()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            <i className=\"fa fa-eraser\"></i>&nbsp; Erase\n                        </button>\n                    </>\n                )}\n                {state === \"default\" && (\n                    <button\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                variationStrength,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image);\n                        }}\n                        style={{ marginRight: \"8px\" }}\n                    >\n                        <i className=\"fa fa-magic\"></i>&nbsp; Enhance\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"smudge\");\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n            if (!this.dirty) {\n                this.renderer.copyEditImageFromBaseImage();\n            }\n            this.dirty = true;\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.lastX = x;\n            this.lastY = y;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.smudging = false;\n        this.panning = false;\n        this.sync();\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) =>\n                        setBrushOpacity(parseFloat(e.target.value))\n                    }\n                />\n            </div>\n            <div\n                className=\"form-group\"\n                style={{\n                    marginTop: \"16px\",\n                    visibility: dirty ? \"visible\" : \"hidden\",\n                }}\n            >\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Prompt } from \"react-router\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Renderer } from \"./renderer\";\nimport { SelectionTool } from \"./selection-tool\";\nimport { Cursor, Rect } from \"./models\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageList,\n    ImageStatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { getClosestAspectRatio } from \"../../lib/aspecRatios\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport { applyAlphaMask, featherEdges } from \"../../lib/imageutil\";\nimport { ApiSocket, NOTIFICATION_IMAGE_UPDATED } from \"../../lib/apisocket\";\nimport moment from \"moment\";\n\ntype InpaintToolState =\n    | \"select\"\n    | \"erase\"\n    | \"inpaint\"\n    | \"busy\"\n    | \"confirm\"\n    | undefined;\n\ninterface ImageWithData extends APIImage {\n    data?: ImageData;\n}\n\nexport class InpaintTool extends BaseTool implements Tool {\n    private selectionTool: SelectionTool;\n    private prompt: string = \"\";\n    private negativePrompt: string = \"\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n    private brushSize: number = 10;\n    private _dirty = false;\n\n    private _state: InpaintToolState;\n    private stateHandler: (state: InpaintToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private selectedImageData: ImageData | null = null;\n    private panning = false;\n    private erasing = false;\n    private progressListener?: (progress: number) => void;\n    private errorListener?: (error: string | null) => void;\n    private dirtyListener?: (dirty: boolean) => void;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    onError(handler: (error: string | null) => void) {\n        this.errorListener = handler;\n    }\n\n    private notifyError(error: string | null) {\n        if (this.errorListener) {\n            this.errorListener(error);\n        }\n    }\n\n    get state(): InpaintToolState {\n        return this._state;\n    }\n\n    set state(state: InpaintToolState) {\n        if (state != this._state) {\n            if (this._state == \"select\") {\n                this.selectionTool.destroy();\n            }\n            if (this._state === \"erase\") {\n                this.renderer.setCursor(undefined);\n            }\n            this._state = state;\n            this.stateHandler(state);\n\n            if (state == \"confirm\") {\n                this.selectionControlsListener(true);\n            } else {\n                this.selectionControlsListener(false);\n                if (state == \"select\") {\n                    const imageWidth = this.renderer.getWidth();\n                    const imageHeight = this.renderer.getHeight();\n                    const selectionWidth = Math.min(\n                        imageWidth,\n                        imageHeight,\n                        512\n                    );\n                    this.selectionTool.updateArgs({\n                        selectionOverlay: {\n                            x: 0,\n                            y: 0,\n                            width: selectionWidth,\n                            height: selectionWidth,\n                        },\n                    });\n                }\n            }\n        }\n    }\n\n    selectSupported(): boolean {\n        // return !(\n        //     this.renderer.getWidth() == this.renderer.getHeight() &&\n        //     getUpscaleLevel(\n        //         this.renderer.getWidth(),\n        //         this.renderer.getHeight()\n        //     ) === 0\n        // );\n        return true;\n    }\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"inpaint\");\n        this.selectionTool = new SelectionTool(renderer);\n        if (this.selectSupported()) {\n            this.state = \"select\";\n            this.selectionTool.updateArgs({\n                outpaint: this.getArgs().outpaint,\n            });\n        } else {\n            this.state = \"erase\";\n        }\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseDown(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (event.button === 1) {\n            this.panning = true;\n            return;\n        }\n        if (this.state == \"erase\") {\n            this.erasing = true;\n            this.erasePoint(x, y);\n        }\n    }\n\n    private erasePoint(x: number, y: number) {\n        if (!this.dirty) {\n            this.dirty = true;\n        }\n        this.renderer.erasePoint(x, y, this.brushSize);\n        this.renderer.render();\n    }\n\n    private updateCursor(x: number, y: number) {\n        if (this.state == \"erase\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: this.brushSize / 2,\n                type: \"circle\",\n                x,\n                y,\n            });\n        } else if (this.state == \"confirm\") {\n            this.renderer.setCursor({\n                color: \"white\",\n                radius: 10,\n                type: \"crosshairs\",\n                x,\n                y,\n            });\n        } else {\n            this.renderer.setCursor(undefined);\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseMove(event);\n            return;\n        }\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n\n        this.updateCursor(x, y);\n        if (this.erasing) {\n            this.erasePoint(x, y);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseUp(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (this.state == \"select\") {\n            this.selectionTool.onMouseLeave(event);\n        }\n        this.panning = false;\n        this.erasing = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        this.updateCursor(x, y);\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        };\n        super.updateArgs(args);\n        this.prompt = args.prompt || \"\";\n        this.negativePrompt = args.negativePrompt || \"\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n        this.brushSize = args.brushSize || 10;\n\n        this.updateCursor(\n            this.renderer.getWidth() / 2,\n            this.renderer.getHeight() / 2\n        );\n        this.selectionTool.updateArgs({\n            outpaint: args.outpaint,\n        });\n    }\n\n    onChangeState(handler: (state: InpaintToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    onProgress(listener: (progress: number) => void): void {\n        this.progressListener = listener;\n    }\n\n    private loadImageData(\n        api: AIBrushApi,\n        imageId: string,\n        alphaMask: ImageData,\n        baseImage: APIImage,\n        selectionOverlay: Rect\n    ): Promise<ImageData> {\n        return new Promise((resolve, reject) => {\n            api.getImageData(imageId, {\n                responseType: \"arraybuffer\",\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/png;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = selectionOverlay.width;\n                    canvas.height = selectionOverlay.height;\n                    const ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        reject(new Error(\"Failed to get canvas context\"));\n                        return;\n                    }\n                    ctx.drawImage(\n                        imageElement,\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n                    const imageData = ctx.getImageData(\n                        0,\n                        0,\n                        selectionOverlay.width,\n                        selectionOverlay.height\n                    );\n\n                    applyAlphaMask(imageData, alphaMask);\n\n                    featherEdges(\n                        selectionOverlay,\n                        this.renderer.getWidth(),\n                        this.renderer.getHeight(),\n                        imageData,\n                        10\n                    );\n\n                    resolve(imageData);\n                    // remove canvas\n                    canvas.remove();\n                };\n            });\n        });\n    }\n\n    cancel() {\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    async submit(api: AIBrushApi, apisocket: ApiSocket, image: APIImage) {\n        this.notifyError(null);\n        let selectionOverlay = this.renderer.getSelectionOverlay();\n        if (!selectionOverlay) {\n            console.error(\"No selection\");\n            return;\n        }\n\n        if (this.getArgs().outpaint) {\n            // check if selection overlay is out of renderer bounds (width, height)\n            if (\n                selectionOverlay.x < 0 ||\n                selectionOverlay.y < 0 ||\n                selectionOverlay.x + selectionOverlay.width >\n                    this.renderer.getWidth() ||\n                selectionOverlay.y + selectionOverlay.height >\n                    this.renderer.getHeight()\n            ) {\n                this.renderer.expandToOverlay();\n                selectionOverlay = this.renderer.getSelectionOverlay()!;\n            }\n        }\n\n        // get the erased area, then undo the erase to get the original image\n        const encodedMask = this.renderer.getEncodedMask(selectionOverlay);\n        const maskData = this.renderer.getImageData(selectionOverlay);\n        // hack to restore the image\n        this.renderer.snapshot();\n        this.renderer.undo();\n        this.renderer.clearRedoStack();\n\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay);\n\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.encoded_mask = encodedMask;\n        input.parent = image.id;\n        input.phrases = [this.prompt || image.phrases[0]];\n        input.negative_phrases = [this.negativePrompt || image.negative_phrases[0]];\n        input.stable_diffusion_strength = this.variationStrength;\n        input.count = this.count;\n        input.model = \"stable_diffusion_inpainting\";\n\n        const closestAspectRatio = getClosestAspectRatio(\n            selectionOverlay!.width,\n            selectionOverlay!.height\n        );\n        input.width = closestAspectRatio.width;\n        input.height = closestAspectRatio.height;\n        input.temporary = true;\n\n        this.state = \"busy\";\n        let resp: ImageList | null = null;\n        try {\n            resp = (await api.createImage(input)).data;\n        } catch (err) {\n            console.error(\"Error creating images\", err);\n            this.notifyError(\"Failed to create image\");\n            this.state = \"select\";\n            return;\n        }\n        let newImages: Array<ImageWithData> | undefined = resp.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"select\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n        let lastUpdate = moment();\n\n        apisocket.onMessage(async (msg: string) => {\n            console.log(\"inpaint onMessage\", msg);\n            const img = JSON.parse(msg) as any;\n            if (\n                img.type === NOTIFICATION_IMAGE_UPDATED &&\n                img.status === ImageStatusEnum.Completed\n            ) {\n                lastUpdate = moment();\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        const imageData = await this.loadImageData(\n                            api,\n                            newImages![i].id,\n                            maskData!,\n                            image,\n                            selectionOverlay!\n                        );\n                        newImages![i].data = imageData;\n                        newImages![i].status = ImageStatusEnum.Completed;\n                    }\n                }\n            } else if (img.status === ImageStatusEnum.Error) {\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (newImages![i].id === img.id) {\n                        newImages![i].status = ImageStatusEnum.Error;\n                    }\n                }\n            }\n        });\n        try {\n            let startTime = moment();\n            let lastCheck = moment();\n            while (!completed) {\n                let completeCount = 0;\n                await sleep(100);\n                // poll for completion\n                for (let i = 0; i < newImages!.length; i++) {\n                    if (\n                        newImages![i].status === ImageStatusEnum.Completed ||\n                        newImages![i].status === ImageStatusEnum.Error\n                    ) {\n                        completeCount++;\n                        continue;\n                    }\n                }\n                if (this.progressListener) {\n                    this.progressListener(completeCount / newImages!.length);\n                }\n                if (completeCount === newImages!.length) {\n                    completed = true;\n                    continue;\n                }\n\n                // fallback if sockets don't catch one\n                if (moment().diff(lastCheck, \"seconds\") > 10) {\n                    // get list of ids that aren't completed and batch get them.\n                    const pendingIds = newImages\n                        .filter((img) => img.status === ImageStatusEnum.Pending || img.status === ImageStatusEnum.Processing)\n                        .map((img) => img.id);\n                    console.log(\"Checking pending images\", pendingIds);\n                    const updatedImagesResult = await api.batchGetImages({\n                        ids: pendingIds,\n                    });\n                    const updatedImages = updatedImagesResult.data.images;\n                    const byId = updatedImages!.reduce((acc, img) => {\n                        acc[img.id] = img;\n                        return acc;\n                    }, {} as Record<string, APIImage>);\n                    for (let i = 0; i < newImages!.length; i++) {\n                        if (newImages![i].status === ImageStatusEnum.Pending || newImages![i].status === ImageStatusEnum.Processing) {\n                            const updated = byId[newImages![i].id];\n                            if (updated) {\n                                newImages![i].status = updated.status;\n                                if (\n                                    updated.status === ImageStatusEnum.Completed\n                                ) {\n                                    lastUpdate = moment();\n                                    const imageData = await this.loadImageData(\n                                        api,\n                                        newImages![i].id,\n                                        maskData!,\n                                        image,\n                                        selectionOverlay!\n                                    );\n                                    newImages![i].data = imageData;\n                                }\n                            }\n                        }\n                    }\n                    lastCheck = moment();\n                }\n                // timeout of 2 minutes\n                if ((lastUpdate.isAfter(startTime) && moment().diff(lastUpdate, \"seconds\") > 30) ||  moment().diff(startTime, \"minutes\") > 2) {\n                    completed = true;\n                }\n            }\n        } finally {\n            apisocket.onMessage(undefined);\n        }\n\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n        newImages = newImages!.filter((img) => {\n            return img.status === ImageStatusEnum.Completed;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            if (newImages![i].data) {\n                this.imageData.push(newImages![i].data as ImageData);\n            }\n        }\n        if (this.imageData.length === 0) {\n            this.state = \"select\";\n            this.notifyError(\"No images returned\");\n            return;\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.selectedImageData = this.imageData[0];\n        this.state = \"confirm\";\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.selectedImageData = null;\n        } else {\n            this.selectedImageData =\n                this.imageData[this.selectedImageDataIndex];\n        }\n        this.renderer.setEditImage(this.selectedImageData);\n    }\n\n    onSaveImage(listener: (encodedImage: string, args?: any) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        if (this.selectSupported()) {\n            this.state = \"select\";\n        } else {\n            this.state = \"erase\";\n        }\n\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage, {\n                phrases: [this.prompt],\n                negative_phrases: [this.negativePrompt]\n            });\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            if (!window.confirm(\"Discard changes?\")) {\n                return false;\n            }\n        }\n        this.renderer.setCursor(undefined);\n        this.renderer.setEditImage(null);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    image: APIImage;\n    renderer: Renderer;\n    tool: InpaintTool;\n}\n\nexport const InpaintControls: FC<ControlsProps> = ({\n    api,\n    apisocket,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [prompt, setPrompt] = useState(image.phrases[0]);\n    const [negativePrompt, setNegativePrompt] = useState(image.negative_phrases[0]);\n    const [state, setState] = useState<InpaintToolState>(tool.state);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [dirty, setDirty] = useState(false);\n    const [outpaint, setoutpaint] = useState<boolean | undefined>(\n        tool.getArgs().outpaint\n    );\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n        });\n    }, [brushSize]);\n\n    tool.onChangeState(setState);\n    tool.onProgress(setProgress);\n    tool.onError(setError);\n    tool.onDirty(setDirty);\n\n    if (state == \"busy\") {\n        return (\n            <div style={{ marginTop: \"16px\" }}>\n                <i className=\"fa fa-spinner fa-spin\"></i>&nbsp; Inpainting...\n                <br />\n                {/* bootstrap progress bar */}\n                <div\n                    className=\"progress\"\n                    style={{ height: \"20px\", marginTop: \"16px\" }}\n                >\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        style={{ width: `${progress * 100}%` }}\n                        aria-valuenow={progress * 100}\n                        aria-valuemin={0}\n                        aria-valuemax={100}\n                    >\n                        {Math.round(progress * 100)}%\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div\n            style={{\n                marginTop: \"16px\",\n                marginBottom: \"8px\",\n                marginLeft: \"16px\",\n            }}\n        >\n            {error && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    {/* dismiss button */}\n                    <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                        onClick={() => setError(null)}\n                    >\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {error}\n                </div>\n            )}\n            {state === \"select\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Move the\n                        selection rectangle to the area that you want to\n                        inpaint. For outpainting, try zooming out.\n                    </p>\n                    <div className=\"form-group\">\n                        {/* allow outpaint checkbox */}\n                        <div className=\"form-check\">\n                            <input\n                                className=\"form-check-input\"\n                                type=\"checkbox\"\n                                id=\"allowoutpaint\"\n                                checked={!!outpaint}\n                                onChange={(e) => {\n                                    setoutpaint(e.target.checked);\n                                    tool.updateArgs({\n                                        outpaint: e.target.checked,\n                                    });\n                                }}\n                            />\n                            <label\n                                className=\"form-check-label\"\n                                htmlFor=\"allowoutpaint\"\n                            >\n                                Allow outpainting\n                            </label>\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {state === \"erase\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Erase the\n                        area that you want to inpaint.\n                    </p>\n                    <div className=\"form-group\">\n                        <label style={{ width: \"100%\" }}>\n                            Brush size\n                            <small\n                                className=\"form-text text-muted\"\n                                style={{ float: \"right\" }}\n                            >\n                                {brushSize}px\n                            </small>\n                        </label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            min=\"1\"\n                            max=\"100\"\n                            value={brushSize}\n                            onChange={(e) =>\n                                setBrushSize(parseInt(e.target.value))\n                            }\n                        />\n                    </div>\n                </>\n            )}\n\n            {state === \"inpaint\" && (\n                <>\n                    <p>\n                        {/* info icon */}\n                        <i className=\"fa fa-info-circle\"></i>&nbsp; Confirm the\n                        parameters below and continue\n                    </p>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"prompt\">Prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"prompt\"\n                            value={prompt}\n                            onChange={(e) => {\n                                setPrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the text prompt here\n                        </small>\n                    </div>\n                    {/* negative prompt */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"negativeprompt\">Negative prompt</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={negativePrompt}\n                            onChange={(e) => {\n                                setNegativePrompt(e.target.value);\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Customize the negative text prompt here\n                        </small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"count\">Count: {count}</label>\n                        <input\n                            type=\"range\"\n                            className=\"form-control-range\"\n                            id=\"count\"\n                            min=\"1\"\n                            max=\"10\"\n                            step=\"1\"\n                            value={count}\n                            onChange={(e) => {\n                                setCount(parseInt(e.target.value));\n                            }}\n                        />\n                        <small className=\"form-text text-muted\">\n                            Number of inpaint options\n                        </small>\n                    </div>\n                </>\n            )}\n\n            {state === \"confirm\" && (\n                <>\n                    <p>\n                        Use the <i className=\"fa fa-arrow-left\"></i> and{\" \"}\n                        <i className=\"fa fa-arrow-right\"></i> buttons to\n                        navigate between the inpaint options\n                    </p>\n                </>\n            )}\n\n            <div className=\"form-group\">\n                {(dirty ||\n                    state === \"confirm\" ||\n                    (state == \"erase\" && tool.selectSupported()) ||\n                    state == \"inpaint\") && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.cancel();\n                        }}\n                    >\n                        {/* cancel icon */}\n                        <i className=\"fa fa-times\"></i>&nbsp; Revert\n                    </button>\n                )}\n\n                {state === \"confirm\" && (\n                    <>\n                        <button\n                            className=\"btn btn-primary btn-sm\"\n                            onClick={() => tool.confirm()}\n                            style={{ marginRight: \"8px\" }}\n                        >\n                            {/* save icon */}\n                            <i className=\"fa fa-save\"></i>&nbsp; Save\n                        </button>\n                    </>\n                )}\n                {state == \"select\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"erase\")}\n                    >\n                        <i className=\"fa fa-eraser\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state == \"erase\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        type=\"button\"\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => (tool.state = \"inpaint\")}\n                    >\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Continue\n                    </button>\n                )}\n                {state === \"inpaint\" && (\n                    <button\n                        style={{ marginRight: \"8px\" }}\n                        className=\"btn btn-primary btn-sm\"\n                        onClick={() => {\n                            tool.updateArgs({\n                                count,\n                                prompt,\n                                negativePrompt,\n                            });\n                            tool.submit(api, apisocket, image);\n                        }}\n                    >\n                        {/* paint icon */}\n                        <i className=\"fa fa-paint-brush\"></i>&nbsp; Inpaint\n                    </button>\n                )}\n            </div>\n            <Prompt\n                when={dirty}\n                message=\"Are you sure you want to leave? Your changes will be lost.\"\n            />\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({ selectedColor, color, onClick }) => {\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <div\n            className={className}\n            style={{ backgroundColor: color }}\n            onClick={() => onClick(color)}\n        ></div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\n// class ButtonExample extends React.Component {\n//   state = {\n//     displayColorPicker: false,\n//   };\n\n//   handleClick = () => {\n//     this.setState({ displayColorPicker: !this.state.displayColorPicker })\n//   };\n\n//   handleClose = () => {\n//     this.setState({ displayColorPicker: false })\n//   };\n\n//   render() {\n//     const popover = {\n//       position: 'absolute',\n//       zIndex: '2',\n//     }\n//     const cover = {\n//       position: 'fixed',\n//       top: '0px',\n//       right: '0px',\n//       bottom: '0px',\n//       left: '0px',\n//     }\n//     return (\n//       <div>\n//         <button onClick={ this.handleClick }>Pick Color</button>\n//         { this.state.displayColorPicker ? <div style={ popover }>\n//           <div style={ cover } onClick={ this.handleClose }/>\n//           <ChromePicker />\n//         </div> : null }\n//       </div>\n//     )\n//   }\n// }\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nconst defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private brushSize = 10;\n    private brushColor = defaultColors[0];\n    private palette: string[] = [...defaultColors];\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"pencil\");\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            })\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n        \n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.palette = args.palette || [...defaultColors];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(x, y, this.brushSize, this.brushColor);\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (this.dirty) {\n            this.renderer.commitSelection();\n        }\n        return true;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(defaultColors[0]);\n    const [palette, setPalette] = useState(defaultColors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{width: \"100%\"}}>\n                    Brush size\n                    <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            <div className=\"form-group\" style={{\n                marginTop: \"16px\",\n                visibility: dirty ? \"visible\" : \"hidden\",\n            }}>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => tool.cancel()}\n                >\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => tool.confirm()}\n                    style={{ marginLeft: \"8px\" }}\n                >\n                    Save\n                </button>\n            </div>\n        </div>\n    );\n};\n\n// TODO list:\n// reset to initial colors\n// color picker\n// eyedropper\n// color history\n\n// zoom/pan\n// actual drawing\n// undo/redo\n// save\n// revert\n","export interface AspectRatio {\n    displayName: string;\n    width: number;\n    height: number;\n    id: number;\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n];\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\nexport function compareSize(a: AspectRatio, width: number, height: number): number {\n    const area1 = a.width * a.height;\n    const area2 = width * height;\n    return area1 - area2;\n}\n\nexport function upscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width * 2,\n        height: aspectRatio.height * 2,\n        id: aspectRatio.id,\n    }\n}\n\nexport function downscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width / 2,\n        height: aspectRatio.height / 2,\n        id: aspectRatio.id,\n    }\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios, { AxiosInstance } from \"axios\";\n\nimport {\n    AIBrushApi,\n    CreateImageInputStatusEnum,\n    Image as APIImage,\n} from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport { PencilTool, Controls as PencilControls } from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\nimport { InpaintControls, InpaintTool } from \"./inpaint-tool\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { ApiSocket } from \"../../lib/apisocket\";\nimport {\n    createEncodedThumbnail,\n    encodedImageToBlob,\n    uploadBlob,\n} from \"../../lib/imageutil\";\nimport { BusyModal } from \"../../components/BusyModal\";\n\ninterface CanPreventDefault {\n    preventDefault: () => void;\n}\n\ninterface Props {\n    api: AIBrushApi;\n    apisocket: ApiSocket;\n    assetsUrl: string;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const anonymousClient = axios.create();\ndelete anonymousClient.defaults.headers.common[\"Authorization\"];\n\nexport const ImageEditor: React.FC<Props> = ({ api, apisocket }) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"inpaint\",\n            iconClass: \"fas fa-paint-brush\",\n            constructor: (r: Renderer) => new InpaintTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <InpaintControls\n                        tool={t as InpaintTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        apisocket={apisocket}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <PencilControls\n                        tool={t as PencilTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <SmudgeControls\n                        tool={t as SmudgeTool}\n                        renderer={renderer}\n                    />\n                );\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(r, \"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return (\n                    <ImportExportControls\n                        renderer={renderer}\n                        tool={t as BaseTool}\n                        api={api}\n                    />\n                );\n            },\n        },\n    ];\n\n    const [image, setImage] = useState<APIImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n    const [canUndo, setCanUndo] = useState(false);\n    const [canRedo, setCanRedo] = useState(false);\n    const [busyMessage, setBusyMessage] = useState<string | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            newTool.onSaveImage((encodedImage, args={}) => {\n                console.log(\"Saving image...\");\n                saveNewImage(encodedImage, args);\n            });\n        }\n    };\n\n    /**\n     * Saves a new image to the server\n     * \n     * @param encodedImage base64 encoded image\n     * @param newArgs may contain new phrases and negative phrases\n     */\n    const saveNewImage = async (encodedImage: string, newArgs: any) => {\n        if (!image || !encodedImage) {\n            throw new Error(\"Cannot save new image without existing image\");\n        }\n        setBusyMessage(\"Saving image...\");\n        const args = defaultArgs();\n        args.phrases = newArgs.phrases || image.phrases;\n        args.negative_phrases = newArgs.negative_phrases || image.negative_phrases;\n        args.count = 1;\n        args.parent = image.id;\n        args.stable_diffusion_strength = image.stable_diffusion_strength;\n        args.status = CreateImageInputStatusEnum.Completed;\n        args.width = renderer!.getWidth() as any;\n        args.height = renderer!.getHeight() as any;\n        args.nsfw = image.nsfw;\n        const newImage = (await api.createImage(args)).data!.images![0];\n\n        // upload image data\n        const imageBlob = encodedImageToBlob(encodedImage);\n        const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n        const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n        const uploadUrls = await api.getImageUploadUrls(newImage.id);\n        const promise1 = uploadBlob(uploadUrls.data.image_url!, imageBlob);\n        const promise2 = uploadBlob(uploadUrls.data.thumbnail_url!, thumbnailBlob);\n        await Promise.all([promise1, promise2]);\n    \n        setImage(newImage);\n        // history.push(`/image-editor/${newImage.id}`);\n        history.replace(`/image-editor/${newImage.id}`);\n        setBusyMessage(null);\n    };\n\n    useEffect(() => {\n        if (image) {\n            return;\n        }\n\n        async function loadImage() {\n            const image = (await api.getImage(id)).data;\n            setImage(image);\n            const download_urls = await api.getImageDownloadUrls(id);\n            // Loading up data as binary, base64 encoding into image url\n            // bypasses browser security nonsense about cross-domain images\n            const resp = await anonymousClient.get(\n                download_urls.data.image_url!,\n                {\n                    responseType: \"arraybuffer\",\n                }\n            );\n            const binaryImageData = Buffer.from(resp.data, \"binary\");\n            const base64ImageData = binaryImageData.toString(\"base64\");\n            const src = `data:image/png;base64,${base64ImageData}`;\n            const imageElement = new Image();\n            imageElement.src = src;\n            imageElement.onload = () => {\n                if (!canvasRef.current) {\n                    console.error(\"Failed to get canvas\");\n                    return;\n                }\n                const renderer = createRenderer(canvasRef.current);\n                renderer.setBaseImage(imageElement);\n                setRenderer(renderer);\n            };\n        }\n        loadImage();\n    }, [image, id]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n            renderer.onSnapshot(() => {\n                setCanUndo(renderer.canUndo());\n                setCanRedo(renderer.canRedo());\n            });\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    function renderTool(t: ToolConfig) {\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <div className=\"form-group\" key={t.name}>\n                <button className={buttonClass} onClick={() => onSelectTool(t)}>\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)}\n            </div>\n        );\n    }\n\n    function preventDefault(e: CanPreventDefault): boolean {\n        e.preventDefault();\n        return true;\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.push(`/images/${id}`)}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div\n                className=\"row\"\n                style={{ marginTop: \"32px\", paddingBottom: \"120px\" }}\n            >\n                <div className=\"col-lg-3\">\n                    {renderer && (\n                        <>\n                            {tools.map((tool) => renderTool(tool))}\n                            {(canRedo || canUndo) && (\n                                <div className=\"form-group\">\n                                    <div className=\"btn-group\">\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canUndo}\n                                            onClick={() =>\n                                                renderer && renderer.undo()\n                                            }\n                                        >\n                                            {/* undo */}\n                                            <i className=\"fas fa-undo\"></i>\n                                        </button>\n                                        <button\n                                            className=\"btn btn-primary image-popup-button\"\n                                            disabled={!renderer || !canRedo}\n                                            onClick={() =>\n                                                renderer && renderer.redo()\n                                            }\n                                        >\n                                            <i className=\"fas fa-redo\"></i>\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        <div>\n                            <canvas\n                                style={{\n                                    cursor: \"none\",\n                                    touchAction: \"none\",\n                                    userSelect: \"none\",\n                                }}\n                                ref={canvasRef}\n                                className=\"image-editor-canvas\"\n                                onMouseDown={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseDown(e)\n                                }\n                                onMouseMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseMove(e)\n                                }\n                                onMouseUp={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseUp(e)\n                                }\n                                onMouseLeave={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    tool.onMouseLeave(e)\n                                }\n                                onTouchStart={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    // (() => {\n\n                                    //     const rect = canvasRef.current!.getBoundingClientRect();\n                                    //     const touch = e.touches[0];\n                                    //     if (touch) {\n                                    //         tool.onMouseDown({\n                                    //             type: \"touch\",\n                                    //             button: 0,\n                                    //             nativeEvent: {\n                                    //                 offsetX: touch.clientX - rect.left,\n                                    //                 offsetY: touch.clientY - rect.top,\n                                    //             }\n                                    //         } as any);\n                                    //     }\n                                    // })()\n                                    tool.onTouchStart(e)\n                                }\n                                onTouchMove={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    // (() => {\n                                    //     const rect = canvasRef.current!.getBoundingClientRect();\n                                    //     const touch = e.touches[0];\n                                    //     if (touch) {\n                                    //         tool.onMouseMove({\n                                    //             nativeEvent: {\n                                    //                 offsetX: touch.clientX - rect.left,\n                                    //                 offsetY: touch.clientY - rect.top,\n                                    //             }\n                                    //         } as any);\n                                    //     }\n                                    // })()\n                                    tool.onTouchMove(e)\n                                }\n                                onTouchEnd={(e) =>\n                                    preventDefault(e) &&\n                                    tool &&\n                                    // tool.onMouseUp({\n                                    //     button: 0\n                                    // } as any)\n                                    tool.onTouchEnd(e)\n                                }\n                            ></canvas>\n                            {showSelectionControls && (\n                                <>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-left\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                    <button\n                                        className=\"btn btn-secondary canvas-select-right\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.resetView();\n                                }\n                            }}\n                        >\n                            {/* reset zoom */}\n                            <i className=\"fas fa-search-plus\"></i>&nbsp; Reset\n                            View\n                        </button>\n                        {/* redo */}\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n            {busyMessage && (\n                <BusyModal show={true} title=\"Please Wait\">\n                    {busyMessage}\n                </BusyModal>\n            )}\n        </>\n    );\n};\n","import { Cursor, Rect } from \"./models\";\n\nconst maxSnapshots = 10;\n\nexport class Renderer {\n    private undoStack: ImageData[] = [];\n    private redoStack: ImageData[] = [];\n    private currentSnapshot: ImageData | undefined;\n\n    private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    // private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n    private width = 0;\n    private height = 0;\n\n    private snapshotListener: (() => void) | null = null;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        canvas.width = 512;\n        canvas.height = 512;\n        // invisible canvas elements\n        this.backgroundLayer = document.createElement(\"canvas\");\n        this.backgroundLayer.width = 512;\n        this.backgroundLayer.height = 512;\n        this.baseImageLayer = document.createElement(\"canvas\");\n        this.editLayer = document.createElement(\"canvas\");\n        // this.overlayLayer = document.createElement(\"canvas\");\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n\n    undo(allowRedo: boolean = true) {\n        if (this.undoStack.length > 0 && this.currentSnapshot) {\n            const imageData = this.undoStack.pop()!;\n            if (allowRedo) {\n                this.redoStack.push(this.currentSnapshot);\n            }\n            this.currentSnapshot = imageData;\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.clearRect(\n                    0,\n                    0,\n                    this.baseImageLayer.width,\n                    this.baseImageLayer.height\n                );\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    redo() {\n        if (this.redoStack.length > 0 && this.currentSnapshot) {\n            this.undoStack.push(this.currentSnapshot);\n            const imageData = this.redoStack.pop()!;\n            this.currentSnapshot = imageData;\n\n            // set as base image\n            const ctx = this.baseImageLayer.getContext(\"2d\");\n            if (ctx) {\n                ctx.putImageData(imageData, 0, 0);\n                this.render();\n            }\n            this.notifySnapshotListener();\n        }\n    }\n\n    clearRedoStack() {\n        this.redoStack = [];\n        this.notifySnapshotListener();\n    }\n\n    canUndo(): boolean {\n        return !this.hasSelection && this.undoStack.length > 0;\n    }\n\n    canRedo(): boolean {\n        return !this.hasSelection && this.redoStack.length > 0;\n    }\n\n    onSnapshot(listener: () => void) {\n        this.snapshotListener = listener;\n    }\n\n    snapshot() {\n        const ctx = this.baseImageLayer.getContext(\"2d\");\n        if (ctx) {\n            const snapshot = ctx.getImageData(\n                0,\n                0,\n                this.baseImageLayer.width,\n                this.baseImageLayer.height\n            );\n            if (this.currentSnapshot) {\n                this.undoStack.push(this.currentSnapshot);\n                this.currentSnapshot = snapshot;\n                if (this.redoStack.length > 0) {\n                    this.redoStack = [];\n                }\n                if (this.undoStack.length > maxSnapshots) {\n                    this.undoStack.shift();\n                }\n            } else {\n                this.currentSnapshot = snapshot;\n            }\n\n            this.notifySnapshotListener();\n        }\n    }\n\n    private notifySnapshotListener() {\n        if (this.snapshotListener) {\n            this.snapshotListener();\n        }\n    }\n\n    render() {\n        const context = this.canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, this.width, this.height);\n            context.drawImage(this.backgroundLayer, 0, 0);\n            // apply zoom and offset\n            context.setTransform(\n                this.zoom,\n                0,\n                0,\n                this.zoom,\n                this.offsetX * this.zoom,\n                this.offsetY * this.zoom\n            );\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            // context.drawImage(this.overlayLayer, 0, 0);\n            this.drawOverlay(context, this.width, this.height);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n        }\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    private initializeBackgroundLayer() {\n        // checkered background\n        // #DEDEDE\n        // #FFFFFF\n        // 10x10 pixel squares\n        const ctx = this.backgroundLayer.getContext(\"2d\");\n        if (ctx) {\n            const pattern = ctx.createPattern(\n                this.createCheckeredPattern(20, 20, \"#808080\", \"#AAAAAA\"),\n                \"repeat\"\n            );\n            if (pattern) {\n                ctx.fillStyle = pattern;\n                ctx.fillRect(\n                    0,\n                    0,\n                    this.backgroundLayer.width,\n                    this.backgroundLayer.height\n                );\n            }\n        }\n    }\n\n    private createCheckeredPattern(\n        width: number,\n        height: number,\n        color1: string,\n        color2: string\n    ): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            ctx.fillStyle = color1;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = color2;\n            ctx.fillRect(0, 0, width / 2, height / 2);\n            ctx.fillRect(width / 2, height / 2, width / 2, height / 2);\n        }\n        return canvas;\n    }\n\n    setBaseImage(\n        image: HTMLImageElement | HTMLCanvasElement,\n        updateSelectionOverlay = true\n    ) {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            // set size of all layers\n            // TODO: adapt for an always-square canvas\n            this.initializeBackgroundLayer();\n\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            // set image size\n            this.width = image.width;\n            this.height = image.height;\n            // this.canvas.width = image.width;\n            // this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            if (updateSelectionOverlay) {\n                // set 512x512 selection overlay at the center of the image\n                this.setSelectionOverlay({\n                    x: (image.width - 512) / 2,\n                    y: (image.height - 512) / 2,\n                    width: 512,\n                    height: 512,\n                });\n            }\n            this.resetView();\n            // this.render(); // already called by updateZoomAndOffset\n            this.snapshot();\n        }\n    }\n\n    resetView() {\n        // determine zoom based on image difference from canvas size\n        const maxWidth = Math.max(this.width, this.height);\n        const zoom = this.canvas.width / maxWidth;\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (this.width > this.height) {\n            offsetY = (this.width - this.height) / 2;\n        } else if (this.height > this.width) {\n            offsetX = (this.height - this.width) / 2;\n        }\n\n        this.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext(\"2d\");\n        if (context && this.selectionOverlay) {\n            context.clearRect(\n                0,\n                0,\n                this.editLayer.width,\n                this.editLayer.height\n            );\n            if (imageData) {\n                context.putImageData(\n                    imageData,\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y\n                );\n            }\n            // edit image makes the selection rect and preview disappear\n            // so redraw the overlay\n            this.hasSelection = !!imageData;\n            this.render();\n        }\n        this.notifySnapshotListener();\n    }\n\n    private drawOverlay(\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number\n    ) {\n        const lineWidth = Math.max(this.width / 512, this.height / 512);\n        if (context) {\n            context.strokeStyle = \"white\";\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, width, height);\n\n            if (!this.hasSelection && this.selectionOverlay) {\n                context.strokeStyle = \"white\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height\n                );\n            }\n            if (!this.hasSelection && this.selectionOverlayPreview) {\n                context.strokeStyle = \"cyan\";\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === \"circle\") {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"circle-fill\") {\n                    context.fillStyle = this.cursor.color;\n                    context.strokeStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n                    // set alpha to 0.5 and fill\n                    context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.fill();\n                    context.globalAlpha = 1;\n                } else if (this.cursor.type == \"crosshairs\") {\n                    // draw crosshairs based on cursor radius\n                    context.strokeStyle = this.cursor.color;\n                    context.lineWidth = lineWidth;\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                } else if (this.cursor.type === \"colorpicker\") {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(\n                        this.cursor.x,\n                        this.cursor.y,\n                        this.cursor.radius,\n                        0,\n                        2 * Math.PI\n                    );\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = \"black\";\n                    context.beginPath();\n                    context.moveTo(\n                        this.cursor.x - this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.lineTo(\n                        this.cursor.x + this.cursor.radius,\n                        this.cursor.y\n                    );\n                    context.moveTo(\n                        this.cursor.x,\n                        this.cursor.y - this.cursor.radius\n                    );\n                    context.lineTo(\n                        this.cursor.x,\n                        this.cursor.y + this.cursor.radius\n                    );\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.render();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.render();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.render();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        // console.log(`zoom: ${zoom}, offset: ${offsetX}, ${offsetY}`)\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n\n    private imageDataToEncodedImage(imageData: ImageData): string | undefined {\n        // create a canvas and draw the image data on it\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.putImageData(imageData, 0, 0);\n            // return the data url of the canvas\n            const result = canvas.toDataURL(\"image/png\");\n            // cleanup the canvas\n            canvas.remove();\n            // extract base64 data from data url\n            return result.split(\",\")[1];\n        }\n    }\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            return this.imageDataToEncodedImage(imageData);\n        }\n    }\n\n    private convertErasureToMask(erasure: ImageData): ImageData {\n        // for each pixel, if alpha < 255, set to white, otherwise set to black\n        const mask = erasure;\n        for (let i = 0; i < erasure.data.length; i += 4) {\n            if (erasure.data[i + 3] < 255) {\n                mask.data[i] = 255;\n                mask.data[i + 1] = 255;\n                mask.data[i + 2] = 255;\n                mask.data[i + 3] = 255;\n            } else {\n                mask.data[i] = 0;\n                mask.data[i + 1] = 0;\n                mask.data[i + 2] = 0;\n                mask.data[i + 3] = 255;\n            }\n        }\n        return mask;\n    }\n\n    getEncodedMask(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection)!;\n        const mask = this.convertErasureToMask(imageData);\n        return this.imageDataToEncodedImage(mask);\n    }\n\n    getImageData(selection: Rect | null): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.width,\n                height: this.height,\n            };\n        }\n        // get image data of the selection\n        let context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n            this.snapshot();\n        }\n    }\n\n    drawPoint(x: number, y: number, brushSize: number, color: string): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    erasePoint(brushx: number, brushy: number, brushSize: number): void {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        // get image data centered on x, y with brushSize width and height\n        const context = this.baseImageLayer.getContext(\"2d\");\n        if (context) {\n            const imageData = context.getImageData(\n                brushx - brushSize / 2,\n                brushy - brushSize / 2,\n                brushSize,\n                brushSize\n            );\n            // set alpha to 0 in a circle centered on x, y with radius brushSize / 2\n            for (let i = 0; i < imageData.data.length; i += 4) {\n                const x = (i / 4) % brushSize;\n                const y = Math.floor(i / 4 / brushSize);\n\n                const absx = x - brushSize / 2 + brushx;\n                // three pixel barrier on each edge UNLESS the selection overlay borders that edge\n                let leftEdge = this.selectionOverlay.x;\n                if (leftEdge > 0) {\n                    leftEdge += 10;\n                }\n                let rightEdge =\n                    this.selectionOverlay.x + this.selectionOverlay.width;\n                if (rightEdge < this.width) {\n                    rightEdge -= 10;\n                }\n                let topEdge = this.selectionOverlay.y;\n                if (topEdge > 0) {\n                    topEdge += 10;\n                }\n                let bottomEdge =\n                    this.selectionOverlay.y + this.selectionOverlay.height;\n                if (bottomEdge < this.canvas.height) {\n                    bottomEdge -= 10;\n                }\n\n                const containsx = absx > leftEdge && absx < rightEdge;\n                const absy = y - brushSize / 2 + brushy;\n                const containsy = absy > topEdge && absy < bottomEdge;\n                const contains = containsx && containsy;\n\n                // check if x, y is within the selection overlay\n                if (this.selectionOverlay && !contains) {\n                    continue;\n                }\n\n                const distance = Math.sqrt(\n                    Math.pow(x - brushSize / 2, 2) +\n                        Math.pow(y - brushSize / 2, 2)\n                );\n                if (distance < brushSize / 2) {\n                    imageData.data[i + 3] = 0;\n                }\n            }\n            // draw the image data on the selection layer\n            context.putImageData(\n                imageData,\n                brushx - brushSize / 2,\n                brushy - brushSize / 2\n            );\n        }\n    }\n\n    drawLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        color: string\n    ): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = \"round\";\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number,\n        brushSize: number,\n        brushOpacity: number\n    ): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(\n            unitVector.x * unitVector.x + unitVector.y * unitVector.y\n        );\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt(\n                            (x - brushSize / 2) * (x - brushSize / 2) +\n                                (y - brushSize / 2) * (y - brushSize / 2)\n                        );\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] =\n                                averageRed * brushOpacity +\n                                imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] =\n                                averageGreen * brushOpacity +\n                                imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] =\n                                averageBlue * brushOpacity +\n                                imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(\n                    imageData,\n                    x - brushSize / 2,\n                    y - brushSize / 2\n                );\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext(\"2d\");\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return (\n                \"#\" +\n                (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6)\n            );\n        }\n        return \"#000000\";\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext(\"2d\");\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n        this.hasSelection = true;\n        this.notifySnapshotListener();\n    }\n\n    expandToOverlay() {\n        if (!this.selectionOverlay) {\n            throw new Error(\"No selection overlay\");\n        }\n        const minX = Math.min(0, this.selectionOverlay.x);\n        const minY = Math.min(0, this.selectionOverlay.y);\n        const maxX = Math.max(\n            this.selectionOverlay.x + this.selectionOverlay.width,\n            this.baseImageLayer.width\n        );\n        const maxY = Math.max(\n            this.selectionOverlay.y + this.selectionOverlay.height,\n            this.baseImageLayer.height\n        );\n        const width = maxX - minX;\n        const height = maxY - minY;\n\n        // create a new canvas with the expanded size\n        const newCanvas = document.createElement(\"canvas\");\n        newCanvas.width = width;\n        newCanvas.height = height;\n        // draw the base image on the new canvas.\n        // if overlay.x is negative, image.x is overlay.x * -1\n        // if overlay.x is 0 or positive, image.x is 0\n        // if overlay.y is negative, image.y is overlay.y * -1\n        // if overlay.y is 0 or positive, image.y is 0\n        const context = newCanvas.getContext(\"2d\");\n        if (context) {\n            context.drawImage(\n                this.baseImageLayer,\n                Math.max(0, this.selectionOverlay.x * -1),\n                Math.max(0, this.selectionOverlay.y * -1)\n            );\n        }\n        if (this.selectionOverlay.x < 0) {\n            this.selectionOverlay.x = 0;\n        }\n        if (this.selectionOverlay.y < 0) {\n            this.selectionOverlay.y = 0;\n        }\n        console.log(`new Canvas size: ${width} x ${height}`);\n        this.setBaseImage(newCanvas, false);\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new Renderer(canvas);\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/png\" });\n            saveAs(blob, \"image.png\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    {/* cancel icon */}\n                    <i className=\"fas fa-times\"></i>&nbsp;\n                    Revert\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            const encodedImage = renderer.getEncodedImage(null);\n                            if (encodedImage) {\n                                tool.saveListener(encodedImage);\n                            }\n                        }\n                    }}\n                    style={{marginLeft: \"8px\"}}\n                >\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>&nbsp;\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddMetricItem\n */\nexport interface AddMetricItem {\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AddMetricItem\n     */\n    value: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddMetricItem\n     */\n    type: AddMetricItemTypeEnum;\n    /**\n     * \n     * @type {Array<MetricAttribute>}\n     * @memberof AddMetricItem\n     */\n    attributes: Array<MetricAttribute>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AddMetricItemTypeEnum {\n    Gauge = 'gauge',\n    Count = 'count'\n}\n\n/**\n * \n * @export\n * @interface AddMetricsInput\n */\nexport interface AddMetricsInput {\n    /**\n     * \n     * @type {Array<AddMetricItem>}\n     * @memberof AddMetricsInput\n     */\n    metrics: Array<AddMetricItem>;\n}\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface BatchGetImagesInput\n */\nexport interface BatchGetImagesInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof BatchGetImagesInput\n     */\n    ids: Array<string>;\n}\n/**\n * \n * @export\n * @interface Boost\n */\nexport interface Boost {\n    /**\n     * \n     * @type {string}\n     * @memberof Boost\n     */\n    user_id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    activated_at: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof Boost\n     */\n    balance: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Boost\n     */\n    level: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof Boost\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface BoostList\n */\nexport interface BoostList {\n    /**\n     * \n     * @type {Array<Boost>}\n     * @memberof BoostList\n     */\n    boosts: Array<Boost>;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    status?: CreateImageInputStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    negative_phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_video?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_skip_iterations?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_clip_guidance?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_clip_guidance_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    height?: CreateImageInputHeightEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    width?: CreateImageInputWidthEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    uncrop_offset_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    uncrop_offset_y?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    stable_diffusion_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    temporary?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputHeightEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputWidthEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n\n/**\n * \n * @export\n * @interface CreateServiceAccountInput\n */\nexport interface CreateServiceAccountInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateServiceAccountInput\n     */\n    type?: CreateServiceAccountInputTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateServiceAccountInputTypeEnum {\n    Public = 'public',\n    Private = 'private'\n}\n\n/**\n * \n * @export\n * @interface DepositRequest\n */\nexport interface DepositRequest {\n    /**\n     * Amount in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    amount: number;\n    /**\n     * Boost level to activate after deposit\n     * @type {number}\n     * @memberof DepositRequest\n     */\n    level: number;\n}\n/**\n * \n * @export\n * @interface DiscordLogin\n */\nexport interface DiscordLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof DiscordLogin\n     */\n    code: string;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface GlobalSettings\n */\nexport interface GlobalSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof GlobalSettings\n     */\n    settings_key: string;\n    /**\n     * \n     * @type {object}\n     * @memberof GlobalSettings\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    phrases: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    negative_phrases: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    current_iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    status: ImageStatusEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_video: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    glid_3_xl_skip_iterations?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    glid_3_xl_clip_guidance?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    glid_3_xl_clip_guidance_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    width: ImageWidthEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    height: ImageHeightEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    uncrop_offset_x?: ImageUncropOffsetXEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    uncrop_offset_y?: ImageUncropOffsetYEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    stable_diffusion_strength: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    temporary: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    deleted_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    worker_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageWidthEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageHeightEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageUncropOffsetXEnum {\n    NUMBER_MINUS_896 = -896,\n    NUMBER_MINUS_768 = -768,\n    NUMBER_MINUS_640 = -640,\n    NUMBER_MINUS_512 = -512,\n    NUMBER_MINUS_384 = -384,\n    NUMBER_MINUS_256 = -256,\n    NUMBER_MINUS_128 = -128,\n    NUMBER_0 = 0,\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageUncropOffsetYEnum {\n    NUMBER_MINUS_896 = -896,\n    NUMBER_MINUS_768 = -768,\n    NUMBER_MINUS_640 = -640,\n    NUMBER_MINUS_512 = -512,\n    NUMBER_MINUS_384 = -384,\n    NUMBER_MINUS_256 = -256,\n    NUMBER_MINUS_128 = -128,\n    NUMBER_0 = 0,\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896\n}\n\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface ImageUrls\n */\nexport interface ImageUrls {\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    image_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    mask_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ImageUrls\n     */\n    thumbnail_url?: string;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface MetricAttribute\n */\nexport interface MetricAttribute {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    ends_at: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    gpu_count: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    amount_paid_cents: number;\n}\n/**\n * \n * @export\n * @interface ProcessImageInput\n */\nexport interface ProcessImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof ProcessImageInput\n     */\n    model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ProcessImageInput\n     */\n    peek?: boolean;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface UpdateBoostRequest\n */\nexport interface UpdateBoostRequest {\n    /**\n     * Boost level to set for current user\n     * @type {number}\n     * @memberof UpdateBoostRequest\n     */\n    level?: number;\n    /**\n     * Whether to activate or deactivate the boost\n     * @type {boolean}\n     * @memberof UpdateBoostRequest\n     */\n    is_active?: boolean;\n}\n/**\n * \n * @export\n * @interface UpdateBoostResponse\n */\nexport interface UpdateBoostResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    level?: number;\n    /**\n     * Balance in 1/2 gpu milliseconds (.1 cents)\n     * @type {number}\n     * @memberof UpdateBoostResponse\n     */\n    balance?: number;\n    /**\n     * Whether the boost is active\n     * @type {boolean}\n     * @memberof UpdateBoostResponse\n     */\n    is_active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateBoostResponse\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface UpdateGlobalSettingsRequest\n */\nexport interface UpdateGlobalSettingsRequest {\n    /**\n     * \n     * @type {object}\n     * @memberof UpdateGlobalSettingsRequest\n     */\n    settings_json: object;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    current_iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    status?: UpdateImageInputStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    deleted_at?: number | null;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n\n/**\n * \n * @export\n * @interface UpsertWorkerConfigInput\n */\nexport interface UpsertWorkerConfigInput {\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof UpsertWorkerConfigInput\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface UpsertWorkerInput\n */\nexport interface UpsertWorkerInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpsertWorkerInput\n     */\n    status?: UpsertWorkerInputStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpsertWorkerInputStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Worker\n */\nexport interface Worker {\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    display_name: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    last_ping?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    status?: WorkerStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    login_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    engine?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Worker\n     */\n    num_gpus?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    cloud_instance_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Worker\n     */\n    gpu_type?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum WorkerStatusEnum {\n    Idle = 'idle',\n    Active = 'active'\n}\n\n/**\n * \n * @export\n * @interface WorkerConfig\n */\nexport interface WorkerConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerConfig\n     */\n    worker_id: string;\n    /**\n     * \n     * @type {Array<WorkerGpuConfig>}\n     * @memberof WorkerConfig\n     */\n    gpu_configs?: Array<WorkerGpuConfig>;\n}\n/**\n * \n * @export\n * @interface WorkerGpuConfig\n */\nexport interface WorkerGpuConfig {\n    /**\n     * \n     * @type {number}\n     * @memberof WorkerGpuConfig\n     */\n    gpu_num: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerGpuConfig\n     */\n    model: string;\n}\n/**\n * \n * @export\n * @interface WorkerList\n */\nexport interface WorkerList {\n    /**\n     * \n     * @type {Array<Worker>}\n     * @memberof WorkerList\n     */\n    workers?: Array<Worker>;\n}\n/**\n * \n * @export\n * @interface WorkerLoginCode\n */\nexport interface WorkerLoginCode {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkerLoginCode\n     */\n    login_code: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics: async (addMetricsInput?: AddMetricsInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addMetricsInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages: async (batchGetImagesInput?: BatchGetImagesInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/batch-get-images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(batchGetImagesInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (createServiceAccountInput?: CreateServiceAccountInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/service-accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createServiceAccountInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new worker\n         * @param {UpsertWorkerInput} [upsertWorkerInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorker: async (upsertWorkerInput?: UpsertWorkerInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/workers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(upsertWorkerInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorker: async (workerId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workerId' is not null or undefined\n            assertParamExists('deleteWorker', 'workerId', workerId)\n            const localVarPath = `/api/workers/{worker_id}`\n                .replace(`{${\"worker_id\"}}`, encodeURIComponent(String(workerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost: async (userId: string, depositRequest?: DepositRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('depositBoost', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}/deposit`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(depositRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin: async (discordLogin?: DiscordLogin, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/discord-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(discordLogin, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Generate a login code for a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        generateWorkerLoginCode: async (workerId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workerId' is not null or undefined\n            assertParamExists('generateWorkerLoginCode', 'workerId', workerId)\n            const localVarPath = `/api/workers/{worker_id}/login-code`\n                .replace(`{${\"worker_id\"}}`, encodeURIComponent(String(workerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('getBoostForUser', 'userId', userId)\n            const localVarPath = `/api/boost/{user_id}`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings: async (key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('getGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageDownloadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/download-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageUploadUrls', 'id', id)\n            const localVarPath = `/api/images/{id}/upload-urls`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorker: async (workerId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workerId' is not null or undefined\n            assertParamExists('getWorker', 'workerId', workerId)\n            const localVarPath = `/api/workers/{worker_id}`\n                .replace(`{${\"worker_id\"}}`, encodeURIComponent(String(workerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a worker config\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkerConfig: async (workerId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workerId' is not null or undefined\n            assertParamExists('getWorkerConfig', 'workerId', workerId)\n            const localVarPath = `/api/workers/{worker_id}/config`\n                .replace(`{${\"worker_id\"}}`, encodeURIComponent(String(workerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the list of workers\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkers: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/workers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boosts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Log in as a worker\n         * @param {WorkerLoginCode} [workerLoginCode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginAsWorker: async (workerLoginCode?: WorkerLoginCode, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/worker-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(workerLoginCode, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Ping a worker\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pingWorker: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/worker-ping`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage: async (processImageInput?: ProcessImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-image`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost: async (updateBoostRequest?: UpdateBoostRequest, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/boost`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBoostRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings: async (key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('updateGlobalSettings', 'key', key)\n            const localVarPath = `/api/global-settings/{key}`\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateGlobalSettingsRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a worker\n         * @param {string} workerId \n         * @param {UpsertWorkerInput} [upsertWorkerInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorker: async (workerId: string, upsertWorkerInput?: UpsertWorkerInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workerId' is not null or undefined\n            assertParamExists('updateWorker', 'workerId', workerId)\n            const localVarPath = `/api/workers/{worker_id}`\n                .replace(`{${\"worker_id\"}}`, encodeURIComponent(String(workerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(upsertWorkerInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a worker config\n         * @param {string} workerId \n         * @param {UpsertWorkerConfigInput} [upsertWorkerConfigInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkerConfig: async (workerId: string, upsertWorkerConfigInput?: UpsertWorkerConfigInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workerId' is not null or undefined\n            assertParamExists('updateWorkerConfig', 'workerId', workerId)\n            const localVarPath = `/api/workers/{worker_id}/config`\n                .replace(`{${\"worker_id\"}}`, encodeURIComponent(String(workerId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(upsertWorkerConfigInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('uploadThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.png`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'image/png';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addMetrics(addMetricsInput?: AddMetricsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addMetrics(addMetricsInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchGetImages(batchGetImagesInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceAccount(createServiceAccountInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new worker\n         * @param {UpsertWorkerInput} [upsertWorkerInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorker(upsertWorkerInput?: UpsertWorkerInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Worker>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorker(upsertWorkerInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorker(workerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorker(workerId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.depositBoost(userId, depositRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async discordLogin(discordLogin?: DiscordLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.discordLogin(discordLogin, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Generate a login code for a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async generateWorkerLoginCode(workerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerLoginCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.generateWorkerLoginCode(workerId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBoostForUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boost>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoostForUser(userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getGlobalSettings(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSettings(key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageDownloadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDownloadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageUploadUrls(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUrls>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageUploadUrls(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorker(workerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Worker>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorker(workerId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a worker config\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkerConfig(workerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerConfig>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkerConfig(workerId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the list of workers\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkers(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBoosts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBoosts(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, filter, limit, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Log in as a worker\n         * @param {WorkerLoginCode} [workerLoginCode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async loginAsWorker(workerLoginCode?: WorkerLoginCode, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAsWorker(workerLoginCode, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Ping a worker\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pingWorker(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.pingWorker(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processImage(processImageInput?: ProcessImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processImage(processImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBoostResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoost(updateBoostRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalSettings>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGlobalSettings(key, updateGlobalSettingsRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a worker\n         * @param {string} workerId \n         * @param {UpsertWorkerInput} [upsertWorkerInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorker(workerId: string, upsertWorkerInput?: UpsertWorkerInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Worker>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorker(workerId, upsertWorkerInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a worker config\n         * @param {string} workerId \n         * @param {UpsertWorkerConfigInput} [upsertWorkerConfigInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkerConfig(workerId: string, upsertWorkerConfigInput?: UpsertWorkerConfigInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerConfig>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkerConfig(workerId, upsertWorkerConfigInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadImageData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadThumbnailData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadThumbnailData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Add Metrics\n         * @param {AddMetricsInput} [addMetricsInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addMetrics(addMetricsInput?: AddMetricsInput, options?: any): AxiosPromise<void> {\n            return localVarFp.addMetrics(addMetricsInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images by id\n         * @param {BatchGetImagesInput} [batchGetImagesInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.batchGetImages(batchGetImagesInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.createServiceAccount(createServiceAccountInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new worker\n         * @param {UpsertWorkerInput} [upsertWorkerInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorker(upsertWorkerInput?: UpsertWorkerInput, options?: any): AxiosPromise<Worker> {\n            return localVarFp.createWorker(upsertWorkerInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorker(workerId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteWorker(workerId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Deposit to a user\\'s boost\n         * @param {string} userId \n         * @param {DepositRequest} [depositRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        depositBoost(userId: string, depositRequest?: DepositRequest, options?: any): AxiosPromise<Boost> {\n            return localVarFp.depositBoost(userId, depositRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in with Discord\n         * @param {DiscordLogin} [discordLogin] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        discordLogin(discordLogin?: DiscordLogin, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.discordLogin(discordLogin, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Generate a login code for a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        generateWorkerLoginCode(workerId: string, options?: any): AxiosPromise<WorkerLoginCode> {\n            return localVarFp.generateWorkerLoginCode(workerId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for the current user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoost(options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for a user\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBoostForUser(userId: string, options?: any): AxiosPromise<Boost> {\n            return localVarFp.getBoostForUser(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the global settings\n         * @param {string} key \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGlobalSettings(key: string, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.getGlobalSettings(key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get download urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageDownloadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageDownloadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get upload urls for image assets\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageUploadUrls(id: string, options?: any): AxiosPromise<ImageUrls> {\n            return localVarFp.getImageUploadUrls(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a worker\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorker(workerId: string, options?: any): AxiosPromise<Worker> {\n            return localVarFp.getWorker(workerId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a worker config\n         * @param {string} workerId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkerConfig(workerId: string, options?: any): AxiosPromise<WorkerConfig> {\n            return localVarFp.getWorkerConfig(workerId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the list of workers\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkers(options?: any): AxiosPromise<WorkerList> {\n            return localVarFp.getWorkers(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the boost for all users\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBoosts(options?: any): AxiosPromise<BoostList> {\n            return localVarFp.listBoosts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {string} [filter] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, filter, limit, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Log in as a worker\n         * @param {WorkerLoginCode} [workerLoginCode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginAsWorker(workerLoginCode?: WorkerLoginCode, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.loginAsWorker(workerLoginCode, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Ping a worker\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pingWorker(options?: any): AxiosPromise<void> {\n            return localVarFp.pingWorker(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage(processImageInput?: ProcessImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.processImage(processImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the boost level for the current user\n         * @param {UpdateBoostRequest} [updateBoostRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any): AxiosPromise<UpdateBoostResponse> {\n            return localVarFp.updateBoost(updateBoostRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the global settings\n         * @param {string} key \n         * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any): AxiosPromise<GlobalSettings> {\n            return localVarFp.updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a worker\n         * @param {string} workerId \n         * @param {UpsertWorkerInput} [upsertWorkerInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorker(workerId: string, upsertWorkerInput?: UpsertWorkerInput, options?: any): AxiosPromise<Worker> {\n            return localVarFp.updateWorker(workerId, upsertWorkerInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a worker config\n         * @param {string} workerId \n         * @param {UpsertWorkerConfigInput} [upsertWorkerConfigInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkerConfig(workerId: string, upsertWorkerConfigInput?: UpsertWorkerConfigInput, options?: any): AxiosPromise<WorkerConfig> {\n            return localVarFp.updateWorkerConfig(workerId, upsertWorkerConfigInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary image data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadImageData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadImageData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Upload the binary thumbnail data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadThumbnailData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.uploadThumbnailData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Add Metrics\n     * @param {AddMetricsInput} [addMetricsInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public addMetrics(addMetricsInput?: AddMetricsInput, options?: any) {\n        return AIBrushApiFp(this.configuration).addMetrics(addMetricsInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images by id\n     * @param {BatchGetImagesInput} [batchGetImagesInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public batchGetImages(batchGetImagesInput?: BatchGetImagesInput, options?: any) {\n        return AIBrushApiFp(this.configuration).batchGetImages(batchGetImagesInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a service account\n     * @param {CreateServiceAccountInput} [createServiceAccountInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createServiceAccount(createServiceAccountInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new worker\n     * @param {UpsertWorkerInput} [upsertWorkerInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createWorker(upsertWorkerInput?: UpsertWorkerInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createWorker(upsertWorkerInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a worker\n     * @param {string} workerId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteWorker(workerId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteWorker(workerId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Deposit to a user\\'s boost\n     * @param {string} userId \n     * @param {DepositRequest} [depositRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public depositBoost(userId: string, depositRequest?: DepositRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).depositBoost(userId, depositRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in with Discord\n     * @param {DiscordLogin} [discordLogin] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public discordLogin(discordLogin?: DiscordLogin, options?: any) {\n        return AIBrushApiFp(this.configuration).discordLogin(discordLogin, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Generate a login code for a worker\n     * @param {string} workerId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public generateWorkerLoginCode(workerId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).generateWorkerLoginCode(workerId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for the current user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoost(options?: any) {\n        return AIBrushApiFp(this.configuration).getBoost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for a user\n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getBoostForUser(userId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getBoostForUser(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the global settings\n     * @param {string} key \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getGlobalSettings(key: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getGlobalSettings(key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get download urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageDownloadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageDownloadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get upload urls for image assets\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageUploadUrls(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageUploadUrls(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a worker\n     * @param {string} workerId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorker(workerId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getWorker(workerId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a worker config\n     * @param {string} workerId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkerConfig(workerId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkerConfig(workerId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the list of workers\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkers(options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkers(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the boost for all users\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listBoosts(options?: any) {\n        return AIBrushApiFp(this.configuration).listBoosts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {string} [filter] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, filter?: string, limit?: number, direction?: 'asc' | 'desc', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, filter, limit, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Log in as a worker\n     * @param {WorkerLoginCode} [workerLoginCode] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public loginAsWorker(workerLoginCode?: WorkerLoginCode, options?: any) {\n        return AIBrushApiFp(this.configuration).loginAsWorker(workerLoginCode, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Ping a worker\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public pingWorker(options?: any) {\n        return AIBrushApiFp(this.configuration).pingWorker(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending image and set its status to processing.\n     * @param {ProcessImageInput} [processImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processImage(processImageInput?: ProcessImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).processImage(processImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the boost level for the current user\n     * @param {UpdateBoostRequest} [updateBoostRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateBoost(updateBoostRequest?: UpdateBoostRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateBoost(updateBoostRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the global settings\n     * @param {string} key \n     * @param {UpdateGlobalSettingsRequest} [updateGlobalSettingsRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateGlobalSettings(key: string, updateGlobalSettingsRequest?: UpdateGlobalSettingsRequest, options?: any) {\n        return AIBrushApiFp(this.configuration).updateGlobalSettings(key, updateGlobalSettingsRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a worker\n     * @param {string} workerId \n     * @param {UpsertWorkerInput} [upsertWorkerInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateWorker(workerId: string, upsertWorkerInput?: UpsertWorkerInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateWorker(workerId, upsertWorkerInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a worker config\n     * @param {string} workerId \n     * @param {UpsertWorkerConfigInput} [upsertWorkerConfigInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateWorkerConfig(workerId: string, upsertWorkerConfigInput?: UpsertWorkerConfigInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateWorkerConfig(workerId, upsertWorkerConfigInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary image data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadImageData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadImageData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Upload the binary thumbnail data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public uploadThumbnailData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).uploadThumbnailData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://www.aibrush.art\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: admin@aibrush.art\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import { Rect } from \"../pages/image-editor/models\";\n\nexport function featherEdges(\n    selectionOverlay: Rect,\n    imageWidth: number,\n    imageHeight: number,\n    imageData: ImageData,\n    featherWidth?: number\n) {\n    const featherLeftEdge = selectionOverlay.x != 0;\n    const featherRightEdge =\n        selectionOverlay.x + selectionOverlay.width != imageWidth;\n    const featherTopEdge = selectionOverlay.y != 0;\n    const featherBottomEdge =\n        selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n    const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n    if (!featherWidth) {\n        featherWidth = Math.floor(baseWidth / 8);\n    }\n\n    if (featherTopEdge) {\n        for (let y = 0; y < featherWidth; y++) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (y / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherBottomEdge) {\n        for (\n            let y = selectionOverlay.height - featherWidth;\n            y < selectionOverlay.height;\n            y++\n        ) {\n            for (let x = 0; x < selectionOverlay.width; x++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.height - y) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherLeftEdge) {\n        for (let x = 0; x < featherWidth; x++) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha = (x / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n    if (featherRightEdge) {\n        for (\n            let x = selectionOverlay.width - featherWidth;\n            x < selectionOverlay.width;\n            x++\n        ) {\n            for (let y = 0; y < selectionOverlay.height; y++) {\n                const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                const alpha =\n                    ((selectionOverlay.width - x) / featherWidth) * 255;\n                const existingAlpha = imageData.data[pixelIndex + 3];\n                imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n            }\n        }\n    }\n}\n\nexport function applyAlphaMask(imageData: ImageData, alphaMask: ImageData) {\n    if (\n        imageData.width != alphaMask.width ||\n        imageData.height != alphaMask.height\n    ) {\n        throw new Error(\"imageData and alphaMask are not the same size\");\n    }\n    const spread = 10;\n    for (let x = 0; x < imageData.width; x++) {\n        for (let y = 0; y < imageData.height; y++) {\n            // r, g, b, a\n            // if transparency within 10 pixels, set alpha to 1, otherwise to zero.\n            // binary alpha inversion with spread\n            let alpha = false;\n            for (\n                let x2 = Math.max(0, x - spread);\n                x2 < Math.min(imageData.width, x + spread);\n                x2++\n            ) {\n                for (\n                    let y2 = Math.max(0, y - spread);\n                    y2 < Math.min(imageData.height, y + spread);\n                    y2++\n                ) {\n                    const alphaValue =\n                        alphaMask.data[y2 * alphaMask.width * 4 + x2 * 4 + 3];\n                    if (alphaValue < 255) {\n                        alpha = true;\n                    }\n                }\n            }\n            const alphaIndex = y * imageData.width * 4 + x * 4 + 3;\n            if (alpha) {\n                imageData.data[alphaIndex] = 255;\n            } else {\n                imageData.data[alphaIndex] = 0;\n            }\n        }\n    }\n}\n\nfunction getAverageColor(imageData: ImageData) {\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    let count = 0;\n    for (let i = 0; i < imageData.data.length; i += 4) {\n        if (imageData.data[i + 3] > 0) {\n            red += imageData.data[i];\n            green += imageData.data[i + 1];\n            blue += imageData.data[i + 2];\n            count++;\n        }\n    }\n    return {\n        red: red / count,\n        green: green / count,\n        blue: blue / count,\n    };\n}\n\nexport function fixRedShift(baseImageData: ImageData, imageData: ImageData) {\n    // get the average red, green and blue values for the base image\n    const baseAverageColor = getAverageColor(baseImageData);\n    const averageColor = getAverageColor(imageData);\n\n    // we need to multiply pixels in imageData by an amount so that the average equals the base average\n    // do this for red, green and blue separately\n    const redMultiplier = baseAverageColor.red / averageColor.red;\n    const greenMultiplier = baseAverageColor.green / averageColor.green;\n    const blueMultiplier = baseAverageColor.blue / averageColor.blue;\n\n    for (let i = 0; i < imageData.data.length; i += 4) {\n        imageData.data[i] *= Math.floor(redMultiplier);\n        imageData.data[i + 1] *= Math.floor(greenMultiplier);\n        imageData.data[i + 2] *= Math.floor(blueMultiplier);\n    }\n}\n\nexport function createEncodedThumbnail(encodedImage: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        // use html5 canvas\n        // crop to square aspect ratio on 128x128 canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 128;\n\n        const image = new Image();\n        image.src = `data:image/png;base64,${encodedImage}`;\n        image.onload = () => {\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                throw new Error(\"Could not create canvas context\");\n            }\n            const width = 128;\n            const height = 128;\n            canvas.width = width;\n            canvas.height = height;\n            \n            const aspectRatio = image.width / image.height;\n            const cropWidth = aspectRatio > 1 ? image.width : image.height * aspectRatio;\n            const cropHeight = aspectRatio > 1 ? image.width / aspectRatio : image.height;\n            const cropX = (image.width - cropWidth) / 2;\n            const cropY = (image.height - cropHeight) / 2;\n            context.drawImage(\n                image,\n                cropX,\n                cropY,\n                cropWidth,\n                cropHeight,\n                0,\n                0,\n                width,\n                height\n            );\n\n            // save to png\n            const imageUrl = canvas.toDataURL(\"image/png\");\n            const base64 = imageUrl.split(\",\")[1];\n            resolve(base64);\n        };\n    });\n}\n\nexport function encodedImageToBlob(encodedImage: string): Blob {\n    const binaryString = atob(encodedImage);\n    const arr = [];\n    for (let i = 0; i < binaryString.length; i++) {\n        arr.push(binaryString.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(arr)], {\n        type: \"image/png\",\n    });\n}\n\n// This function is made to work with S3 presigned urls.\n// Solution found at https://stackoverflow.com/questions/22531114/how-to-upload-to-aws-s3-directly-from-browser-using-a-pre-signed-url-instead-of\nexport function uploadBlob(signedUrl: string, blob: Blob): Promise<void> {\n    return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", signedUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", \"image/png\");\n        xhr.onload = () => {\n            if (xhr.status < 400) {\n                // success!\n                resolve();\n            }\n        };\n        xhr.onerror = (err) => {\n            // error...\n            reject(err);\n        };\n        xhr.send(blob); // `file` is a File object here\n    });\n};","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    private startTouches: React.TouchList | null;\n    private startZoom = 1;\n    private startOffsetX = 0;\n    private startOffsetY = 0;\n\n    constructor(private renderer: Renderer) {\n        this.startTouches = null;\n    }\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * this.renderer.getWidth();\n        movementY = (movementY / rect.height) * this.renderer.getHeight();\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.startTouches = event.touches;\n            this.startZoom = this.renderer.getZoom();\n            this.startOffsetX = this.renderer.getOffsetX();\n            this.startOffsetY = this.renderer.getOffsetY();\n        }\n    }\n\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.startTouches) {\n            const canvasRect = this.renderer.getCanvas().getBoundingClientRect();\n            const startTouch1 = this.startTouches[0];\n            const startTouch2 = this.startTouches[1];\n            const touch1 = event.touches[0];\n            const touch2 = event.touches[1];\n\n            const startDistance = Math.sqrt(\n                Math.pow(startTouch1.clientX - startTouch2.clientX, 2) +\n                Math.pow(startTouch1.clientY - startTouch2.clientY, 2)\n            );\n            const distance = Math.sqrt(\n                Math.pow(touch1.clientX - touch2.clientX, 2) +\n                Math.pow(touch1.clientY - touch2.clientY, 2)\n            );\n            const zoom = this.startZoom * (distance / startDistance);\n\n            const startCenterX = (startTouch1.clientX + startTouch2.clientX) / 2;\n            const startCenterY = (startTouch1.clientY + startTouch2.clientY) / 2;\n            const centerX = (touch1.clientX + touch2.clientX) / 2;\n            const centerY = (touch1.clientY + touch2.clientY) / 2;\n\n            const startCanvasPoint = this.translateMouseToCanvasCoordinates(\n                startCenterX - canvasRect.left,\n                startCenterY - canvasRect.top\n            );\n            const canvasPoint = this.translateMouseToCanvasCoordinates(\n                centerX - canvasRect.left,\n                centerY - canvasRect.top\n            );\n\n            let offsetX = this.startOffsetX;\n            let offsetY = this.startOffsetY;\n\n            let xDiff = canvasPoint.x - startCanvasPoint.x;\n            let yDiff = canvasPoint.y - startCanvasPoint.y;\n\n            let xDiff2 = canvasPoint.x - -this.renderer.getOffsetX();\n            let yDiff2 = canvasPoint.y - -this.renderer.getOffsetY();\n\n            offsetX -= xDiff2 * (zoom / this.startZoom) - xDiff2 - (xDiff * (distance / startDistance));\n            offsetY -= yDiff2 * (zoom / this.startZoom) - yDiff2 - (yDiff * (distance / startDistance));\n\n            this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n        }\n    }\n\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        this.startTouches = null;\n    }\n\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        // x = (x / rect.width) * this.renderer.getWidth();\n        // y = (y / rect.height) * this.renderer.getHeight();\n\n        x = (x / rect.width) * 512;\n        y = (y / rect.height) * 512;\n\n        x = Math.round(x - offsetX);\n        y = Math.round(y - offsetY);\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = Math.round((x / this.renderer.getWidth()) * rect.width);\n        y = Math.round((y / this.renderer.getHeight()) * rect.height);\n\n        return { x: x, y: y };\n    }\n}","import React from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>): void;\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>): void;\n\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n    saveListener?: (encodedImage: string, args?: any) => void = () => {};\n\n    private touchHandle: number | undefined;\n\n    readonly zoomHelper: ZoomHelper;\n\n    private _pinchZooming = false;\n\n    constructor(readonly renderer: Renderer, readonly name: string) {\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n\n    onTouchStart(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this.touchHandle) {\n            window.clearTimeout(this.touchHandle);\n        }\n        const touches: React.Touch[] = [];\n        // make a deep copy so that the values live past the delay\n        for (let i = 0; i < event.touches.length; i++) {\n            const touch = event.touches[i];\n            touches.push({\n                identifier: touch.identifier,\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                screenX: touch.screenX,\n                screenY: touch.screenY,\n                target: null,\n            } as any);\n        }\n        event = {\n            touches,\n        } as any;\n        this.touchHandle = window.setTimeout(() => {\n            this.touchHandle = undefined;\n            if (event.touches.length === 2) {\n                this._pinchZooming = true;\n                this.zoomHelper.onTouchStart(event);\n            } else {\n                const rect = this.renderer.getCanvas().getBoundingClientRect();\n                const touch = event.touches[0];\n                if (touch) {\n                    this.onMouseDown({\n                        type: \"touch\",\n                        button: 0,\n                        nativeEvent: {\n                            offsetX: touch.clientX - rect.left,\n                            offsetY: touch.clientY - rect.top,\n                        },\n                    } as any);\n                }\n            }\n        }, 200);\n    }\n    onTouchMove(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (event.touches.length === 2) {\n            this.zoomHelper.onTouchMove(event);\n        } else {\n            const rect = this.renderer.getCanvas().getBoundingClientRect();\n            const touch = event.touches[0];\n            if (touch) {\n                this.onMouseMove({\n                    type: \"touch\",\n                    button: 0,\n                    nativeEvent: {\n                        offsetX: touch.clientX - rect.left,\n                        offsetY: touch.clientY - rect.top,\n                    },\n                } as any);\n            }\n        }\n    }\n    onTouchEnd(event: React.TouchEvent<HTMLCanvasElement>) {\n        if (this._pinchZooming) {\n            this._pinchZooming = false;\n            this.zoomHelper.onTouchEnd(event);\n        } else {\n            this.onMouseUp({\n                button: 0,\n                type: \"touch\",\n            } as any);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {}\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\nconsole.log(process.env)\nconst DISCORD_CLIENT_ID = \"1043951225944678490\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n\n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            });\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    };\n\n    const discordLink = () => {\n        // localhost url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=http%3A%2F%2Flocalhost%3A3001%2Fdiscord-login&response_type=code&scope=identify%20email\n        // prod url:\n        // https://discord.com/api/oauth2/authorize?client_id=1043951225944678490&redirect_uri=https%3A%2F%2Fwww.aibrush.art%2Fdiscord-login&response_type=code&scope=identify%20email\n        const host = window.location.host;\n        const protocol = window.location.protocol;\n        const redirectUri = `${protocol}//${host}/discord-login`;\n        const url = `https://discord.com/api/oauth2/authorize?client_id=${DISCORD_CLIENT_ID}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20email`;\n        return url;\n    };\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code,\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Failed to verify code\");\n        }\n    };\n\n    // bootstrap login form\n    return (\n        <>\n            <div\n                className=\"row\"\n                style={{\n                    height: \"100vh\",\n                    marginLeft: \"0px\",\n                    marginRight: \"0px\",\n                }}\n            >\n                <div className=\"col-md-6 login-splash\">\n                    {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.png)\"}}></div> */}\n                    <img\n                        className=\"center-cropped\"\n                        src=\"/images/scifi-dreamland.png\"\n                    />\n                </div>\n                <div className=\"col-md-6\">\n                    <div\n                        style={{\n                            fontWeight: 500,\n                            fontSize: \"48px\",\n                            marginTop: \"200px\",\n                        }}\n                    >\n                        AiBrush\n                    </div>\n\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        Login With Email\n                    </div>\n                    {/* Display error if one is set */}\n                    {/* Use <p class=\"text-danger\" */}\n                    {err && <p className=\"text-danger\">{err}</p>}\n                    {err && (\n                        <p className=\"text-info\">\n                            If you don't have an account yet, request one by\n                            sending an email to{\" \"}\n                            <a href=\"mailto:admin@aibrush.art\">\n                                admin@aibrush.art\n                            </a>\n                        </p>\n                    )}\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {/* If email submitted, show verify code form*/}\n                        {emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"verifyCode\">\n                                        Verify Code\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        id=\"verifyCode\"\n                                        placeholder=\"Verification Code\"\n                                        value={code}\n                                        onChange={(e) =>\n                                            setCode(e.target.value)\n                                        }\n                                    />\n                                </div>\n                                {/* Cancel verification and go back to email */}\n                                <button\n                                    className=\"btn btn-secondary\"\n                                    onClick={() => setEmailSubmitted(false)}\n                                >\n                                    Cancel\n                                </button>\n                                &nbsp;\n                                {/* Verify code */}\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}\n                                >\n                                    Verify\n                                </button>\n                            </>\n                        )}\n                        {/* Else, show login form */}\n                        {!emailSubmitted && (\n                            <>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"email\"\n                                        aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"\n                                        value={email}\n                                        onChange={(e) =>\n                                            setEmail(e.target.value.trim())\n                                        }\n                                    />\n                                </div>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    style={{ float: \"right\" }}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        onLogin();\n                                    }}\n                                >\n                                    Login\n                                </button>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"88px\",\n                            marginBottom: \"24px\",\n                        }}\n                    >\n                        <hr/>\n                        OR\n                    </div>\n                    <div\n                        style={{\n                            marginLeft: \"10%\",\n                            marginRight: \"10%\",\n                            marginTop: \"24px\",\n                        }}\n                    >\n                        <a href={discordLink()} className=\"btn btn-primary\">\n                            <i className=\"fab fa-discord\"></i> Login With Discord\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Service is unavailable</strong>\n        </div>\n    );\n}\n\n","import React, { FC, useEffect, useState } from \"react\";\nimport { saveAs } from \"file-saver\";\n\nimport { AIBrushApi, CreateServiceAccountInputTypeEnum } from \"../client/api\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const WorkerConfigPage: FC<Props> = ({ api }) => {\n\n    const [type, setType] = useState<CreateServiceAccountInputTypeEnum>(CreateServiceAccountInputTypeEnum.Private);\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n\n    // show some information about what a worker is and does\n    // * a worker processes requests to create images with AIBrush\n    const info = (): JSX.Element => {\n        return (\n            <>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h2>Worker Config</h2>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>\n                            This page allows you to download a worker config file needed to access the AIBrush api.\n                            This file can be used to run a worker on a local or cloud machine, or a Colab notebook.\n                            Images worker requires an NVidia GPU with at least 12GB of VRAM, but at least 16GB is recommended.\n                            Suggestions worker requires an NVidia GPU with at least 16GB of VRAM.\n\n                            See the <a href=\"https://github.com/wolfgangmeyers/aibrush-2/tree/main/worker#readme\" target=\"_blank\">worker readme</a> for details on how to set up a worker process.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-6 offset-lg-3\">\n                        <hr/>\n                        <p>\n                            Here is a link to a Google Colab notebook that can be used as a worker node:\n                        </p>\n                        {/* Link to google colab notebook at https://colab.research.google.com/drive/1cW3vVjdeI19o7a9miMu47J5EDyHfZT20#scrollTo=Ed1iT6_JK0Mo */}\n                        <a className=\"btn btn-primary top-button\" href=\"https://colab.research.google.com/drive/1cW3vVjdeI19o7a9miMu47J5EDyHfZT20#scrollTo=Ed1iT6_JK0Mo\" target=\"_blank\">\n                            {/* font awesome google colab icon */}\n                            <i className=\"fab fa-google\"></i>&nbsp;\n                            Google Colab Notebook\n                        </a>\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    const download = async () => {\n        const creds = await api.createServiceAccount({\n            type: type\n        })\n        const blob = new Blob([JSON.stringify(creds.data)], { type: \"application/json\" });\n        saveAs(blob, \"credentials.json\");\n    }\n\n    // public / private dropdown\n    // download button\n    const form = (): JSX.Element => {\n        return (\n            <div className=\"row\">\n                {/* lg-6 with lg-3 offset */}\n                <div className=\"col-lg-6 offset-lg-3\">\n                    <form>\n                        {isAdmin && <div className=\"form-group\">\n                            <label htmlFor=\"type\">Type</label>\n                            <select className=\"form-control\" id=\"type\" value={type} onChange={(e) => setType(e.target.value as CreateServiceAccountInputTypeEnum)}>\n                                <option value=\"public\">Public</option>\n                                <option value=\"private\">Private</option>\n                            </select>\n                        </div>}\n                        <button type=\"submit\" className=\"btn btn-primary\" onClick={() => download()}>Download</button>\n                    </form>\n                </div>\n\n            </div>\n        )\n    }\n\n    useEffect(() => {\n        api.isAdmin().then(isAdmin => setIsAdmin(!!isAdmin.data.is_admin));\n    }, [])\n\n    return (\n        <>\n            {info()}\n            {form()}\n        </>\n    )\n}","import moment from \"moment\";\nimport React, { FC, useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, Boost } from \"../../client\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const BoostList: FC<Props> = ({ api }) => {\n    const [boosts, setBoosts] = useState<Boost[]>([]);\n    const [email, setEmail] = useState<string>(\"\");\n    const [amount, setAmount] = useState<number>(0);\n    const [level, setLevel] = useState<number>(1);\n\n    const [showDeposit, setShowDeposit] = useState<boolean>(false);\n\n    function refresh() {\n        api.listBoosts().then((resp) => {\n            const boosts = resp.data.boosts || [];\n            setBoosts(boosts);\n        });\n    }\n\n    useEffect(() => {\n        refresh();\n    }, [api]);\n\n    const onDepositBoost = async () => {\n        await api.depositBoost(email, {\n            amount: amount * level * 1000 * 60 * 60,\n            level: level,\n        });\n        refresh();\n        setShowDeposit(false);\n    };\n\n    return (\n        <>\n            <h1>Active Boosts</h1>\n            <div className=\"row\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => setShowDeposit(true)}\n                >\n                    <i className=\"fas fa-plus\" />\n                    &nbsp; Deposit Boost\n                </button>\n                &nbsp;\n                <button className=\"btn btn-primary\" onClick={refresh}>\n                    <i className=\"fas fa-sync\" />\n                    &nbsp; Refresh\n                </button>\n            </div>\n            <hr />\n            <div className=\"row\" style={{ marginTop: \"16px\" }}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>User</th>\n                            <th>Level</th>\n                            <th>Expires</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {boosts.map((boost) => (\n                            <tr key={boost.user_id}>\n                                <td>{boost.user_id}</td>\n                                <td>{boost.level}</td>\n                                <td>\n                                    {!boost.is_active && moment().add(boost.balance, \"milliseconds\").fromNow()}\n                                    {boost.is_active && moment(boost.activated_at + boost.balance).fromNow()}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            {showDeposit && (\n                <Modal show={showDeposit} onHide={() => setShowDeposit(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Deposit Boost</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* deposit controls */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"email\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"amount\">Amount</label>\n                            <input\n                                type=\"number\"\n                                className=\"form-control\"\n                                id=\"amount\"\n                                value={amount}\n                                onChange={(e) =>\n                                    setAmount(Number(e.target.value))\n                                }\n                                min={0.1}\n                                max={10}\n                                step={0.1}\n                            />\n                        </div>\n                        {/* level is a dropdown. 1=quick, 2=fast, 4=pro, 8=super */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"level\">Level</label>\n                            <select\n                                className=\"form-control\"\n                                id=\"level\"\n                                value={level}\n                                onChange={(e) =>\n                                    setLevel(parseInt(e.target.value))\n                                }\n                            >\n                                <option value={1}>Quick</option>\n                                <option value={2}>Fast</option>\n                                <option value={4}>Pro</option>\n                                <option value={8}>Super</option>\n                            </select>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        {/* cancel button */}\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-secondary\"\n                            onClick={() => setShowDeposit(false)}\n                        >\n                            Cancel\n                        </button>\n                        &nbsp;\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={onDepositBoost}\n                        >\n                            Deposit\n                        </button>\n                    </Modal.Footer>\n                </Modal>\n            )}\n        </>\n    );\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { WorkerSettings, WorkerSettingsJson } from \"../../lib/globalSettings\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\n// global settings all have a \"settings_key\" and \"settings_json\" field. settings_json is any.\n\n// default \"workers\" setting:\n// {\n//     \"minimum_worker_allocations\": {\n//         \"stable_diffusion_text2im\": 0,\n//         \"stable_diffusion_inpainting\": 0,\n//         \"swinir\": 0,\n//     }\n// }\n\nexport const GlobalSettings: FC<Props> = ({ api }) => {\n    const [workerSettings, setWorkerSettings] = useState<WorkerSettingsJson>({\n        minimum_worker_allocations: {\n            stable_diffusion_text2im: 0,\n            stable_diffusion_inpainting: 0,\n            swinir: 0,\n        },\n    });\n    const [saving, setSaving] = useState<boolean>(false);\n\n    const loadWorkerSettings = async () => {\n        const settings = await api.getGlobalSettings(\"workers\");\n        setWorkerSettings(settings.data.settings_json as any);\n    };\n\n    const saveWorkerSettings = async () => {\n        setSaving(true);\n        try {\n            await api.updateGlobalSettings(\"workers\", {\n                settings_json: workerSettings,\n            });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    useEffect(() => {\n        loadWorkerSettings();\n    }, []);\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Global Settings</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {/* slider from 0 to 10 for each model */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_text2im\">\n                        stable_diffusion_text2im: {workerSettings.minimum_worker_allocations.stable_diffusion_text2im}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_text2im}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_text2im\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_text2im: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"stable_diffusion_inpainting\">\n                        stable_diffusion_inpainting: {workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.stable_diffusion_inpainting}\n                        className=\"form-range\"\n                        id=\"stable_diffusion_inpainting\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    stable_diffusion_inpainting: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label htmlFor=\"swinir\">\n                        swinir: {workerSettings.minimum_worker_allocations.swinir}\n                    </label>\n                    <input\n                        style={{marginLeft: \"16px\"}}\n                        type=\"range\"\n                        min={0}\n                        max={10}\n                        value={workerSettings.minimum_worker_allocations.swinir}\n                        className=\"form-range\"\n                        id=\"swinir\"\n                        onChange={(e) => {\n                            setWorkerSettings({\n                                ...workerSettings,\n                                minimum_worker_allocations: {\n                                    ...workerSettings.minimum_worker_allocations,\n                                    swinir: parseInt(e.target.value),\n                                },\n                            });\n                        }}\n                    />\n                </div>\n            </div>\n            \n            \n            {/* bottom row: save button */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-primary\" onClick={saveWorkerSettings} disabled={saving}>\n                        {saving ? <>\n                            <i className=\"fas fa-spinner fa-spin\" />\n                            &nbsp; Saving...\n                        </> : \"Save\"}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};","import moment from \"moment\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, Worker, WorkerConfig } from \"../../client\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const WorkerList: FC<Props> = ({ api }) => {\n    const [workers, setWorkers] = useState<Worker[]>([]);\n    const [workerConfigs, setWorkerConfigs] = useState<WorkerConfig[]>([]);\n    const [code, setCode] = useState<string>(\"\");\n\n    function refresh() {\n        api.getWorkers().then((resp) => {\n            const workers = resp.data.workers || [];\n            setWorkers(workers);\n            const workerConfigPromises = workers.map((worker) => {\n                return api.getWorkerConfig(worker.id);\n            });\n            Promise.all(workerConfigPromises).then((workerConfigs) => {\n                setWorkerConfigs(workerConfigs.map((resp) => resp.data));\n            });\n        });\n    }\n\n    useEffect(() => {\n        refresh();\n    }, [api]);\n\n    const configsByWorkerId = workerConfigs.reduce((acc, config) => {\n        acc[config.worker_id] = config;\n        return acc;\n    }, {} as Record<string, WorkerConfig>);\n\n    const onDeleteWorker = async (worker: Worker) => {\n        await api.deleteWorker(worker.id);\n        setWorkers(workers.filter((w) => w.id !== worker.id));\n    };\n\n    const onGenerateCode = async (worker: Worker) => {\n        const resp = await api.generateWorkerLoginCode(worker.id);\n        setCode(resp.data.login_code);\n    };\n\n    const onCreateWorker = async () => {\n        const displayName = window.prompt(`Worker ${workers.length + 1}`);\n        if (displayName) {\n            const worker = await api.createWorker({\n                display_name: displayName,\n            });\n            setWorkers([...workers, worker.data]);\n        }\n    };\n\n    const onRenameWorker = async (worker: Worker) => {\n        const displayName = window.prompt(\n            worker.display_name,\n            `Worker ${workers.length + 1}`\n        );\n        if (displayName) {\n            await api.updateWorker(worker.id, {\n                display_name: displayName,\n            });\n            setWorkers(\n                workers.map((w) =>\n                    w.id === worker.id ? { ...w, display_name: displayName } : w\n                )\n            );\n        }\n    };\n\n    // for each worker, render a row\n    // show id, display name, and status. actions = delete, generate code\n\n    return (\n        <>\n            <h1>Workers</h1>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={onCreateWorker}\n                    >\n                        Create Worker\n                    </button>\n                    &nbsp;\n                    {/* refresh button */}\n                    <button className=\"btn btn-primary\" onClick={refresh}>\n                        Refresh\n                    </button>\n                </div>\n            </div>\n            <div className=\"row\" style={{ marginTop: \"16px\" }}>\n                <div className=\"col-12\">\n                    {workers.length > 0 && (\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>Display Name</th>\n                                    <th>GPU Count</th>\n                                    <th>GPU Configurations</th>\n                                    <th>Status</th>\n                                    <th>Last Ping</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {workers.map((worker) => (\n                                    <tr key={worker.id}>\n                                        <td>{worker.id}</td>\n                                        <td>{worker.display_name}</td>\n                                        <td>{worker.num_gpus || 1}</td>\n                                        <td>\n                                            {configsByWorkerId[worker.id] &&\n                                                configsByWorkerId[worker.id]\n                                                    .gpu_configs &&\n                                                configsByWorkerId[\n                                                    worker.id\n                                                ].gpu_configs!.map((config) => (\n                                                    <div\n                                                        key={`${worker.id}_${config.gpu_num}`}\n                                                    >\n                                                        GPU {config.gpu_num}:{\" \"}\n                                                        {config.model}\n                                                    </div>\n                                                ))}\n                                        </td>\n                                        <td>{worker.status}</td>\n                                        <td>{!!worker.last_ping && moment(worker.last_ping).fromNow()}</td>\n                                        <td>\n                                            <button\n                                                className=\"btn btn-danger btn-sm\"\n                                                onClick={() =>\n                                                    onDeleteWorker(worker)\n                                                }\n                                            >\n                                                Delete\n                                            </button>\n                                            &nbsp;\n                                            <button\n                                                className=\"btn btn-primary btn-sm\"\n                                                onClick={() =>\n                                                    onGenerateCode(worker)\n                                                }\n                                            >\n                                                Generate Code\n                                            </button>\n                                            &nbsp;\n                                            <button\n                                                className=\"btn btn-primary btn-sm\"\n                                                onClick={() =>\n                                                    onRenameWorker(worker)\n                                                }\n                                            >\n                                                Rename\n                                            </button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    )}\n                </div>\n            </div>\n            {code && (\n                <Modal show={!!code} onHide={() => setCode(\"\")}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Worker Login Code</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <p>\n                            Give this code to the worker to login to the\n                            application.\n                        </p>\n                        <p>\n                            <strong>{code}</strong>\n                        </p>\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi } from \"../../client/api\";\nimport { BoostList } from \"./BoostList\";\nimport { GlobalSettings } from \"./GlobalSettings\";\nimport { WorkerList } from \"./WorkerList\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Admin: FC<Props> = ({ api }) => {\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    };\n\n    return (\n        <div style={{paddingBottom: \"48px\"}}>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Admin features</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            {links.length > 0 && (\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>Right click to copy invite links</p>\n                    </div>\n                </div>\n            )}\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    {/* show a list of hyperlinks */}\n                    <div className=\"btn-group-vertical\">\n                        {links.map((link, i) => (\n                            <a key={i} href={link} className=\"btn btn-primary\">\n                                <i className=\"fas fa-link\" />\n                                &nbsp; Invite Link\n                            </a>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {/* button to generate links */}\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={onGenerateLink}\n                    >\n                        Generate Link\n                    </button>\n                </div>\n            </div>\n            <hr />\n            <BoostList api={api} />\n            <hr />\n            <WorkerList api={api} />\n            <hr />\n            <GlobalSettings api={api} />\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, ImageStatusEnum } from \"../client/api\";\n\ninterface Props {\n    assetsUrl: string;\n    image: Image;\n    bulkDelete?: boolean;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, bulkDelete, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.png?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n\n    useEffect(() => {\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.phrases[0];\n    }\n    \n    let className = \"image-thumbnail\";\n    if (bulkDelete) {\n        className += \" bulk-delete\";\n    }\n\n    return (\n        <div\n            className={className}\n            style={{\n                backgroundImage: `url(${src}${retry}), url(/images/default.png)`,\n                filter: image.nsfw ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {!bulkDelete && <div className=\"image-thumbnail-label\">\n                {label}\n            </div>}\n\n            {bulkDelete && <div className=\"image-thumbnail-label\">\n                <input type=\"checkbox\" style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    marginLeft: \"16px\",\n                    marginTop: \"16px\",\n                }} checked readOnly />\n            </div>}\n\n            {image.status === ImageStatusEnum.Pending && <div className=\"image-thumbnail-pending\">\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                image.status === ImageStatusEnum.Processing && <div className=\"image-thumbnail-pending\">\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { AIBrushApi, Image } from \"../client\";\nimport moment from \"moment\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const DeletedImages: FC<Props> = ({ api, assetsUrl }) => {\n    const [images, setImages] = useState<Image[]>([]);\n\n    const history = useHistory();\n\n    const loadImages = async () => {\n        const cursor = moment().add(-24, \"hours\").valueOf();\n        // TODO: special api call for deleted images?\n        const resp = await api.listImages(cursor, \"\", 100, \"asc\");\n        setImages(\n            (resp.data.images?.filter((image) => !!image.deleted_at) || []).sort(\n                (a, b) => {\n                    if (a.deleted_at && b.deleted_at) {\n                        return b.deleted_at - a.deleted_at;\n                    }\n                    return 0;\n                }\n            )\n        );\n    };\n\n    const onDeleteImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.deleteImage(image.id);\n    };\n\n    const onRestoreImage = async (image: Image) => {\n        setImages(images.filter((i) => i.id !== image.id));\n        await api.updateImage(image.id, { deleted_at: null });\n    };\n\n    useEffect(() => {\n        loadImages();\n    }, [api]);\n\n    return (\n        <div>\n            {/* table made of divs */}\n            {/* imagethumbnail, phrases, action */}\n            <div>\n                {/* <div style={{ marginBottom: \"8px\" }}>\n                    <div style={{ display: \"inline-block\", width: \"200px\" }}>\n                        Image\n                    </div>\n                    <div style={{ display: \"inline-block\", width: \"200px\" }}>\n                        Action\n                    </div>\n                </div> */}\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                            <i\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => history.goBack()}\n                                className=\"fas fa-chevron-left\"\n                            ></i>\n                            &nbsp; Deleted Images\n                        </h1>\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginTop: \"32px\"}}>\n                    <div className=\"col-sm-2 offset-sm-2\">Image</div>\n                    <div className=\"col-sm-8\">Action</div>\n                </div>\n                {images.map((image) => (\n                    <div\n                        className=\"row\"\n                        style={{\n                            marginTop: \"16px\",\n                            borderBottom: \"1px solid #303030\",\n                        }}\n                    >\n                        <div className=\"col-sm-2 offset-sm-2\">\n                            <ImageThumbnail\n                                assetsUrl={assetsUrl}\n                                image={image}\n                            />\n                        </div>\n                        <div\n                            className=\"col-sm-8\"\n                            style={{\n                                paddingTop: \"64px\",\n                                paddingBottom: \"64px\",\n                            }}\n                        >\n                            <button\n                                className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                onClick={() => onDeleteImage(image)}\n                                style={{\n                                    marginRight: \"8px\",\n                                }}\n                            >\n                                <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                            </button>\n                            <button\n                                className=\"btn btn-primary btn-sm image-popup-restore-button\"\n                                onClick={() => onRestoreImage(image)}\n                            >\n                                <i className=\"fa fa-undo\"></i>&nbsp;Restore\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n","export interface BoostLevel {\n    level: number\n    name: string\n    description: string\n}\n\nexport const BOOST_LEVELS: BoostLevel[] = [\n    {\n        level: 1,\n        name: \"Quick\",\n        description: \"This boost is a great deal for anyone who needs dedicated gpu power on a budget. Estimated peak output: 350 images per hour\"\n    },\n    {\n        level: 2,\n        name: \"Fast\",\n        description: \"With twice the gpu power of the Quick boost, the Fast boost is ideal for the impatient hobbyist. Estimated peak output: 700 images per hour\"\n    },\n    {\n        level: 4,\n        name: \"Pro\",\n        description: \"Is Fast not enough for you? Prepare to break the sound barrier and double your gpu power with the Pro boost. Estimated peak output: 1400 images per hour\"\n    },\n    {\n        level: 8,\n        name: \"Super\",\n        description: \"Upgrade to the Pro boost to achieve unparalleled speed. This boost is for people who want to make images as fast as possible. Estimated peak output: 2800 images per hour\"\n    }\n]","import React, { FC, useState, useEffect, CSSProperties } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { BOOST_LEVELS } from \"../lib/boost\";\n\nimport \"./BoostLevelPopup.css\";\n\ninterface Props {\n    selectedBoostLevel: number;\n    onUpdateBoostLevel: (level: number) => void;\n    onCancel: () => void;\n}\n\nexport const BoostLevelPopup: FC<Props> = ({\n    selectedBoostLevel,\n    onUpdateBoostLevel,\n    onCancel,\n}) => {\n\n    const [updatedBoostLevel, setUpdatedBoostLevel] = useState<number>(selectedBoostLevel);\n\n    useEffect(() => {\n        setUpdatedBoostLevel(selectedBoostLevel);\n    }, [selectedBoostLevel])\n\n    return (<Modal\n        onHide={() => onCancel()}\n        centered\n        show={true}\n    >\n        <Modal.Header closeButton>\n            <Modal.Title>Boost Level</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            {/* Select from the list: Quick (1), Fast (2), Pro (4) and Super (8)\n            <div className=\"form-group\">\n                <label htmlFor=\"boost-level\">Boost Level</label>\n                <select\n                    className=\"form-control\"\n                    id=\"boost-level\"\n                    value={selectedBoostLevel}\n                    onChange={(e) =>\n                        setUpdatedBoostLevel(parseInt(e.target.value))\n                    }\n                >\n                    <option value={1}>Quick</option>\n                    <option value={2}>Fast</option>\n                    <option value={4}>Pro</option>\n                    <option value={8}>Super</option>\n                </select>\n            </div> */}\n            {BOOST_LEVELS.map(boostLevel => (\n                <div\n                    className={\"boost-item\" + (updatedBoostLevel === boostLevel.level ? \" selected\" : \"\")}\n                    key={boostLevel.level}\n                    onClick={() => setUpdatedBoostLevel(boostLevel.level)}\n                >\n                    <div className=\"boost-item-label\">\n                        {boostLevel.name}\n                    </div>\n                    <div className=\"boost-item-description\">\n                        {boostLevel.description}\n                    </div>\n                </div>\n            ))}\n        </Modal.Body>\n        <Modal.Footer>\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={() => onCancel()}\n            >\n                Close\n            </button>\n            &nbsp;\n            <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={() => onUpdateBoostLevel(updatedBoostLevel)}\n            >\n                Update\n            </button>\n        </Modal.Footer>\n    </Modal>)\n}","import React, { FC, useState, useEffect, CSSProperties } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { Boost } from \"../client\";\nimport { relative } from \"path\";\nimport { BoostLevelPopup } from \"./BoostLevelPopup\";\n\ninterface Props {\n    boost: Boost;\n    onUpdateActive: (active: boolean) => void;\n    onUpdateBoostLevel: (level: number) => void;\n}\n\nconst COOLDOWN_MILLISECONDS = 1000 * 60 * 10; // 10 minutes\nconst boostLevelToLabel: { [key: number]: string } = {\n    1: \"QUICK\",\n    2: \"FAST\",\n    4: \"PRO\",\n    8: \"SUPER\",\n};\n\nexport const BoostWidget: FC<Props> = ({\n    boost,\n    onUpdateActive,\n    onUpdateBoostLevel,\n}) => {\n    const [remainingTime, setRemainingTime] = useState<string>(\"00:00:00\");\n    const [hidden, setHidden] = useState<boolean>(false);\n    const [cooldown, setCooldown] = useState(false);\n    const [updatingBoostLevel, setUpdatingBoostLevel] = useState(false);\n\n    const style: CSSProperties = {\n        // width: \"100%\",\n        height: \"50px\",\n        // background:\n        //     \"linear-gradient(-45deg, #3D3BB5, #8B41D6, #26D6E1)\",\n        backgroundColor: \"#3D3BB5\",\n        backgroundSize: \"400% 400%\",\n        borderRadius: \"8px\",\n        textAlign: \"left\",\n        paddingTop: \"8px\",\n        paddingLeft: \"16px\",\n        paddingRight: \"16px\",\n        fontSize: \"24px\",\n        fontWeight: \"bolder\",\n        // italic\n        // fontStyle: \"italic\",\n        // animationName: \"boost\",\n        // animationDuration: \"5s\",\n        // animationIterationCount: \"infinite\",\n    };\n    if (boost.is_active) {\n        style.backgroundColor = undefined;\n        style.backgroundImage =\n            \"linear-gradient(-45deg, #3D3BB5, #8B41D6, #26D6E1)\";\n        style.animationName = \"boost\";\n        style.animationDuration = \"5s\";\n        style.animationIterationCount = \"infinite\";\n    }\n\n    useEffect(() => {\n        const updateRemainingTime = () => {\n            // boost.balance is specified in milliseconds\n            // use the moment library to show remaining time in the form of\n            // \"HH:MM:SS\"\n            let remainingMilliseconds = boost.balance / boost.level;\n\n            if (boost.is_active) {\n                remainingMilliseconds -= moment()\n                    .diff(moment(boost.activated_at))\n                    .valueOf();\n                if (remainingMilliseconds <= 0) {\n                    remainingMilliseconds = 0;\n                }\n                setHidden(remainingMilliseconds === 0);\n                setCooldown(false);\n            } else {\n                const millisecondsSinceLastActivated =\n                    moment().valueOf() - boost.activated_at;\n                if (millisecondsSinceLastActivated < COOLDOWN_MILLISECONDS) {\n                    setCooldown(true);\n                    remainingMilliseconds =\n                        COOLDOWN_MILLISECONDS - millisecondsSinceLastActivated;\n                } else {\n                    setCooldown(false);\n                }\n                setHidden(boost.balance === 0);\n            }\n\n            let remainingTime = moment\n                .utc(remainingMilliseconds)\n                .format(\"HH:mm:ss\");\n            setRemainingTime(remainingTime);\n        };\n        updateRemainingTime();\n        const interval = setInterval(updateRemainingTime, 1000);\n        return () => clearInterval(interval);\n    }, [boost]);\n\n    if (hidden) {\n        return <div></div>;\n    }\n\n    return (\n        <div className=\"boost-widget\" style={style}>\n            <span\n                style={{\n                    cursor: \"pointer\",\n                    fontStyle: boost.is_active ? \"italic\" : \"normal\",\n                }}\n                onClick={() => setUpdatingBoostLevel(true)}\n            >\n                {boostLevelToLabel[boost.level]}\n            </span>\n\n            <div\n                style={{\n                    float: \"right\",\n                }}\n            >\n                {!boost.is_active && (\n                    <i\n                        className=\"fas fa-play\"\n                        onClick={() => onUpdateActive(true)}\n                        style={{ cursor: \"pointer\" }}\n                    />\n                )}\n                {boost.is_active && (\n                    <i\n                        className=\"fas fa-pause\"\n                        onClick={() => onUpdateActive(false)}\n                        style={{ cursor: \"pointer\" }}\n                    />\n                )}\n            </div>\n            <span\n                style={{\n                    fontStyle: \"normal\",\n                    fontSize: \"16px\",\n                    float: \"right\",\n                    paddingTop: \"6px\",\n                    marginRight: \"8px\",\n                }}\n            >\n                {remainingTime}&nbsp;\n            </span>\n            {cooldown && (\n                <span\n                    style={{\n                        fontStyle: \"normal\",\n                        fontSize: \"12px\",\n                        float: \"right\",\n                        paddingTop: \"8px\",\n                        marginRight: \"8px\",\n                        color: \"#26D6E1\",\n                        animation: \"cooldown 5s ease infinite\",\n                    }}\n                >\n                    COOLDOWN&nbsp;\n                </span>\n            )}\n            {updatingBoostLevel && (\n                <BoostLevelPopup\n                    onCancel={() => setUpdatingBoostLevel(false)}\n                    onUpdateBoostLevel={(level: number) => {\n                        setUpdatingBoostLevel(false);\n                        onUpdateBoostLevel(level);\n                    }}\n                    selectedBoostLevel={boost.level}\n                />\n            )}\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, ImageStatusEnum } from \"../client/api\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: Image;\n    onClose: () => void;\n    onDelete?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n    onEdit?: (image: Image) => void;\n    onUpscale?: (image: Image) => void;\n    onNSFW?: (image: Image, nsfw: boolean) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onUpscale,\n    onNSFW,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    const src = `${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at}`;\n    let score = image.score;\n    if (\n        image.negative_phrases.join(\"\").trim() !== \"\" &&\n        image.negative_score != 0\n    ) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case ImageStatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case ImageStatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case ImageStatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case ImageStatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{\n                            fontSize: \"10px\",\n                            position: \"relative\",\n                            top: \"-1px\",\n                        }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.png\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.phrases[0];\n    }\n\n    const upscaleLevel = getUpscaleLevel(image.width!, image.height!);\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img\n                    ref={img}\n                    style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"1024px\",\n                        display: \"block\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        filter: image.nsfw && !showNSFW ? \"blur(30px)\" : \"\",\n                    }}\n                    id={`image-popup-${image.id}`}\n                    src={src}\n                    alt={image.label}\n                />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === ImageStatusEnum.Saved ||\n                                        image.status ===\n                                            ImageStatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button edit-button\"\n                                        onClick={() => onEdit && onEdit(image)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onUpscale && upscaleLevel < 2 && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() =>\n                                            onUpscale && onUpscale(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-search-plus\"></i>\n                                        &nbsp;UPSCALE\n                                    </button>\n                                )}\n                                {image.nsfw && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}\n                                %\n                            </div>\n                            <div>\n                                Image dimensions: {image.width} x {image.height}\n                            </div>\n                            {image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* alert warning icon */}\n                                        <i\n                                            className=\"fas fa-exclamation-triangle\"\n                                            style={{\n                                                color: \"orange\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;May contain NSFW content\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, false)\n                                            }\n                                        >\n                                            Mark as Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                            {!image.nsfw && (\n                                <>\n                                    <div>\n                                        {/* green check icon */}\n                                        <i\n                                            className=\"fas fa-check\"\n                                            style={{\n                                                color: \"green\",\n                                                fontSize: \"18px\",\n                                                position: \"relative\",\n                                                top: \"2px\",\n                                            }}\n                                        ></i>\n                                        &nbsp;Safe for Work\n                                    </div>\n                                    {onNSFW && (\n                                        <a\n                                            href=\"javascript:void(0)\"\n                                            onClick={() =>\n                                                onNSFW(image, true)\n                                            }\n                                        >\n                                            Mark as Not Safe for Work\n                                        </a>\n                                    )}\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, ImageStatusEnum } from \"../client/api\";\n\ninterface Props {\n    pendingCount: number;\n    processingCount: number;\n    onClick?: () => void;\n}\n\nexport const PendingImagesThumbnail: FC<Props> = ({\n    pendingCount,\n    processingCount,\n    onClick,\n}) => {\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    let icon = (\n        <i style={{ marginTop: \"20px\" }} className=\"fa fa-hourglass-half\"></i>\n    );\n\n    if (processingCount > 0) {\n        icon = (\n            <i style={{ marginTop: \"20px\" }} className=\"fa fa-cog fa-spin\"></i>\n        );\n    }\n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(/images/default.png)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n            }}\n            onClick={onClick}\n        >\n            {hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.5)\",\n                        color: \"black\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        lineHeight: \"1\",\n                        fontSize: \"20px\",\n                    }}\n                >\n                    <br/>\n                    {pendingCount > 0 && (\n                        <div style={{ marginBottom: \"24px\" }}>\n                            {pendingCount} pending\n                        </div>\n                    )}\n                    {processingCount > 0 && (\n                        <div>{processingCount} processing</div>\n                    )}\n                </div>\n            )}\n            {!hover && (\n                <div\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.3)\",\n                        color: \"#555\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        fontSize: \"80px\",\n                    }}\n                >\n                    {icon}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, {FC, useEffect, useState} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface Props {\n    images: Image[];\n    onDeleteImage: (image: Image) => void;\n    onCancel: () => void;\n    show: boolean;\n}\n\nexport const PendingImages: FC<Props> = ({\n    images,\n    onDeleteImage,\n    onCancel,\n    show,\n}) => {\n\n    function imageIcon(image: Image) {\n        if (image.status === \"pending\") {\n            return <i className=\"fa fa-hourglass-half\"></i>;\n        } else if (image.status === \"processing\") {\n            return <i className=\"fa fa-cog fa-spin\"></i>;\n        }\n    }\n\n    const truncate = (phrases: string) => {\n        if (phrases.length > 35) {\n            return phrases.substring(0, 35) + \"...\";\n        }\n        return phrases;\n    }\n\n    // refactor from table to div layout\n    const pendingDiv = (\n        <div>\n            <div style={{marginBottom: \"8px\"}}>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Status\n                </div>\n                <div style={{display: \"inline-block\", width: \"250px\"}}>\n                    Phrases\n                </div>\n                <div style={{display: \"inline-block\", width: \"100px\"}}>\n                    Action\n                </div>\n            </div>\n            {images.map((image) => (\n                <div key={image.id} style={{marginBottom: \"8px\"}}>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        {imageIcon(image)}&nbsp;{image.status}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"250px\"}}>\n                        {/* if more than 30 chars, truncate with ellipsis*/}\n                        {truncate(image.phrases.join(\", \"))}\n                    </div>\n                    <div style={{display: \"inline-block\", width: \"100px\"}}>\n                        <button\n                            className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                            onClick={() => onDeleteImage(image)}\n                        >\n                            <i className=\"fa fa-trash\"></i>&nbsp;Delete\n                        </button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Pending Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pendingDiv}\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onCancel}>\n                    Close\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, ImageStatusEnum, Boost } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\nimport { BoostWidget } from \"../components/BoostWidget\";\nimport { createEncodedThumbnail, encodedImageToBlob, uploadBlob } from \"../lib/imageutil\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { BusyModal } from \"../components/BusyModal\";\nimport { PendingImagesThumbnail } from \"../components/PendingImagesThumbnail\";\nimport { PendingImages } from \"../components/PendingImages\";\nimport {\n    ApiSocket,\n    NOTIFICATION_BOOST_UPDATED,\n    NOTIFICATION_IMAGE_DELETED,\n    NOTIFICATION_IMAGE_UPDATED,\n} from \"../lib/apisocket\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiSocket: ApiSocket;\n    assetsUrl: string;\n}\n\nexport const Homepage: FC<Props> = ({ api, apiSocket, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [showPendingImages, setShowPendingImages] = useState(false);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const [search, setSearch] = useState<string>(\"\");\n    const [searchDebounce, setSearchDebounce] = useState<string>(\"\");\n\n    const [bulkDeleteSelecting, setBulkDeleteSelecting] = useState(false);\n    const [bulkDeleting, setBulkDeleting] = useState(false);\n    const [bulkDeleteIds, setBulkDeleteIds] = useState<{\n        [key: string]: boolean;\n    }>({});\n\n    const [boost, setBoost] = useState<Boost | null>(null);\n\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        let handle = setTimeout(() => {\n            setSearch(searchDebounce);\n        }, 500);\n        return () => {\n            clearTimeout(handle);\n        };\n    }, [searchDebounce]);\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            await api.createImage(input);\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const encodedImage = input.encoded_image!;\n            const encodedThumbnail = await createEncodedThumbnail(encodedImage);\n            const newImages = await api.createImage({\n                ...input,\n                encoded_image: undefined,\n            });\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                const uploadUrls = await api.getImageUploadUrls(image.id);\n                // convert base64 encoded image to binary to upload as image/png with axios\n                const blob = encodedImageToBlob(encodedImage);\n                const thumbnailBlob = encodedImageToBlob(encodedThumbnail);\n                const imagePromise = uploadBlob(uploadUrls.data.image_url!, blob);\n                const thumbnailPromise = uploadBlob(uploadUrls.data.thumbnail_url!, thumbnailBlob);\n                await Promise.all([imagePromise, thumbnailPromise]);\n\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data);\n        });\n    };\n\n    const onUpscale = async (image: Image) => {\n        setCreating(true);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const imageInput = defaultArgs();\n            imageInput.parent = image.id;\n            imageInput.label = image.label;\n            imageInput.phrases = image.phrases;\n            imageInput.negative_phrases = image.negative_phrases;\n            imageInput.width = image.width! * 2;\n            imageInput.height = image.height! * 2;\n            imageInput.model = \"swinir\";\n            imageInput.count = 1;\n\n            const newImages = await api.createImage(imageInput);\n            setImages((images) => {\n                // there is a race condition where poll images can fire before this callback\n                // so double-check to avoid duplicates\n                const imagesToAdd = (newImages.data.images || []).filter(\n                    (image) => {\n                        return !images.find((i) => i.id === image.id);\n                    }\n                );\n                return [...imagesToAdd, ...images].sort(sortImages);\n            });\n            history.push(\"/\");\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            console.log(\"Initial load images\");\n            // clear error\n            setErr(null);\n            setHasMore(true);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                const resp = await api.listImages(cursor, search, 100, \"desc\");\n                if (resp.data.images) {\n                    console.log(\"Initial load images\", resp.data.images.length);\n                    setImages(\n                        resp.data.images\n                            .filter((image) => !image.deleted_at)\n                            .sort(sortImages)\n                    );\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api, search]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const resp = await api.listImages(\n                    cursor + 1,\n                    search,\n                    100,\n                    \"asc\"\n                );\n                if (resp.data.images) {\n                    let latestCursor = cursor;\n                    for (let image of resp.data.images) {\n                        if (image.updated_at > latestCursor) {\n                            latestCursor = image.updated_at;\n                        }\n                    }\n\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) => {\n                        const deletedIds: { [key: string]: boolean } = {};\n                        for (let image of newImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        for (let image of updatedImages) {\n                            if (image.deleted_at) {\n                                deletedIds[image.id] = true;\n                                console.log(\n                                    `Deleting image ${image.id} from list`\n                                );\n                            }\n                        }\n                        images = images.filter(\n                            (image) => !deletedIds[image.id]\n                        );\n                        return [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages.filter((image) => !image.deleted_at),\n                        ].sort(sortImages);\n                    });\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        // polling is now a fallback for when the websocket connection fails\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 60 * 1000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images, search]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    useEffect(() => {\n        apiSocket.onMessage(async (message) => {\n            const payload = JSON.parse(message);\n            if (\n                payload.type === NOTIFICATION_IMAGE_UPDATED ||\n                payload.type === NOTIFICATION_IMAGE_DELETED\n            ) {\n                const updatedImage = await api.getImage(payload.id);\n                if (updatedImage.data.temporary) {\n                    return;\n                }\n                setImages((images) => {\n                    const index = images.findIndex(\n                        (image) => image.id === updatedImage.data.id\n                    );\n                    let updatedImages = images;\n                    if (index >= 0) {\n                        updatedImages = images.map((image) => {\n                            if (image.id === updatedImage.data.id) {\n                                return updatedImage.data;\n                            }\n                            return image;\n                        });\n                    } else {\n                        updatedImages = [...images, updatedImage.data];\n                    }\n                    return updatedImages.sort(sortImages);\n                });\n            } else if (payload.type === NOTIFICATION_BOOST_UPDATED) {\n                const updatedBoost = await api.getBoost();\n                setBoost(updatedBoost.data);\n            }\n        });\n        return () => {\n            apiSocket.onMessage(undefined);\n        };\n    }, [apiSocket]);\n\n    useEffect(() => {\n        const refreshBoost = async () => {\n            const updatedBoost = await api.getBoost();\n            setBoost(updatedBoost.data);\n        };\n        refreshBoost();\n        const interval = setInterval(refreshBoost, 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [api]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === ImageStatusEnum.Pending ||\n            image.status === ImageStatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.phrases.join(\"|\") == b.phrases.join(\"|\") &&\n            a.status !== ImageStatusEnum.Pending &&\n            b.status !== ImageStatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.phrases.join(\"\").trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.phrases.join(\"\").trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const resp = await api.listImages(\n            minUpdatedAt - 1,\n            search,\n            100,\n            \"desc\"\n        );\n        if (resp.data.images && resp.data.images.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...(resp.data.images || [])]\n                    .filter((image) => !image.deleted_at)\n                    .sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\");\n        window.scrollTo(0, 0);\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        if (bulkDeleteSelecting) {\n            setBulkDeleteIds({\n                ...bulkDeleteIds,\n                [image.id]: !bulkDeleteIds[image.id],\n            });\n        } else {\n            history.push(`/images/${image.id}`);\n        }\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    const onConfirmBulkDelete = async () => {\n        try {\n            setBulkDeleting(true);\n            // await api.deleteImages(Object.keys(bulkDeleteIds));\n            const promises = Object.keys(bulkDeleteIds).map((id) => {\n                return api.deleteImage(id);\n            });\n            await Promise.all(promises);\n            setImages((images) => {\n                return images.filter((image) => !bulkDeleteIds[image.id]);\n            });\n            setBulkDeleteIds({});\n            setBulkDeleteSelecting(false);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting images\");\n        } finally {\n            setBulkDeleting(false);\n        }\n    };\n\n    const completedOrSavedImages = images.filter((image) => {\n        return (\n            !image.deleted_at &&\n            (image.status === ImageStatusEnum.Completed ||\n                image.status === ImageStatusEnum.Saved)\n        );\n    });\n\n    const pendingOrProcessingImages = images.filter(\n        (image) =>\n            !image.deleted_at &&\n            (image.status === ImageStatusEnum.Pending ||\n                image.status === ImageStatusEnum.Processing)\n    );\n\n    const pendingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === ImageStatusEnum.Pending\n    );\n\n    const processingImages = pendingOrProcessingImages.filter(\n        (image) => image.status === ImageStatusEnum.Processing\n    );\n\n    const onUpdateBoostActive = async (active: boolean) => {\n        if (!boost) return;\n        const resp = await api.updateBoost({\n            is_active: active,\n            level: boost.level,\n        });\n        if (resp.data.error) {\n            alert(resp.data.error);\n        } else {\n            setBoost((await api.getBoost()).data);\n        }\n    };\n\n    const onUpdateBoostLevel = async (level: number) => {\n        if (!boost) return;\n        const resp = await api.updateBoost({\n            is_active: boost.is_active,\n            level: level,\n        });\n        if (resp.data.error) {\n            alert(resp.data.error);\n        } else {\n            setBoost((await api.getBoost()).data);\n        }\n    };\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush\n            </h1>\n\n            <ImagePrompt\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            {boost && (\n                <BoostWidget\n                    boost={boost}\n                    onUpdateActive={onUpdateBoostActive}\n                    onUpdateBoostLevel={onUpdateBoostLevel}\n                />\n            )}\n            <hr />\n\n            <div\n                className=\"homepage-images\"\n                style={{ marginTop: \"48px\", paddingBottom: \"48px\" }}\n            >\n                <div style={{ textAlign: \"left\" }}>\n                    <div\n                        className=\"input-group\"\n                        style={{ marginBottom: \"16px\" }}\n                    >\n                        <input\n                            style={{}}\n                            value={searchDebounce}\n                            type=\"search\"\n                            className=\"form-control image-search\"\n                            placeholder=\"Search...\"\n                            onChange={(e) => setSearchDebounce(e.target.value)}\n                        />\n\n                        <div\n                            style={{\n                                float: \"right\",\n                            }}\n                        >\n                            {!bulkDeleteSelecting && (\n                                <Dropdown>\n                                    <Dropdown.Toggle variant=\"danger\">\n                                        <i className=\"fas fa-trash\"></i>\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item\n                                            onClick={() =>\n                                                setBulkDeleteSelecting(true)\n                                            }\n                                        >\n                                            Bulk Delete\n                                        </Dropdown.Item>\n                                        <Dropdown.Item\n                                            onClick={() =>\n                                                history.push(\"/deleted-images\")\n                                            }\n                                        >\n                                            View Deleted Images\n                                        </Dropdown.Item>\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            )}\n                            {bulkDeleteSelecting && (\n                                <>\n                                    <button\n                                        className=\"btn btn-primary image-popup-button\"\n                                        onClick={() => {\n                                            setBulkDeleteSelecting(false);\n                                            setBulkDeleteIds({});\n                                        }}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        style={{ marginLeft: \"8px\" }}\n                                        className=\"btn image-popup-delete-button\"\n                                        onClick={() => {\n                                            onConfirmBulkDelete();\n                                        }}\n                                    >\n                                        Delete\n                                    </button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={\n                        <>\n                            <hr />\n                            <h4>Loading...</h4>\n                        </>\n                    }\n                >\n                    {pendingOrProcessingImages.length > 0 && (\n                        <PendingImagesThumbnail\n                            pendingCount={pendingImages.length}\n                            processingCount={processingImages.length}\n                            onClick={() => {\n                                setShowPendingImages(true);\n                            }}\n                        />\n                    )}\n                    {completedOrSavedImages.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                            bulkDelete={\n                                bulkDeleteSelecting && bulkDeleteIds[image.id]\n                            }\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onUpscale={(image) => {\n                        onUpscale(image);\n                    }}\n                    onNSFW={onNSFW}\n                />\n            )}\n            <ScrollToTop />\n            <BusyModal show={creating} title=\"Creating images\">\n                <p>Please wait while we create your image.</p>\n            </BusyModal>\n            <BusyModal show={bulkDeleting} title=\"Deleting images\">\n                <p>Please wait while we delete your images.</p>\n            </BusyModal>\n            <PendingImages\n                images={pendingOrProcessingImages}\n                onCancel={() => setShowPendingImages(false)}\n                show={showPendingImages}\n                onDeleteImage={(image) => {\n                    onDelete(image);\n                    setImages(images.filter((i) => i.id !== image.id));\n                }}\n            />\n        </>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, LoginResult } from \"../client\";\n\ninterface LoginProps {\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const DiscordLogin: React.FC<LoginProps> = ({client, onLogin}) => {\n    const history = useHistory();\n    const code = new URLSearchParams(window.location.search).get(\"code\");\n    \n    useEffect(() => {\n        if (code) {\n            console.log(\"logging in with code\", code);\n            client.discordLogin({code}).then((result) => {\n                console.log(\"login result\", result);\n                if (result.data.accessToken) {\n                    onLogin(result.data);\n                }\n                \n                history.push(\"/\");\n            });\n        } else {\n            history.push(\"/\");\n        }\n    }, [])\n\n    return null;\n}","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { WorkerConfigPage } from \"./pages/WorkerConfig\";\nimport { Admin } from \"./pages/admin/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\nimport { DeletedImages } from \"./pages/DeletedImages\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\nimport { ApiSocket } from \"./lib/apisocket\";\nimport { DiscordLogin } from \"./pages/DiscordLogin\";\n\nconst config = getConfig();\nconst httpClient = axios.default;\nconst client = new AIBrushApi(\n    undefined,\n    localStorage.getItem(\"apiUrl\") || config.apiUrl,\n    httpClient\n);\nconst apiSocket: ApiSocket = new ApiSocket();\n\nfunction updateHttpClient(loginResult: LoginResult) {\n    if (loginResult.accessToken) {\n        httpClient.defaults.headers.common[\n            \"Authorization\"\n        ] = `Bearer ${loginResult.accessToken}`;\n    }\n}\n\nfunction App() {\n    const [credentials, setCredentials] = useState<LoginResult | null>(null);\n    const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [features, setFeatures] = useState<FeatureList | null>(null);\n\n    const onLogout = () => {\n        setCredentials(null);\n        localStorage.removeItem(\"credentials\");\n        httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n    };\n\n    const init = async () => {\n        console.log(\"App.init\");\n        client\n            .getAssetsUrl()\n            .then((result) => setAssetsUrl(result.data.assets_url));\n        client.getFeatures().then((result) => setFeatures(result.data));\n        const storedCredentials = localStorage.getItem(\"credentials\");\n        if (storedCredentials) {\n            // attempt to refresh token\n            try {\n                const credentials = JSON.parse(\n                    storedCredentials\n                ) as LoginResult;\n                const result = await client.refresh({\n                    refreshToken: credentials.refreshToken,\n                });\n                setCredentials(result.data);\n\n                // save to storage\n                localStorage.setItem(\n                    \"credentials\",\n                    JSON.stringify(result.data)\n                );\n                updateHttpClient(result.data);\n                const isAdmin = await client.isAdmin();\n                setIsAdmin(!!isAdmin.data.is_admin);\n                apiSocket.updateToken(result.data.accessToken!);\n                apiSocket.connect();\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    };\n\n    const onLogin = async (credentials: LoginResult) => {\n        localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n        setCredentials(credentials);\n        updateHttpClient(credentials);\n        apiSocket.updateToken(credentials.accessToken!);\n        apiSocket.connect();\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <TokenRefresher\n                api={client}\n                credentials={credentials as LoginResult}\n                onCredentialsRefreshed={onLogin}\n            />\n            <Healthchecker api={client} />\n\n            <BrowserRouter>\n                {/* if credentials are not set, show Login component */}\n                {!credentials && (\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                        <Route path=\"/discord-login\">\n                            <DiscordLogin client={client} onLogin={onLogin} />\n                        </Route>\n                        {/* fallback route is login page */}\n                        <Route path=\"*\">\n                            <Login client={client} onLogin={onLogin} />\n                        </Route>\n                    </Switch>\n                )}\n                {credentials && (\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n                                {credentials && (\n                                    <>\n                                        <button\n                                            className=\"btn btn-primary top-button\"\n                                            onClick={() => onLogout()}\n                                        >\n                                            {/* font awesome logout icon */}\n                                            <i className=\"fas fa-sign-out-alt\"></i>\n                                        </button>\n                                        {/* home button */}\n                                        <Link\n                                            className=\"btn btn-primary top-button\"\n                                            to=\"/\"\n                                        >\n                                            {/* font awesome home icon */}\n                                            <i className=\"fas fa-home\"></i>\n                                        </Link>\n                                        {/* Link to discord */}\n                                        <a\n                                            className=\"btn btn-primary top-button\"\n                                            href=\"https://discord.gg/VPYyAJBkhC\"\n                                            target=\"_blank\"\n                                        >\n                                            {/* font awesome discord icon */}\n                                            <i className=\"fab fa-discord\"></i>\n                                        </a>\n                                        <Link\n                                            className=\"btn top-button pulse\"\n                                            to=\"/\"\n                                            style={{\n                                                width: \"47px\"\n                                            }}\n                                            onClick={\n                                                () => alert(\"Coming soon!\")\n                                            }\n                                        >\n                                            {/* font awesome bolt icon */}\n                                            <i className=\"fas fa-bolt\"></i>\n                                        </Link>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n\n                        {/* if credentials are set, show the rest of the app */}\n\n                        <Switch>\n                            <Route path=\"/\" exact={true}>\n                                {/* <MainMenu isAdmin={isAdmin} /> */}\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/images/:id\">\n                                <Homepage\n                                    api={client}\n                                    apiSocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/image-editor/:id\">\n                                <ImageEditor\n                                    api={client}\n                                    apisocket={apiSocket}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            <Route path=\"/worker-config\">\n                                <WorkerConfigPage api={client} />\n                            </Route>\n                            <Route path=\"/deleted-images\">\n                                <DeletedImages\n                                    api={client}\n                                    assetsUrl={assetsUrl}\n                                />\n                            </Route>\n                            {isAdmin && (\n                                <>\n                                    <Route path=\"/admin\">\n                                        <Admin api={client} />\n                                    </Route>\n                                </>\n                            )}\n                        </Switch>\n                        <div\n                            // style={{ marginTop: \"100px\", padding: \"50px\" }}\n\n                            // use position:fixed to make the footer stick to the bottom of the page\n                            style={{\n                                position: \"fixed\",\n                                bottom: \"0\",\n                                left: \"0\",\n                                width: \"100%\",\n                                height: \"50px\",\n                                paddingTop: \"16px\",\n                                backgroundColor: \"#000000\",\n                            }}\n                        >\n                                {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n                                {features && features.privacy_uri && (\n                                    <a\n                                        href={features.privacy_uri}\n                                        target=\"_blank\"\n                                    >\n                                        Privacy Policy\n                                    </a>\n                                )}\n                                {features && features.terms_uri && (\n                                    <a\n                                        href={features.terms_uri}\n                                        target=\"_blank\"\n                                        style={{ marginLeft: \"20px\" }}\n                                    >\n                                        Terms of Service\n                                    </a>\n                                )}\n                                {/* link to mail to admin@aibrush.art */}\n                                <a\n                                    href=\"mailto:admin@aibrush.art\"\n                                    style={{ marginLeft: \"20px\" }}\n                                >\n                                    Contact\n                                </a>\n                        </div>\n                    </div>\n                )}\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nexport const NOTIFICATION_IMAGE_UPDATED = \"image_updated\";\nexport const NOTIFICATION_IMAGE_DELETED = \"image_deleted\";\nexport const NOTIFICATION_PENDING_IMAGE = \"pending_image\";\nexport const NOTIFICATION_BOOST_UPDATED = \"boost_updated\";\n\nexport class ApiSocket {\n    private client?: WebSocket;\n    private accessToken?: string\n    private messageListener?: (message: string) => void;\n\n    updateToken(accessToken: string) {\n        this.accessToken = accessToken;\n    }\n\n    onMessage(listener?: (message: string) => void) {\n        this.messageListener = listener;\n    }\n\n    connect() {\n        if (!this.accessToken) {\n            throw new Error(\"unauthenticated\");\n        }\n        if (this.client) {\n            // will reconnect in one second automatically\n            // this is called every time the auth refreshes\n            this.client.close();\n            return;\n        }\n        let host = window.location.host;\n        let protocol = \"wss\";\n        if (host.includes(\"localhost\")) {\n          host = \"localhost:3000\";\n          protocol = \"ws\";\n        }\n        this.client = new WebSocket(`${protocol}://${host}`);\n        this.client.onerror = err => console.error(err);\n        this.client.onopen = () => {\n            console.log(\"websocket connected\");\n            this.client!.send(this.accessToken!);\n        }\n        this.client.onmessage = evt => {\n            console.log(\"server push\", evt.data);\n            if (this.messageListener) {\n                this.messageListener(evt.data as string);\n            }\n        }\n        this.client.onclose = () => {\n          console.log(\"websocket closed\");\n          this.client = undefined;\n          setTimeout(() => this.connect(), 1000);\n        }\n    }\n}\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, CreateImageInputStatusEnum, Image } from \"../client\";\nimport {\n    aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio, upscale, compareSize, AspectRatio\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\n\ninterface Props {\n    parent: Image | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        phrases: [\"a painting of a happy corgi wearing sunglasses\"],\n        negative_phrases: [],\n        label: \"\",\n        iterations: 50,\n        encoded_image: \"\",\n        encoded_npy: \"\",\n        encoded_mask: \"\",\n        enable_video: false,\n        enable_zoom: false,\n        zoom_frequency: 10,\n        zoom_scale: 0.99,\n        zoom_shift_x: 0,\n        zoom_shift_y: 0,\n        model: \"stable_diffusion_text2im\",\n        glid_3_xl_clip_guidance: false,\n        glid_3_xl_clip_guidance_scale: 150,\n        glid_3_xl_skip_iterations: 0,\n        width: 512,\n        height: 512,\n        stable_diffusion_strength: 0.75,\n        count: 4,\n    };\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\"\");\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n    \n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(aspectRatios[DEFAULT_ASPECT_RATIO]);\n    let [originalWidth, setOriginalWidth] = useState<number>(defaultAspectRatio.width);\n    let [originalHeight, setOriginalHeight] = useState<number>(defaultAspectRatio.height);\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(\"\");\n        setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const args = defaultArgs();\n        args.phrases = [prompt || \"\"];\n        args.negative_phrases = [negativePrompt || \"\"];\n        args.count = count;\n        args.parent = parentId || undefined;\n        args.stable_diffusion_strength = variationStrength;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(parent.width!, parent.height!);\n            args.width = bestMatch.width;\n            args.height = bestMatch.height;\n            args.nsfw = parent.nsfw;\n        } else {\n            const bestMatch = getClosestAspectRatio(aspectRatioDetails.width, aspectRatioDetails.height);\n            args.width = bestMatch.width;\n            args.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\")\n            return;\n        }\n        const args = defaultArgs();\n        args.phrases = [prompt || \"\"];\n        args.negative_phrases = [negativePrompt || \"\"];\n        args.count = 1;\n        args.parent = parentId || undefined;\n        args.stable_diffusion_strength = variationStrength;\n        args.status = CreateImageInputStatusEnum.Completed;\n        args.width = originalWidth;\n        args.height = originalHeight;\n        if (parent) {\n            args.nsfw = parent.nsfw;\n        }\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    }\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n                while (compareSize(upscale(bestMatch), width, height) <= 0) {\n                    bestMatch = upscale(bestMatch);\n                    if (getUpscaleLevel(bestMatch.width, bestMatch.height) >= 2) {\n                        break;\n                    }\n                }\n                console.log(\"best match\", bestMatch);\n\n\n                const canvas = document.createElement(\"canvas\");\n                // canvas.width = bestMatch.width;\n                // canvas.height = bestMatch.height;\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/png\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex(\n                        (a) => a.id === bestMatch.id\n                    )\n                );\n                setAspectRatioDetails(bestMatch);\n                setOriginalWidth(width);\n                setOriginalHeight(height);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            setPrompt(parent.phrases.join(\", \"));\n            setNegativePrompt(parent.negative_phrases.join(\", \"));\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.stable_diffusion_strength);\n            setEncodedImage(\"\");\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {parent && !encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Parent Image</label>\n                                {/* ${assetsUrl}/${image.id}.image.png?updated_at=${image.updated_at} */}\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`${assetsUrl}/${parentId}.image.png?updated_at=${parent.updated_at}`}\n                                />\n                            </div>\n                        )}\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/png;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={aspectRatioId => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace Image\"\n                                        : \"Upload Image\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove Image\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"count\">Count: {count}</label>\n                            {/* range slider from 1 to 20 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"count\"\n                                min=\"1\"\n                                max=\"20\"\n                                value={count}\n                                onChange={(e) =>\n                                    setCount(parseInt(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This is how many images you want to generate\n                            </span>\n                        </div>\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {advancedView && (\n                            <div\n                                className=\"form-group\"\n                                style={{ minHeight: \"20px\" }}\n                            >\n                                <div className=\"float-right\">\n                                    {parent && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleCancel}\n                                        >\n                                            <i className=\"fas fa-times\"></i>\n                                            &nbsp;CANCEL\n                                        </button>\n                                    )}\n                                    <button\n                                        type=\"submit\"\n                                        className=\"btn btn-primary\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        {/* paintbrush button */}\n                                        {!creating && (\n                                            <i className=\"fas fa-paint-brush\"></i>\n                                        )}\n                                        {/* spinner button */}\n                                        {creating && (\n                                            <i className=\"fas fa-spinner fa-spin\"></i>\n                                        )}\n                                        &nbsp;PAINT\n                                    </button>\n                                    {encodedImage && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleEdit}\n                                            style={{ marginLeft: \"8px\" }}\n                                            disabled={!prompt || creating}\n                                        >\n                                            <i className=\"fas fa-edit\"></i>\n                                            &nbsp;EDIT\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </form>\n    );\n};\n","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 0;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    width /= 2;\n    height /= 2;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width * height <= aspectRatio.width * aspectRatio.height) {\n            return 1;\n        }\n        // if (width === aspectRatio.width && height === aspectRatio.height) {\n        //     return upscaleLevel;\n        // }\n    }\n    return 2;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { Cursor, Rect } from \"./models\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { runInThisContext } from \"vm\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private outpaint?: boolean;\n\n    // private selectionWidth: number = 512;\n    // private selectionHeight: number = 512;\n\n    private panning = false;\n\n    // TODO: size modifier to make the selection overlay smaller\n\n    constructor(renderer: Renderer) {\n        super(renderer, \"select\");\n    }\n\n    updateArgs(args: any) {\n        args = {\n            ...this.getArgs(),\n            ...args,\n        }\n        super.updateArgs(args);\n        this.selectionOverlay = args.selectionOverlay || {\n            x: 0,\n            y: 0,\n            width: 512,\n            height: 512,\n        };\n        this.outpaint = args.outpaint;\n        if (!this.outpaint) {\n            this.selectionOverlay = this.clamp(this.selectionOverlay!);\n        }\n        this.sync();\n    }\n\n    private clamp(rect: Rect): Rect {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        let x = rect.x;\n        let y = rect.y;\n        let width = rect.width;\n        let height = rect.height;\n        // clamp to the canvas\n        x = Math.max(0, Math.min(x, imageWidth - this.selectionOverlay!.width));\n        y = Math.max(0, Math.min(y, imageHeight - rect.height));\n        x = Math.min(x, imageWidth - rect.width);\n        y = Math.min(y, imageHeight - rect.height);\n        width = Math.min(width, imageWidth);\n        height = Math.min(height, imageHeight);\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n        };\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.type == \"touch\") {\n            this.onMouseMove(event);\n        } else if (event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n\n            // round to the nearest 16 pixels\n            x = Math.round(x / 16) * 16;\n            y = Math.round(y / 16) * 16;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionOverlay!.width,\n                height: this.selectionOverlay!.height,\n            };\n\n            if (!this.outpaint) {\n                // // clamp to the canvas\n                // x = Math.max(\n                //     0,\n                //     Math.min(x, imageWidth - this.selectionOverlay!.width)\n                // );\n                // y = Math.max(\n                //     0,\n                //     Math.min(y, imageHeight - this.selectionOverlay!.height)\n                // );\n                // x = Math.min(x, imageWidth - this.selectionOverlay!.width);\n                // y = Math.min(y, imageHeight - this.selectionOverlay!.height);\n                this.selectionOverlayPreview = this.clamp(this.selectionOverlayPreview);\n            }\n\n            \n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0 && event.type == \"touch\") {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n            this.updateArgs({\n                selectionOverlay: this.selectionOverlay,\n            });\n        }\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n    /** Lock aspect ratio for smaller images */\n    lockAspectRatio?: boolean;\n    outpaint?: boolean;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n    renderer,\n    tool,\n    lockAspectRatio,\n    outpaint,\n}) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    const [size, setSize] = useState(1);\n\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0 && lockAspectRatio) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionOverlay: {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatio.width,\n                    height: aspectRatio.height,\n                },\n                outpaint,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionOverlay) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionOverlay.width,\n                    args.selectionOverlay.height\n                );\n                setAspectRatio(aspectRatio.id);\n                setSize(args.selectionOverlay.width / aspectRatio.width);\n                tool.updateArgs(args);\n            } else {\n                // set default args\n                args.selectionOverlay = {\n                    x: 0,\n                    y: 0,\n                    width: aspectRatios[aspectRatio].width,\n                    height: aspectRatios[aspectRatio].height,\n                };\n                args.outpaint = outpaint;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n\n    function onChange(aspectRatioId: number, size: number) {\n        const args = tool.getArgs();\n        const aspectRatio = aspectRatios[aspectRatioId];\n        if (args.selectionOverlay) {\n            const xDiff =\n                args.selectionOverlay.width - aspectRatio.width * size;\n            const yDiff =\n                args.selectionOverlay.height - aspectRatio.height * size;\n            args.selectionOverlay.width = Math.round(aspectRatio.width * size);\n            args.selectionOverlay.height = Math.round(\n                aspectRatio.height * size\n            );\n            args.selectionOverlay.x += xDiff / 2;\n            args.selectionOverlay.y += yDiff / 2;\n            if (!outpaint) {\n                // clamp to canvas\n                args.selectionOverlay.x = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.x,\n                            renderer.getWidth() - args.selectionOverlay.width\n                        )\n                    )\n                );\n                args.selectionOverlay.y = Math.round(\n                    Math.max(\n                        0,\n                        Math.min(\n                            args.selectionOverlay.y,\n                            renderer.getHeight() - args.selectionOverlay.height\n                        )\n                    )\n                );\n            }\n        }\n        tool.updateArgs({\n            selectionOverlay: args.selectionOverlay,\n        });\n    }\n\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        onChange(aspectRatioId, size);\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n            <div className=\"form-group\">\n                <label htmlFor=\"size\" style={{ width: \"100%\" }}>\n                    Size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(size * 100)}%\n                    </small>\n                </label>\n                {/* range from 0.1 to 1 */}\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"size\"\n                    min=\"0.5\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={size}\n                    onChange={(event) => {\n                        onChange(aspectRatio, parseFloat(event.target.value));\n                        setSize(parseFloat(event.target.value));\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { propTypes } from \"react-bootstrap/esm/Image\";\n\ninterface Props {\n    show: boolean;\n    title?: string;\n}\n\n// Show modal with child contents\nexport const BusyModal: FC<Props> = ({ show, title, children }) => {\n    return (\n        <Modal show={show} backdrop=\"static\" keyboard={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title || \"Processing\"}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"spinner-border\" role=\"status\">\n                        <span className=\"sr-only\">{children || \"Please Wait...\"}</span>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n}","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label style={{width: \"100%\"}}>\n                Aspect Ratio\n                <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                    {aspectRatioDetails.displayName}\n                </small>\n            </label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n"],"sourceRoot":""}
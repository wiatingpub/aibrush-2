{"version":3,"sources":["client/api.ts","client/base.ts","client/common.ts","pages/Login.tsx","pages/MainMenu.tsx","components/ImageThumbnail.tsx","components/ImagePopup.tsx","components/LoadMoreImages.tsx","pages/Images.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","lib/sleep.ts","components/SuggestionSeedTile.tsx","components/ImageSearchPopup.tsx","components/SuggestionSeedModal.tsx","components/SuggestionJobPopup.tsx","components/ViewSuggestionSeedModal.tsx","pages/Suggestions.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","lib/iconhelper.ts","lib/designer.ts","components/ImageEditor.tsx","pages/CreateImage.tsx","pages/InteractiveDesigner.tsx"],"names":["HealthcheckStatusEnum","ImageStatusEnum","SuggestionsJobStatusEnum","UpdateImageInputStatusEnum","UpdateSuggestionsJobInputStatusEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","name","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","createImage","createImageInput","a","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","data","createSuggestionSeed","suggestionSeedInput","createSuggestionsJob","createSuggestionsJobInput","deleteImage","id","localVarPath","encodeURIComponent","String","deleteSuggestionSeed","deleteSuggestionsJob","getAssetsUrl","getImage","download","getImageData","getSuggestionSeed","getSuggestionsJob","getThumbnailData","getVideoData","healthcheck","listImages","cursor","limit","direction","listSuggestionSeeds","listSuggestionsJobs","login","loginInput","processImage","processImageInput","processSuggestionsJob","refresh","refreshLoginInput","updateImage","updateImageInput","updateSuggestionSeed","updateSuggestionsJob","updateSuggestionsJobInput","updateVideoData","body","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","then","Login","props","useState","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","err","setErr","onLogin","match","client","onVerify","result","console","error","className","htmlFor","type","placeholder","onChange","e","target","onClick","preventDefault","aria-describedby","MainMenu","to","ImageThumbnail","assetsUrl","image","onDelete","onFork","onDesign","src","updated_at","useEffect","img","document","getElementById","onerror","style","padding","width","margin","alt","label","imageStatusToIconClass","status","role","current_iterations","iterations","marginRight","enable_video","window","open","marginTop","ImagePopup","apiUrl","onClose","useRef","current","Modal","show","onHide","size","Header","closeButton","Title","Body","ref","phrases","join","enable_zoom","zoom_frequency","zoom_scale","zoom_shift_x","zoom_shift_y","LoadMoreImages","onLoadMore","isLoading","disabled","ImagesPage","api","history","useHistory","images","setImages","selectedImage","setSelectedImage","loadingMore","setLoadingMore","onForkImage","push","moment","add","valueOf","resp","loadImages","pollImages","reduce","max","Math","newImages","filter","findIndex","i","updatedImages","map","updatedImage","find","sort","b","timerHandle","setInterval","clearInterval","onDeleteImage","onDesignImage","setDesignerCurrentImageId","minUpdatedAt","forEach","min","TokenRefresher","onCredentialsRefreshed","credentials","interval","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","catch","display","sleep","ms","Promise","resolve","setTimeout","SuggestionSeedTile","suggestionSeed","onView","onGenerate","onEdit","description","ImageSearchPopup","filterOut","onSubmit","setSearch","filteredImages","setFilteredImages","selectedImages","setSelectedImages","includes","searchValue","toLowerCase","dedup","trim","phrase","length","event","checked","onImageSelected","Footer","Object","keys","selected","alert","SuggestionSeedModal","editingSuggestionSeed","onCreate","onUpdate","items","input","setInput","searchingImages","setSearchingImages","required","rows","split","SuggestionJobPopup","suggestionJobId","suggestionSeedId","onSaveSuggestion","onRetry","onGenerateImage","setSuggestionSeed","suggestionJob","setSuggestionJob","savedSuggestions","setSavedSuggestions","handle","loadSuggestionJob","clearTimeout","loadSuggestionSeed","onBackdropClick","index","backgroundColor","borderRadius","saveSuggestion","marginLeft","Completed","ViewSuggestionSeedModal","SuggestionsPage","suggestionSeeds","setSuggestionSeeds","creatingSuggestionSeed","setCreatingSuggestionSeed","setEditingSuggestionSeed","viewingSuggestionSeed","setViewingSuggestionSeed","selectedSuggestionSeedId","setSelectedSuggestionSeedId","runningSuggestionJobId","setRunningSuggestionJobId","seed_id","onCreateSuggestionSeed","onEditSuggestionSeed","onUpdateSuggestionSeed","suggestion","seed","onRetryGenerateSuggestions","onDeleteSuggestionSeed","confirm","s","localStorage","setItem","onViewSuggestionSeed","loadSuggestionSeeds","config","httpClient","getItem","updateHttpClient","accessToken","defaults","common","App","setCredentials","setAssetsUrl","init","log","assets_url","storedCredentials","parse","prompt","location","reload","path","exact","CreateImage","InteractiveDesigner","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getDesignerCurrentImageId","removeItem","ImageEditor","encodedImage","onSave","onCancel","canvas","setCanvas","ctx","setCtx","brushSize","setBrushSize","brushColor","setBrushColor","isDrawing","setIsDrawing","lastX","setLastX","lastY","setLastY","c","getContext","Image","onload","drawImage","fillStyle","fillRect","height","getMousePos","rect","getBoundingClientRect","scaleX","scaleY","nativeEvent","MouseEvent","evt","x","clientX","left","y","clientY","top","TouchEvent","touches","handleMouseDown","mousePos","drawDot","beginPath","arc","PI","fill","handleMouseMove","stopPropagation","moveTo","lineTo","strokeStyle","lineWidth","lineCap","stroke","handleMouseUp","handleCancel","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","parseFloat","toDataURL","qs","substring","encoded_image","model","editingImage","setEditingImage","count","setCount","file","files","loadImage","HTMLCanvasElement","base64","maxWidth","maxHeight","crop","loadParent","parentId","responseType","binaryImageData","Buffer","from","base64ImageData","parent","parseInt","step","createElement","goBack","imageUri","setImage","currentImageId","setCurrentImageId","onPlay","loadImageData","fetchImage","timer","inprogress","playButton","renderPlayButton"],"mappings":"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","file":"static/js/main.88a07b1a.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_video?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model?: string;\n}\n/**\n * \n * @export\n * @interface CreateSuggestionsJobInput\n */\nexport interface CreateSuggestionsJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateSuggestionsJobInput\n     */\n    seed_id?: string;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    phrases: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    current_iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    status: ImageStatusEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_video: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface ProcessImageInput\n */\nexport interface ProcessImageInput {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ProcessImageInput\n     */\n    zoom_supported: boolean;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface SuggestionSeed\n */\nexport interface SuggestionSeed {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    description: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionSeed\n     */\n    items: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    created_by: string;\n}\n/**\n * \n * @export\n * @interface SuggestionSeedInput\n */\nexport interface SuggestionSeedInput {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeedInput\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeedInput\n     */\n    description?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionSeedInput\n     */\n    items: Array<string>;\n}\n/**\n * \n * @export\n * @interface SuggestionSeedList\n */\nexport interface SuggestionSeedList {\n    /**\n     * \n     * @type {Array<SuggestionSeed>}\n     * @memberof SuggestionSeedList\n     */\n    suggestionSeeds: Array<SuggestionSeed>;\n}\n/**\n * \n * @export\n * @interface SuggestionsJob\n */\nexport interface SuggestionsJob {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SuggestionsJob\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SuggestionsJob\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    seed_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    status: SuggestionsJobStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionsJob\n     */\n    result: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SuggestionsJobStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface SuggestionsJobList\n */\nexport interface SuggestionsJobList {\n    /**\n     * \n     * @type {Array<SuggestionsJob>}\n     * @memberof SuggestionsJobList\n     */\n    suggestionsJobs?: Array<SuggestionsJob>;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    current_iterations?: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    status?: UpdateImageInputStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface UpdateSuggestionsJobInput\n */\nexport interface UpdateSuggestionsJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateSuggestionsJobInput\n     */\n    status?: UpdateSuggestionsJobInputStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateSuggestionsJobInput\n     */\n    result?: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateSuggestionsJobInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionSeed: async (suggestionSeedInput?: SuggestionSeedInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestion-seeds`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(suggestionSeedInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionsJob: async (createSuggestionsJobInput?: CreateSuggestionsJobInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestions-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createSuggestionsJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionSeed: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionsJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, download?: 'thumbnail' | 'image', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (download !== undefined) {\n                localVarQueryParameter['download'] = download;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionSeed: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionsJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getVideoData', 'id', id)\n            const localVarPath = `/api/images/{id}.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, limit?: number, direction?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionSeeds: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestion-seeds`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionsJobs: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestions-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage: async (processImageInput?: ProcessImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-image`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSuggestionsJob: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-suggestion-job`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionSeed: async (id: string, suggestionSeedInput?: SuggestionSeedInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(suggestionSeedInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionsJob: async (id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateSuggestionsJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateVideoData', 'id', id)\n            const localVarPath = `/api/images/{id}.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'video/mp4';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSuggestionSeed(suggestionSeedInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSuggestionsJob(createSuggestionsJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSuggestionSeed(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSuggestionSeed(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSuggestionsJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSuggestionsJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, download?: 'thumbnail' | 'image', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, download, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSuggestionSeed(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuggestionSeed(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSuggestionsJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuggestionsJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getVideoData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, limit, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSuggestionSeeds(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeedList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestionSeeds(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSuggestionsJobs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJobList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestionsJobs(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processImage(processImageInput?: ProcessImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processImage(processImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processSuggestionsJob(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processSuggestionsJob(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSuggestionSeed(id, suggestionSeedInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSuggestionsJob(id, updateSuggestionsJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateVideoData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideoData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.createSuggestionSeed(suggestionSeedInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.createSuggestionsJob(createSuggestionsJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionSeed(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSuggestionSeed(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionsJob(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSuggestionsJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, download?: 'thumbnail' | 'image', options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, download, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionSeed(id: string, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.getSuggestionSeed(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionsJob(id: string, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.getSuggestionsJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getVideoData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, limit, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionSeeds(options?: any): AxiosPromise<SuggestionSeedList> {\n            return localVarFp.listSuggestionSeeds(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionsJobs(options?: any): AxiosPromise<SuggestionsJobList> {\n            return localVarFp.listSuggestionsJobs(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage(processImageInput?: ProcessImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.processImage(processImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSuggestionsJob(options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.processSuggestionsJob(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.updateSuggestionSeed(id, suggestionSeedInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.updateSuggestionsJob(id, updateSuggestionsJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.updateVideoData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new suggestion seed\n     * @param {SuggestionSeedInput} [suggestionSeedInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSuggestionSeed(suggestionSeedInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new suggestions job\n     * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSuggestionsJob(createSuggestionsJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a suggestion seed\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSuggestionSeed(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSuggestionSeed(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a suggestions job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSuggestionsJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSuggestionsJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {'thumbnail' | 'image'} [download] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, download?: 'thumbnail' | 'image', options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, download, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a suggestion seed by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSuggestionSeed(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSuggestionSeed(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a suggestions job by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSuggestionsJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSuggestionsJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary video data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getVideoData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getVideoData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, limit, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of suggestion seeds\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listSuggestionSeeds(options?: any) {\n        return AIBrushApiFp(this.configuration).listSuggestionSeeds(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of suggestions jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listSuggestionsJobs(options?: any) {\n        return AIBrushApiFp(this.configuration).listSuggestionsJobs(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending image and set its status to processing.\n     * @param {ProcessImageInput} [processImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processImage(processImageInput?: ProcessImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).processImage(processImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Process a suggestions job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processSuggestionsJob(options?: any) {\n        return AIBrushApiFp(this.configuration).processSuggestionsJob(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a suggestion seed\n     * @param {string} id \n     * @param {SuggestionSeedInput} [suggestionSeedInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSuggestionSeed(id, suggestionSeedInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a suggestions job\n     * @param {string} id \n     * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSuggestionsJob(id, updateSuggestionsJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the video data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateVideoData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).updateVideoData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://aibrush.ngrok.io\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","// Login react component with hooks\nimport React, { useState, FC } from 'react';\nimport * as axios from \"axios\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\ninterface LoginProps {\n    httpClient: axios.AxiosInstance;\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = props => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n        await props.client.login({\n            email\n        })\n        setEmailSubmitted(true);\n    }\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err)\n            setErr(\"Failed to verify code\");\n        }\n    }\n\n    // bootstrap login form\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">Login</h5>\n                            {/* Display error if one is set */}\n                            {/* Use <p class=\"text-danger\" */}\n                            {err && <p className=\"text-danger\">{err}</p>}\n\n                            {/* If email submitted, show verify code form*/}\n                            {emailSubmitted && <div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"verifyCode\">Verify Code</label>\n                                        <input type=\"text\" className=\"form-control\" id=\"verifyCode\" placeholder=\"Verification Code\" value={code} onChange={(e) => setCode(e.target.value)} />\n                                    </div>\n                                    {/* Cancel verification and go back to email */}\n                                    <button className=\"btn btn-secondary\" onClick={() => setEmailSubmitted(false)}>Cancel</button>&nbsp;\n                                    {/* Verify code */}\n                                    <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}>Verify</button>\n                                </div>\n                            }\n                            {/* Else, show login form */}\n                            {!emailSubmitted && <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n                                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                                </div>\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                    e.preventDefault();\n                                    onLogin();\n                                }}>Login</button>\n                            </div>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}","// MainMenu react component with a list of buttons aligned verically\n// Buttons are \"Create a new image\", \"Upload an image\", and \"My Stuff\"\n// use bootstrap classes\n\nimport React, { FC } from 'react';\nimport { Link } from \"react-router-dom\"\n\nexport const MainMenu: FC = () => {\n    return (\n        <>\n            {/* Header: Welcome to AIBrush! */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Welcome to AIBrush!</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className=\"btn-group-vertical\">\n                        <Link to=\"/create-image\" className=\"btn btn-primary\">\n                            {/* font awesome image icon */}\n                            <i className=\"fas fa-image\" />&nbsp;\n                            Create a new image\n                        </Link>\n                        <Link to=\"/images\" className=\"btn btn-primary\">\n                            {/* my items */}\n                            <i className=\"fas fa-folder-open\" />&nbsp;\n                            My Images\n                        </Link>\n                        <Link to=\"/designer\" className=\"btn btn-primary\">\n                            {/* font awesome pencil icon */}\n                            <i className=\"fas fa-pencil-alt\" />&nbsp;\n                            Interactive Designer\n                        </Link>\n                        {/* /suggestions */}\n                        <Link to=\"/suggestions\" className=\"btn btn-primary\">\n                            {/* font awesome comments icon */}\n                            <i className=\"fas fa-comments\" />&nbsp;\n                            Suggestions\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}","// Image Thumnail Component\nimport React, { FC, useEffect } from \"react\";\nimport { Image, ImageStatusEnum } from \"../client/api\";\nimport { imageStatusToIconClass } from \"../lib/iconhelper\";\n\ninterface ImageThumbnailProps {\n    assetsUrl: string;\n    image: Image;\n    onClick: (image: Image) => void;\n    onDelete?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n    onDesign?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<ImageThumbnailProps> = ({ assetsUrl, image, onClick, onDelete, onFork, onDesign }) => {\n\n    const src = `${assetsUrl}/${image.id}.thumbnail.jpg?updated_at=${image.updated_at}`;\n\n    useEffect(() => {\n        const img = document.getElementById(`image-${image.id}`) as HTMLImageElement;\n        img.onerror = () => {\n            img.src = \"/images/default.jpg\";\n        }\n    })\n\n    return (\n        <div className=\"card\" style={{ padding: \"10px\", width: \"200px\", margin: \"10px\" }}>\n            <img\n                style={{ cursor: \"pointer\" }}\n                id={`image-${image.id}`}\n                className=\"card-img-top\"\n                src={src}\n                alt={image.label} onClick={() => onClick(image)} />\n            <div className=\"card-body\">\n                <div>\n                    <h5 className=\"card-title\">\n                        {image.label}\n                    </h5>\n                    <p className=\"card-text\">\n                        {/* icon for image status */}\n                        <i className={imageStatusToIconClass(image.status as ImageStatusEnum)}></i>&nbsp;\n                        {image.status}\n                    </p>\n                    {/* if status is \"processing\" then show bootstrap progress bar for image.current_iterations / image.iterations */}\n                    {image.status === \"processing\" && <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: `${(image.current_iterations * 1.0) / image.iterations * 100}%` }}>\n                        </div>\n                    </div>}\n                </div>\n\n                <hr />\n                {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => onDelete && onDelete(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-trash-alt\"></i>\n                </button>}\n                {onFork && (image.status === \"completed\" || image.status === \"saved\") && <button className=\"btn btn-secondary btn-sm\" onClick={() => onFork && onFork(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-code-branch\"></i>\n                </button>}\n                {/*  interactive designer */}\n                {onDesign && <button className=\"btn btn-secondary btn-sm\" onClick={() => onDesign && onDesign(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-pencil-alt\"></i>\n                </button>}\n                {(image.status === \"completed\" || image.status === \"saved\") && image.enable_video && <button className=\"btn btn-secondary btn-sm\" onClick={() => window.open(`${assetsUrl}/${image.id}.mp4`)} style={{marginRight: \"5px\", marginTop: \"5px\"}}>\n                    <i className=\"fas fa-video\"></i>\n                </button>}\n            </div>\n        </div>\n    );\n}","import React, { FC, useEffect, useRef } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface ImagePopupProps {\n    apiUrl: string;\n    assetsUrl: string;\n    image: Image;\n    onClose: () => void;\n    onDelete?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n    onDesign?: (image: Image) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({ apiUrl, assetsUrl, image, onClose, onDelete, onDesign, onFork }) => {\n\n    const img = useRef<HTMLImageElement>(null);\n    const src = `${assetsUrl}/${image.id}.image.jpg?updated_at=${image.updated_at}`;\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.jpg\"\n        }\n    }, [img])\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>{image.label}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img ref={img} style={{ width: \"100%\" }} id={`image-popup-${image.id}`} src={src} alt={image.label} />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <p>Status: {image.status}</p>\n                        <p>Iterations: {image.iterations}</p>\n                        <p>Phrases: {image.phrases.join(\", \")}</p>\n                        {/* enable_video */}\n                        <p>Enable Video: {image.enable_video ? \"Yes\" : \"No\"}</p>\n                        {/* enable_zoom */}\n                        {image.enable_video && <p>Enable Zoom: {image.enable_zoom ? \"Yes\" : \"No\"}</p>}\n                        {/* zoom_frequency */}\n                        {image.enable_zoom && image.enable_zoom && <p>Zoom Frequency: {image.zoom_frequency}</p>}\n                        {/* zoom_scale */}\n                        {image.enable_zoom && image.enable_zoom && <p>Zoom Scale: {image.zoom_scale}</p>}\n                        {/* zoom_shift_x */}\n                        {image.enable_zoom && image.enable_zoom && <p>Zoom Shift X: {image.zoom_shift_x}</p>}\n                        {/* zoom_shift_y */}\n                        {image.enable_zoom && image.enable_zoom && <p>Zoom Shift Y: {image.zoom_shift_y}</p>}\n                    </div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => onDelete && onDelete(image)} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-trash-alt\"></i>\n                        </button>}\n                        {onFork && image.status === \"saved\" && <button className=\"btn btn-secondary btn-sm\" onClick={() => onFork && onFork(image)} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-code-branch\"></i>\n                        </button>}\n                        {/*  interactive designer */}\n                        {onDesign && <button className=\"btn btn-secondary btn-sm\" onClick={() => onDesign && onDesign(image)} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-pencil-alt\"></i>\n                        </button>}\n                        {(image.status === \"completed\" || image.status === \"saved\") && image.enable_video && <button className=\"btn btn-secondary btn-sm\" onClick={() => window.open(`${apiUrl}/images/${image.id}/video.mp4`)} style={{ marginRight: \"5px\", marginTop: \"5px\" }}>\n                            <i className=\"fas fa-video\"></i>\n                        </button>}\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n\n}","import React, { FC } from \"react\";\n\ninterface LoadMoreImagesProps {\n    onLoadMore: () => void;\n    isLoading: boolean;\n}\n\nexport const LoadMoreImages: FC<LoadMoreImagesProps> = ({ onLoadMore, isLoading }) => {\n    return (\n        <div className=\"card\" style={{ padding: \"10px\", width: \"200px\", margin: \"10px\" }}>\n            <div className=\"card-body\">\n                <button disabled={isLoading} className=\"btn btn-primary\" onClick={onLoadMore}>\n                    {isLoading ? (\n                        <>\n                            <i className=\"fa fa-spinner fa-spin\" /> Loading...\n                        </>\n                    ) : (\n                        <>\n                            <i className=\"fa fa-plus\" /> Load more\n                        </>\n                    )}\n                </button>\n            </div>\n        </div>\n    )\n};","// React page to show all images\n// use bootstrap\nimport React, { FC, useState, useEffect } from 'react';\nimport moment from \"moment\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { AIBrushApi, Image } from \"../client/api\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { setDesignerCurrentImageId } from \"../lib/designer\";\nimport { LoadMoreImages } from \"../components/LoadMoreImages\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiUrl: string;\n    assetsUrl: string;\n}\n\nexport const ImagesPage: FC<Props> = ({ api, apiUrl, assetsUrl }) => {\n    const history = useHistory();\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [loadingMore, setLoadingMore] = useState<boolean>(false);\n\n    const onForkImage = async (image: Image) => {\n        // navigate to /create-image with ?parent=image.id\n        history.push(`/create-image?parent=${image.id}`)\n    }\n\n\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        const loadImages = async () => {\n            // clear error\n            setErr(null);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf()\n                const resp = await api.listImages(cursor, 100, \"desc\")\n                if (resp.data.images) {\n                    setImages(resp.data.images)\n                }\n                return 0\n            } catch (err) {\n                setErr(\"Could not load images\")\n                console.error(err)\n            }\n        };\n        loadImages()\n    }, [api])\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at)\n            }, 0)\n\n            try {\n                const resp = await api.listImages(cursor + 1, 100, \"asc\")\n                if (resp.data.images) {\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = resp.data.images.filter(image => {\n                        return images.findIndex(i => i.id === image.id) < 0\n                    })\n                    const updatedImages = resp.data.images.filter(image => {\n                        return images.findIndex(i => i.id === image.id) >= 0\n                    })\n                    setImages([\n                        ...images.map(image => {\n                            const updatedImage = updatedImages.find(i => i.id === image.id)\n                            if (updatedImage) {\n                                return updatedImage\n                            }\n                            return image\n                        }),\n                        ...newImages\n                    ].sort((a, b) => {\n                        return b.updated_at - a.updated_at\n                    }))\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\")\n                console.error(err)\n            }\n        }\n\n        const timerHandle = setInterval(() => {\n            pollImages(images)\n        }, 5000)\n        return () => {\n            clearInterval(timerHandle)\n        }\n\n    }, [api, images])\n\n    const onDeleteImage = async (image: Image) => {\n        // clear error\n        setErr(\"\")\n        // attempt to delete image\n        try {\n            await api.deleteImage(image.id as string)\n            // remove image from list\n            setImages(images => images.filter(i => i.id !== image.id));\n        } catch (err) {\n            console.error(err)\n            setErr(\"Could not delete image\")\n        }\n    }\n\n    const onDesignImage = async (image: Image) => {\n        setDesignerCurrentImageId(image.id)\n        history.push(\"/designer\")\n    }\n\n    const onLoadMore = async () => {\n        setLoadingMore(true)\n        try {\n            // get the minimum updated_at from images\n            let minUpdatedAt = moment().valueOf();\n            images.forEach(image => {\n                minUpdatedAt = Math.min(minUpdatedAt, image.updated_at)\n            })\n            // load images in descending order from updated_at\n            const resp = await api.listImages(minUpdatedAt - 1, 100, \"desc\")\n            if (resp.data.images) {\n                // combine images with new images and sort by updated_at descending\n                setImages([\n                    ...images,\n                    ...resp.data.images\n                ].sort((a, b) => {\n                    return b.updated_at - a.updated_at\n                }))\n            }\n        } finally {\n            setLoadingMore(false)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <h1>Images</h1>\n                </div>\n            </div>\n            {/* display error message if one is set */}\n            {err && <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        {err}\n                    </div>\n                </div>\n            </div>}\n            {/* Link to navigate to CreateImage */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <Link to=\"/create-image\" className=\"btn btn-primary\">\n                        <i className=\"fas fa-plus\"></i>&nbsp;\n                        Create Image\n                    </Link>\n                </div>\n            </div>\n            <hr />\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"row\">\n                        {images.map(image => (\n                            <ImageThumbnail\n                                onDelete={onDeleteImage}\n                                onFork={onForkImage}\n                                onClick={setSelectedImage}\n                                onDesign={onDesignImage}\n                                assetsUrl={assetsUrl}\n                                key={image.id}\n                                image={image} />\n                        ))}\n                        <LoadMoreImages isLoading={loadingMore} onLoadMore={onLoadMore} />\n                    </div>\n                </div>\n            </div>\n            {/* show ImagePopup if selectedImage is set */}\n            {selectedImage && (\n                <ImagePopup\n                    apiUrl={apiUrl}\n                    assetsUrl={assetsUrl}\n                    image={selectedImage as Image}\n                    onClose={() => setSelectedImage(null)}\n                    onDelete={onDeleteImage}\n                    onFork={onForkImage}\n                    onDesign={onDesignImage}\n                />\n            )}\n        </>\n    );\n};\n\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Service is unavailable</strong>\n        </div>\n    );\n}\n\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","import React, { FC } from \"react\";\nimport { SuggestionSeed } from \"../client\";\n\ninterface Props {\n    suggestionSeed: SuggestionSeed;\n    onDelete?: (suggestionSeed: SuggestionSeed) => void;\n    onView?: (suggestionSeed: SuggestionSeed) => void;\n    onGenerate?: (suggestionSeed: SuggestionSeed) => void;\n    onEdit?: (suggestionSeed: SuggestionSeed) => void;\n}\n\nexport const SuggestionSeedTile: FC<Props> = ({ suggestionSeed, onDelete, onView, onGenerate, onEdit }) => {\n    return (\n        <div className=\"card\" key={suggestionSeed.id} style={{ padding: \"10px\", width: \"230px\", margin: \"10px\" }}>\n            <div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{suggestionSeed.name}</h5>\n                    <p className=\"card-text\">{suggestionSeed.description}</p>\n                    {/*  actions: delete, view, generate */}\n                    <div>\n                        {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => { onDelete(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-trash-alt\"></i>\n                        </button>}\n                        {onView && <button className=\"btn btn-secondary btn-sm\" onClick={() => { onView(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-eye\"></i>\n                        </button>}\n                        {onEdit && <button className=\"btn btn-secondary btn-sm\" onClick={() => { onEdit(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-edit\"></i>\n                        </button>}\n                        {onGenerate && <button className=\"btn btn-secondary btn-sm\" onClick={() => { onGenerate(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-play\"></i>\n                        </button>}\n                    </div>\n                </div>\n                \n            </div>\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { AIBrushApi, Image } from \"../client/api\";\r\n\r\ninterface Props {\r\n    api: AIBrushApi;\r\n    onHide: () => void;\r\n    filterOut: string[];\r\n    onSubmit: (input: string[]) => void;\r\n}\r\n\r\nexport const ImageSearchPopup : FC<Props> = ({ api, onHide, filterOut, onSubmit }) => {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [images, setImages] = useState<Image[]>([]);\r\n    const [filteredImages, setFilteredImages] = useState<Image[]>([]);\r\n    const [selectedImages, setSelectedImages] = useState<{[key: string]: boolean}>({});\r\n\r\n    useEffect(() => {\r\n        const loadImages = async () => {\r\n            const images = await api.listImages(undefined, 1000)\r\n            setImages((\r\n                images.data.images || []\r\n            ).filter(image => !filterOut.includes(image.phrases.join(\"|\"))));\r\n        }\r\n        loadImages();\r\n    }, [api]);\r\n\r\n    useEffect(() => {\r\n        // case-insensitive match on search value\r\n        const searchValue = search.toLowerCase();\r\n        const dedup: {[key: string]: boolean} = {};\r\n        const filteredImages = images.filter(image => {\r\n            const name = image.label.toLowerCase().trim();\r\n            const phrases = image.phrases.map(phrase => phrase.toLowerCase()).join(\"|\").trim();\r\n            const match = phrases.length > 0 && !dedup[phrases] && (name.includes(searchValue) || phrases.includes(searchValue));\r\n            if (match) {\r\n                dedup[phrases] = true;\r\n            }\r\n            return match;\r\n        });\r\n        setFilteredImages(filteredImages);\r\n    }, [images, search])\r\n\r\n    const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    const onImageSelected = (image: Image) => {\r\n        setSelectedImages(selectedImages => {\r\n            return {\r\n                ...selectedImages,\r\n                [image.id]: !selectedImages[image.id]\r\n            }\r\n        });\r\n    }\r\n\r\n    const onSubmitClick = () => {\r\n        if (Object.keys(selectedImages).length === 0) {\r\n            alert(\"No images selected\");\r\n            return;\r\n        }\r\n        const selected = filteredImages.filter(image => selectedImages[image.id]);\r\n        onHide();\r\n        onSubmit(selected.map(image => image.phrases.join(\"|\")));\r\n    }\r\n\r\n    return (\r\n        <Modal show onHide={onHide} size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Search Images</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"form-group\">\r\n                    <label>Search</label>\r\n                    <input type=\"text\" className=\"form-control\" value={search} onChange={onSearchChange} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Images</label>\r\n                    <div className=\"list-group\">\r\n                        {filteredImages.map(image => (\r\n                            <div className=\"list-group-item\" key={image.id}>\r\n                                <div className=\"form-check\">\r\n                                    <input type=\"checkbox\" className=\"form-check-input\" checked={selectedImages[image.id]} onChange={() => onImageSelected(image)} />\r\n                                    <label className=\"form-check-label\">{image.phrases.join(\"|\")}</label>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={onSubmitClick}>Submit</button>\r\n                {/* cancel */}\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={onHide}>Cancel</button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { SuggestionSeedInput, SuggestionSeed, AIBrushApi } from \"../client/api\";\nimport { ImageSearchPopup } from \"./ImageSearchPopup\";\n\ninterface Props {\n    api: AIBrushApi;\n    editingSuggestionSeed?: SuggestionSeed;\n    onHide: () => void;\n    onCreate?: (input: SuggestionSeedInput) => void;\n    onUpdate?: (id: string, input: SuggestionSeedInput) => void;\n}\n\nexport const SuggestionSeedModal: FC<Props> = ({ api, editingSuggestionSeed, onHide, onCreate, onUpdate }) => {\n    const [input, setInput] = useState<SuggestionSeedInput>({\n        name: \"\",\n        description: \"\",\n        items: []\n    });\n    const [searchingImages, setSearchingImages] = useState(false);\n\n    const submit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (input.items.length === 0) {\n            alert(\"Please add at least one item\");\n            return;\n        }\n        onHide();\n        if (onCreate) {\n            onCreate(input);\n        } else if (editingSuggestionSeed && onUpdate) {\n            onUpdate(editingSuggestionSeed.id, input);\n        }\n    };\n\n    useEffect(() => {\n        if (editingSuggestionSeed) {\n            setInput({\n                name: editingSuggestionSeed.name,\n                description: editingSuggestionSeed.description,\n                items: editingSuggestionSeed.items\n            });\n        }\n    }, [editingSuggestionSeed])\n\n    return (\n        <>\n            <Modal show={true} onHide={onHide}>\n                <form onSubmit={submit}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create Suggestions Seed</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* name (required) */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input\n                                required\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"name\"\n                                placeholder=\"Name\"\n                                value={input.name}\n                                onChange={(e) => setInput({ ...input, name: e.target.value })}\n                            />\n                        </div>\n                        {/* description */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"description\">Description</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"description\"\n                                placeholder=\"Description\"\n                                value={input.description}\n                                onChange={(e) => setInput({ ...input, description: e.target.value })}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"suggestions\">Suggestions</label>\n                            <textarea\n                                className=\"form-control\"\n                                id=\"suggestions\"\n                                rows={10}\n                                value={input.items.join(\"\\n\")}\n                                onChange={(e) => {\n                                    setInput({\n                                        ...input,\n                                        items: e.target.value.split(\"\\n\")\n                                    });\n                                }}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={() => setSearchingImages(true)}>\n                                <i className=\"fas fa-search\"></i>&nbsp;\n                                Search Images\n                            </button>\n                        </div>\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                            {editingSuggestionSeed ? \"Update\" : \"Create\"}\n                        </button>\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={onHide}>Close</button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n            {searchingImages && <ImageSearchPopup\n                api={api}\n                filterOut={input.items}\n                onHide={() => setSearchingImages(false)}\n                onSubmit={(items) => {\n                    setInput({\n                        ...input,\n                        items: [...input.items, ...items]\n                    });\n                }}\n            />}\n        </>\n\n    );\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, SuggestionsJob, SuggestionSeed, SuggestionsJobStatusEnum } from \"../client\";\nimport { imageStatusToIconClass } from \"../lib/iconhelper\";\n\ninterface Props {\n    api: AIBrushApi;\n    suggestionJobId: string;\n    suggestionSeedId: string;\n    onClose: () => void;\n    onSaveSuggestion: (suggestionSeedId: string, suggestion: string) => void;\n    onRetry: (suggestionSeedId: string) => void;\n    onGenerateImage: (suggestion: string) => void;\n}\n\nexport const SuggestionJobPopup: FC<Props> = ({ api, suggestionJobId, suggestionSeedId, onClose, onSaveSuggestion, onRetry, onGenerateImage }) => {\n    const [suggestionSeed, setSuggestionSeed] = useState<SuggestionSeed | null>(null);\n    const [suggestionJob, setSuggestionJob] = useState<SuggestionsJob | null>(null);\n    const [savedSuggestions, setSavedSuggestions] = useState<{ [key: string]: boolean }>({});\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        let handle: number;\n        const loadSuggestionJob = async () => {\n            try {\n                const resp = await api.getSuggestionsJob(suggestionJobId)\n                if (resp.data) {\n                    setSuggestionJob(resp.data)\n                    // if status is pending or processing,\n                    // poll for updates\n                    if (resp.data.status === \"pending\" || resp.data.status === \"processing\") {\n                        handle = window.setTimeout(() => {\n                            loadSuggestionJob()\n                        }, 1000);\n                    }\n                }\n            } catch (err) {\n                console.error(err)\n            }\n        };\n        loadSuggestionJob()\n        return () => {\n            if (handle) {\n                window.clearTimeout(handle)\n            }\n        }\n    }, [api, suggestionJobId]);\n\n    const saveSuggestion = (result: string) => {\n        onSaveSuggestion(suggestionSeedId, result)\n        setSavedSuggestions({\n            ...savedSuggestions,\n            [result]: true,\n        })\n    }\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        const loadSuggestionSeed = async () => {\n            // clear error\n            setSuggestionSeed(null);\n            try {\n                const resp = await api.getSuggestionSeed(suggestionSeedId)\n                if (resp.data) {\n                    setSuggestionSeed(resp.data)\n                }\n            } catch (err) {\n                console.error(err)\n            }\n        };\n        loadSuggestionSeed()\n    }, [api, suggestionSeedId]);\n\n    // modal\n    return (\n        <Modal show={true} onHide={onClose} onBackdropClick={e => { }}>\n            <Modal.Header>\n                <Modal.Title>{suggestionSeed && `Generating suggestions for ${suggestionSeed.name}`}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {suggestionJob && (\n                    <>\n                        {/* Show status */}\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                {/* status font awesome icon */}\n                                <i className={imageStatusToIconClass(suggestionJob.status)} />&nbsp;\n                                {suggestionJob.status}\n                            </div>\n                        </div>\n                        {/* one row per result */}\n                        {suggestionJob.result && suggestionJob.result.map((result, index) => (\n                            <div className=\"row\" key={index}>\n                                <div className=\"col-md-12\">\n                                    <div className=\"row\" style={{ backgroundColor: \"gray\", margin: \"5px\", padding: \"10px\", borderRadius: \"5px\" }}>\n                                        <div className=\"col-md-8\">\n                                            {result}\n                                        </div>\n\n\n                                        <div className=\"col-md-4\">\n                                            {/* actions to the right: save, generate */}\n                                            <div className=\"pull-right\">\n                                                <button className=\"btn btn-primary btn-sm\" disabled={savedSuggestions[result]} onClick={() => saveSuggestion(result)}>\n                                                    {!savedSuggestions[result] && <i className=\"fas fa-save\" />}\n                                                    {savedSuggestions[result] && <i className=\"fas fa-check\" />}\n                                                </button>\n                                                <button className=\"btn btn-primary btn-sm\" style={{ marginLeft: \"5px\" }} onClick={() => onGenerateImage(result)}>\n                                                    <i className=\"fas fa-play\" />&nbsp;\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </>\n                )}\n            </Modal.Body>\n            <Modal.Footer>\n                {/* retry button */}\n                {onRetry && suggestionJob && suggestionJob.status == SuggestionsJobStatusEnum.Completed && (\n                    <button className=\"btn btn-primary\" onClick={() => onRetry(suggestionSeedId)}>\n                        <i className=\"fas fa-redo\" />&nbsp;\n                        Retry\n                    </button>\n                )}\n                <button className=\"btn btn-primary\" onClick={onClose}>Close</button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { SuggestionSeed } from \"../client/api\";\n\ninterface Props {\n    suggestionSeed: SuggestionSeed;\n    onClose: () => void;\n    onGenerateImage: (suggestion: string) => void;\n}\n\nexport const ViewSuggestionSeedModal: FC<Props> = ({ suggestionSeed, onClose, onGenerateImage }) => {\n    return (\n        <Modal show={true} onHide={onClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{suggestionSeed.name}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        {suggestionSeed.items.map((item, index) => (\n                            <div className=\"row\" style={{ backgroundColor: \"gray\", margin: \"5px\", padding: \"10px\", borderRadius: \"5px\" }}>\n                                <div className=\"col-md-8\">\n                                    {item}\n                                </div>\n\n                                <div className=\"col-md-4\">\n                                    {/* actions to the right: save, generate */}\n                                    <div className=\"pull-right\">\n                                        <button className=\"btn btn-primary btn-sm\" style={{ marginLeft: \"5px\" }} onClick={() => onGenerateImage(item)}>\n                                            <i className=\"fas fa-play\" />&nbsp;\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onClose}>Close</button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, SuggestionSeed, SuggestionSeedInput, SuggestionsJob } from \"../client\";\nimport { sleep } from \"../lib/sleep\";\n\nimport { SuggestionSeedTile } from \"../components/SuggestionSeedTile\";\nimport { SuggestionSeedModal } from \"../components/SuggestionSeedModal\";\nimport { SuggestionJobPopup } from \"../components/SuggestionJobPopup\";\nimport { ViewSuggestionSeedModal } from \"../components/ViewSuggestionSeedModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiUrl: string;\n}\n\nexport const SuggestionsPage: FC<Props> = ({ api, apiUrl }) => {\n    const [suggestionSeeds, setSuggestionSeeds] = useState<SuggestionSeed[]>([]);\n    const [err, setErr] = useState<string | null>(null);\n\n    const [creatingSuggestionSeed, setCreatingSuggestionSeed] = useState<boolean>(false);\n    const [editingSuggestionSeed, setEditingSuggestionSeed] = useState<SuggestionSeed | null>(null);\n    const [viewingSuggestionSeed, setViewingSuggestionSeed] = useState<SuggestionSeed | null>(null);\n    const [selectedSuggestionSeedId, setSelectedSuggestionSeedId] = useState<string | null>(null);\n    const [runningSuggestionJobId, setRunningSuggestionJobId] = useState<string | null>(null);\n\n    const history = useHistory();\n\n    const onView = async (suggestionSeed: SuggestionSeed) => {\n        // TODO: show details modal\n    };\n\n    const onGenerate = async (suggestionSeedId: string) => {\n        // clear error\n        setErr(null);\n        // create a new job with this seed\n        try {\n            const resp = await api.createSuggestionsJob({\n                seed_id: suggestionSeedId,\n            });\n            setSelectedSuggestionSeedId(suggestionSeedId);\n            setRunningSuggestionJobId(resp.data.id);\n        } catch (err) {\n            console.error(err)\n            setErr(\"Could not generate suggestions\")\n        }\n    }\n\n    const onGenerateClose = () => {\n        setSelectedSuggestionSeedId(null);\n        setRunningSuggestionJobId(null);\n    }\n\n    const onCreateClick = () => {\n        setCreatingSuggestionSeed(true);\n    }\n\n    const onCancelCreateSuggestionSeed = () => {\n        setCreatingSuggestionSeed(false);\n    }\n\n    const onCreateSuggestionSeed = async (suggestionSeed: SuggestionSeedInput) => {\n        const result = await api.createSuggestionSeed(suggestionSeed);\n        setCreatingSuggestionSeed(false);\n        setSuggestionSeeds(suggestionSeeds => [...suggestionSeeds, result.data]);\n    }\n\n    const onEditSuggestionSeed = (suggestionSeed: SuggestionSeed) => {\n        setEditingSuggestionSeed(suggestionSeed);\n    }\n\n    const onCancelEditSuggestionSeed = () => {\n        setEditingSuggestionSeed(null);\n    }\n\n    const onUpdateSuggestionSeed = async (id: string, input: SuggestionSeedInput) => {\n        const result = await api.updateSuggestionSeed(id, input);\n        setEditingSuggestionSeed(null);\n        setSuggestionSeeds(suggestionSeeds => suggestionSeeds.map(suggestionSeed => suggestionSeed.id === id ? result.data : suggestionSeed));\n    }\n\n    const onSaveSuggestion = async (suggestionSeedId: string, suggestion: string) => {\n        // clear error\n        setErr(null);\n        try {\n            const seed = await api.getSuggestionSeed(suggestionSeedId);\n            await onUpdateSuggestionSeed(seed.data.id, {\n                ...seed.data,\n                items: [...seed.data.items, suggestion],\n            });\n        } catch(err) {\n            console.error(err);\n            setErr(\"Could not save suggestion\")\n        }\n    }\n\n    const onRetryGenerateSuggestions = async (suggestionSeedId: string) => {\n        setRunningSuggestionJobId(null);\n        await sleep(500);\n        await onGenerate(suggestionSeedId);\n    }\n\n    const onDeleteSuggestionSeed = async(seed: SuggestionSeed) => {\n        if (window.confirm(\"Are you sure you want to delete this seed?\")) {\n            // clear error\n            setErr(null);\n            try {\n                await api.deleteSuggestionSeed(seed.id);\n                setSuggestionSeeds(suggestionSeeds => suggestionSeeds.filter(s => s.id !== seed.id));\n            } catch(err) {\n                console.error(err);\n                setErr(\"Could not delete seed\");\n            }\n        }\n    }\n\n    const onGenerateImage = async (suggestion: string) => {\n        localStorage.setItem(\"suggestion\", suggestion);\n        // open /create-image in a new tab\n        window.open(`/create-image`, \"_blank\");\n        // history.push(`/create-image`);\n    }\n\n    const onViewSuggestionSeed = (seed: SuggestionSeed) => {\n        setViewingSuggestionSeed(seed);\n    }\n\n    const onCloseViewSuggestionSeed = () => {\n        setViewingSuggestionSeed(null);\n    }\n\n    useEffect(() => {\n        const loadSuggestionSeeds = async () => {\n            // clear error\n            setErr(null);\n            try {\n                const resp = await api.listSuggestionSeeds()\n                if (resp.data.suggestionSeeds) {\n                    setSuggestionSeeds(resp.data.suggestionSeeds)\n                }\n            } catch (err) {\n                setErr(\"Could not load suggestion seeds\")\n                console.error(err)\n            }\n        };\n        if (!api) {\n            return\n        }\n        loadSuggestionSeeds()\n    }, [api])\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <h1>Suggestions</h1>\n                </div>\n            </div>\n            {/* display error if one is set in a new row */}\n            {err && <div className=\"row\"><div className=\"col-md-12\"><div className=\"alert alert-danger\">{err}</div></div></div>}\n            {/* display suggestion seeds */}\n            {/* Button for create suggestions seed popup */}\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <button className=\"btn btn-primary\" onClick={onCreateClick}>Create Suggestion Seed</button>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"row\">\n                        {suggestionSeeds.map(suggestionSeed => (\n                            <SuggestionSeedTile\n                                key={suggestionSeed.id}\n                                suggestionSeed={suggestionSeed}\n                                onGenerate={seed => onGenerate(seed.id)}\n                                onEdit={onEditSuggestionSeed}\n                                onDelete={onDeleteSuggestionSeed}\n                                onView={onViewSuggestionSeed}\n                            />\n                        ))}\n                    </div>\n\n                </div>\n            </div>\n            {/* create suggestions seed popup */}\n            {creatingSuggestionSeed && <SuggestionSeedModal api={api} onHide={onCancelCreateSuggestionSeed} onCreate={onCreateSuggestionSeed} />}\n            {/* edit suggestions seed popup */}\n            {editingSuggestionSeed && <SuggestionSeedModal api={api} onHide={onCancelEditSuggestionSeed} onUpdate={onUpdateSuggestionSeed} editingSuggestionSeed={editingSuggestionSeed} />}\n            {runningSuggestionJobId && selectedSuggestionSeedId && (\n                <SuggestionJobPopup\n                    onClose={onGenerateClose}\n                    api={api}\n                    suggestionSeedId={selectedSuggestionSeedId}\n                    suggestionJobId={runningSuggestionJobId}\n                    onSaveSuggestion={onSaveSuggestion}\n                    onRetry={onRetryGenerateSuggestions}\n                    onGenerateImage={onGenerateImage}\n                />\n            )}\n            {viewingSuggestionSeed && <ViewSuggestionSeedModal\n                onClose={onCloseViewSuggestionSeed}\n                suggestionSeed={viewingSuggestionSeed}\n                onGenerateImage={onGenerateImage}\n            />}\n        </>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\"\nimport './App.css';\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult } from \"./client/api\";\nimport { getConfig } from './config';\nimport { Login } from \"./pages/Login\"\nimport { MainMenu } from './pages/MainMenu';\nimport { CreateImage } from \"./pages/CreateImage\"\nimport { ImagesPage } from \"./pages/Images\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from './components/Healthchecker';\nimport { InteractiveDesigner } from \"./pages/InteractiveDesigner\";\nimport { SuggestionsPage } from \"./pages/Suggestions\";\n\nconst config = getConfig()\nconst httpClient = axios.default;\nconst client = new AIBrushApi(undefined, localStorage.getItem(\"apiUrl\") || config.apiUrl, httpClient);\n\nfunction updateHttpClient(loginResult: LoginResult) {\n  if (loginResult.accessToken) {\n    httpClient.defaults.headers.common['Authorization'] = `Bearer ${loginResult.accessToken}`;\n  }\n}\n\nfunction App() {\n\n  const [credentials, setCredentials] = useState<LoginResult | null>(null);\n  const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n\n  const init = async () => {\n    console.log(\"App.init\")\n    client.getAssetsUrl().then(result => setAssetsUrl(result.data.assets_url));\n    const storedCredentials = localStorage.getItem(\"credentials\");\n    if (storedCredentials) {\n      // attempt to refresh token\n      try {\n        const credentials = JSON.parse(storedCredentials) as LoginResult;\n        const result = await client.refresh({\n          refreshToken: credentials.refreshToken\n        });\n        setCredentials(result.data);\n        // save to storage\n        localStorage.setItem(\"credentials\", JSON.stringify(result.data));\n        updateHttpClient(result.data);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  const onLogin = async (credentials: LoginResult) => {\n    localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n    setCredentials(credentials);\n    updateHttpClient(credentials);\n  };\n\n  const onUpdateAPIUrl = () => {\n    let apiUrl = localStorage.getItem(\"apiUrl\") || config.apiUrl;\n    const resp = prompt(\"Configure backend url\", apiUrl)\n    if (resp) {\n      apiUrl = resp;\n      localStorage.setItem(\"apiUrl\", apiUrl);\n      // reload page\n      window.location.reload();\n    }\n  }\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <TokenRefresher api={client} credentials={credentials as LoginResult} onCredentialsRefreshed={onLogin} />\n      <Healthchecker api={client} />\n\n      <BrowserRouter>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              {/* settings button */}\n              <button className=\"btn btn-primary top-button\" onClick={onUpdateAPIUrl}>\n                {/* font awesome settings icon */}\n                <i className=\"fas fa-cog\"></i>&nbsp;\n                Settings\n              </button>\n              {/* if credentials are not set, show Login component */}\n              {!credentials && <Login httpClient={httpClient} client={client} onLogin={onLogin} />}\n              {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n              {credentials && <>\n                <button className=\"btn btn-primary top-button\" onClick={() => setCredentials(null)}>\n                  {/* font awesome logout icon */}\n                  <i className=\"fas fa-sign-out-alt\"></i>&nbsp;\n                  Logout\n                </button>\n                {/* home button */}\n                <Link className=\"btn btn-primary top-button\" to=\"/\">\n                  {/* font awesome home icon */}\n                  <i className=\"fas fa-home\"></i>&nbsp;\n                  Home\n                </Link>\n              </>}\n            </div>\n          </div>\n\n          {/* if credentials are set, show the rest of the app */}\n          {credentials && <Switch>\n            <Route path=\"/\" exact={true}>\n              <MainMenu />\n            </Route>\n            <Route path=\"/create-image\">\n              <CreateImage api={client} apiUrl={config.apiUrl} />\n            </Route>\n            <Route path=\"/images\">\n              <ImagesPage apiUrl={config.apiUrl} api={client} assetsUrl={assetsUrl} />\n            </Route>\n            {/* /designer route */}\n            <Route path=\"/designer\">\n              <InteractiveDesigner api={client} apiUrl={config.apiUrl} />\n            </Route>\n            {/* /suggestions route */}\n            <Route path=\"/suggestions\">\n              <SuggestionsPage api={client} apiUrl={config.apiUrl} />\n            </Route>\n          </Switch>}\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ImageStatusEnum, SuggestionsJobStatusEnum } from \"../client/api\";\n\n// map from image status to font awesome class\n// possible values: Pending, Processing, Completed, Saved\nexport const imageStatusToIconClass = (status: ImageStatusEnum | SuggestionsJobStatusEnum) => {\n    switch (status) {\n        case \"pending\":\n            return \"fas fa-hourglass-start\";\n        case \"processing\":\n            return \"fas fa-cog fa-spin\";\n        case \"completed\":\n            return \"fas fa-check\";\n        case \"saved\":\n            return \"fas fa-save\";\n        default:\n            return \"\";\n    }\n}","// export functions to get and set designer current image id\n// using local storage\n\nexport function getDesignerCurrentImageId(): string | null {\n    return localStorage.getItem('designerCurrentImageId');\n}\n\nexport function setDesignerCurrentImageId(id: string | null): void {\n    if (id) {\n        localStorage.setItem('designerCurrentImageId', id);\n    } else {\n        localStorage.removeItem('designerCurrentImageId');\n    }\n}\n","// react bootstrap large modal with a canvas for image editing.\n// Brush size, brush size preview, color selector, color picker\n// Save and cancel buttons\n\nimport React, { FC, useState, useEffect } from 'react';\nimport { Modal } from \"react-bootstrap\";\n\ninterface ImageEditorProps {\n    encodedImage: string | null;\n    onSave: (image: string) => void;\n    onCancel: () => void;\n}\n\nexport const ImageEditor: FC<ImageEditorProps> = ({ encodedImage, onSave, onCancel }) => {\n    const [canvas, setCanvas] = useState<HTMLCanvasElement | null>(null);\n    const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState('#000000');\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [lastX, setLastX] = useState(0);\n    const [lastY, setLastY] = useState(0);\n\n    useEffect(() => {\n        const c = document.getElementById('canvas') as HTMLCanvasElement;\n        if (c) {\n            setCanvas(c);\n            setCtx(c.getContext('2d'));\n        }\n    }, [canvas]);\n\n    useEffect(() => {\n        if (ctx && canvas) {\n            // if image is not null, draw it on the canvas\n            if (encodedImage) {\n                const img = new Image();\n                img.src = encodedImage;\n                img.onload = () => {\n                    ctx.drawImage(img, 0, 0);\n                }\n            } else {\n                ctx.fillStyle = '#ffffff';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n        }\n    }, [ctx, canvas, encodedImage])\n\n    const getMousePos = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        if (!canvas) {\n            throw Error(\"No canvas\")\n        }\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        if (e.nativeEvent instanceof MouseEvent) {\n            const evt = e as React.MouseEvent<HTMLCanvasElement>;\n            return {\n                x: (evt.clientX - rect.left) * scaleX,\n                y: (evt.clientY - rect.top) * scaleY\n            }\n        } else if (e.nativeEvent instanceof TouchEvent) {\n            const evt = e as React.TouchEvent<HTMLCanvasElement>;\n            return {\n                x: (evt.touches[0].clientX - rect.left) * scaleX,\n                y: (evt.touches[0].clientY - rect.top) * scaleY\n            }\n        }\n        console.log(e)\n        throw new Error(\"event is not MouseEvent or TouchEvent\")\n    }\n\n    const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        if (!canvas) {\n            return;\n        }\n        setIsDrawing(true);\n        const mousePos = getMousePos(e);\n        setLastX(mousePos.x);\n        setLastY(mousePos.y);\n        // draw a single dot in case the user clicks without moving the mouse\n        drawDot(mousePos.x, mousePos.y);\n    };\n\n    const drawDot = (x: number, y: number) => {\n        if (!ctx) {\n            return;\n        }\n        ctx.fillStyle = brushColor;\n        ctx.beginPath();\n        ctx.arc(x, y, brushSize / 2, 0, Math.PI * 2);\n        ctx.fill();\n    }\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        if (!isDrawing || !ctx || !canvas) {\n            return;\n        }\n\n        e.preventDefault()\n        e.stopPropagation()\n        // get x and y relative to the canvas\n        const mousePos = getMousePos(e);\n        const x = mousePos.x;\n        const y = mousePos.y;\n\n        ctx.beginPath();\n        ctx.moveTo(lastX, lastY);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = brushColor;\n        ctx.lineWidth = brushSize;\n        // line caps\n        ctx.lineCap = 'round';\n        ctx.stroke();\n\n        setLastX(x);\n        setLastY(y);\n    };\n\n    const handleMouseUp = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        setIsDrawing(false);\n    };\n\n    const handleBrushSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setBrushSize(parseFloat(e.target.value));\n    };\n\n    const handleBrushColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setBrushColor(e.target.value);\n    };\n\n    const handleSave = () => {\n        if (canvas && ctx) {\n            const data = canvas.toDataURL('image/png');\n            onSave(data);\n        }\n    };\n\n    const handleCancel = () => {\n        onCancel();\n    };\n\n    return (\n        <Modal show={true} onHide={handleCancel} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Image Editor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <canvas\n                    style={{ width: \"100%\" }}\n                    id=\"canvas\"\n                    width=\"512\"\n                    height=\"512\"\n                    onMouseDown={handleMouseDown}\n                    onMouseMove={handleMouseMove}\n                    onMouseUp={handleMouseUp}\n                    onTouchStart={handleMouseDown}\n                    onTouchMove={handleMouseMove}\n                    onTouchEnd={handleMouseUp}\n                ></canvas>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushSize\">Brush Size</label>\n                            <input type=\"range\" className=\"form-control\" id=\"brushSize\" min=\"1\" max=\"100\" value={brushSize} onChange={handleBrushSizeChange} />\n                        </div>\n\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushColor\">Brush Color</label>\n                            <input type=\"color\" className=\"form-control\" id=\"brushColor\" value={brushColor} onChange={handleBrushColorChange} />\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-primary\" onClick={handleSave}>Save</button>\n                <button className=\"btn btn-secondary\" onClick={handleCancel}>Cancel</button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import React, { FC, useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\"\nimport { AIBrushApi, CreateImageInput } from \"../client/api\"\nimport loadImage from \"blueimp-load-image\"\nimport qs from \"qs\";\nimport { ImageEditor } from \"../components/ImageEditor\";\n\ninterface CreateImageProps {\n    api: AIBrushApi\n    apiUrl: string;\n}\n\nexport const CreateImage: FC<CreateImageProps> = (props) => {\n    const searchParams = qs.parse(window.location.search.substring(1)) as any\n\n    const history = useHistory()\n    const [input, setInput] = useState<CreateImageInput>({\n        phrases: [],\n        label: \"\",\n        iterations: 300,\n        encoded_image: \"\",\n        enable_video: false,\n        enable_zoom: false,\n        zoom_frequency: 10,\n        zoom_scale: 0.99,\n        zoom_shift_x: 0,\n        zoom_shift_y: 0,\n        model: undefined,\n    });\n    const [editingImage, setEditingImage] = useState<string | null>(null);\n    const [count, setCount] = useState(1)\n\n    const onSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        for (let i = 0; i < count; i++) {\n            await props.api.createImage(input);\n        }\n\n        // redirect to images page\n        history.push(\"/images\")\n    }\n\n    const onCancel = () => {\n        // on cancel, return to the previous page\n        // check if there is a previous page. if not, redirect to home\n        if (history.length > 1) {\n            history.goBack()\n        } else {\n            history.push(\"/\")\n        }\n    }\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0]\n        if (!file) {\n            return\n        }\n        loadImage(file, (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n            if (!(img instanceof HTMLCanvasElement)) {\n                return\n            }\n            // convert image to base64\n            const canvas = img as HTMLCanvasElement\n            const dataUrl = canvas.toDataURL(\"image/jpeg\")\n            const base64 = dataUrl.split(\",\")[1]\n            setInput({\n                ...input,\n                encoded_image: base64\n            })\n        }, {\n            maxWidth: 512,\n            maxHeight: 512,\n            crop: true,\n            canvas: true,\n        })\n    }\n\n\n\n    const onEditImage = () => {\n        let img = input.encoded_image;\n        if (!img) {\n            // blank 512 x 512 image with white background\n            // create a new canvas\n            const canvas = document.createElement(\"canvas\")\n            canvas.width = 512\n            canvas.height = 512\n            const ctx = canvas.getContext(\"2d\")\n            if (ctx) {\n                ctx.fillStyle = \"white\"\n                ctx.fillRect(0, 0, 512, 512)\n                img = canvas.toDataURL(\"image/jpeg\").split(\",\")[1]\n            }\n        }\n        if (img) {\n            setEditingImage(`data:image/jpeg;base64,${img}`)\n        }\n    }\n\n    const onImageEdited = (imageUri: string) => {\n        // extract base64 portion of the image uri\n        const base64 = imageUri.split(\",\")[1]\n        setInput({\n            ...input,\n            encoded_image: base64\n        })\n        setEditingImage(null)\n    }\n\n    const onRandomizeImage = () => {\n        // create a new canvas\n        const canvas = document.createElement(\"canvas\")\n        canvas.width = 512\n        canvas.height = 512\n        const ctx = canvas.getContext(\"2d\")\n        if (ctx) {\n            ctx.fillStyle = \"white\"\n            ctx.fillRect(0, 0, 512, 512)\n            // draw random circles and rectangles\n            for (let i = 0; i < 2048; i++) {\n                const x = Math.random() * 512\n                const y = Math.random() * 512\n                const w = Math.random() * 20\n                const h = Math.random() * 20\n                // random fillStyle and strokeStyle\n                ctx.fillStyle = `rgb(${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)})`\n                ctx.strokeStyle = `rgb(${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)})`\n                // random shape\n                const shape = Math.floor(Math.random() * 3)\n                if (shape === 0) {\n                    ctx.fillRect(x, y, w, h)\n                } else if (shape === 1) {\n                    ctx.beginPath()\n                    ctx.arc(x, y, w, 0, 2 * Math.PI)\n                    ctx.fill()\n                } else {\n                    ctx.beginPath()\n                    ctx.arc(x, y, w, 0, 2 * Math.PI)\n                    ctx.stroke()\n                }\n            }\n            // convert image to base64\n            const dataUrl = canvas.toDataURL(\"image/jpeg\")\n            const base64 = dataUrl.split(\",\")[1]\n            setInput({\n                ...input,\n                encoded_image: base64\n            })\n        }\n    }\n\n    useEffect(() => {\n\n        const loadParent = async (parentId: string) => {\n            const image = await props.api.getImage(parentId)\n            // get encoded image data for parent\n            const resp = await props.api.getImageData(image.data.id, {\n                responseType: \"arraybuffer\"\n            })\n            const binaryImageData = Buffer.from(resp.data, \"binary\");\n            // convert binary to base64\n            const base64ImageData = binaryImageData.toString(\"base64\");\n            setInput(input => ({\n                ...input,\n                label: image.data.label,\n                phrases: image.data.phrases,\n                iterations: image.data.iterations,\n                parent: parentId,\n                encoded_image: base64ImageData,\n                enable_video: !!image.data.enable_video,\n                enable_zoom: !!image.data.enable_zoom,\n                zoom_frequency: image.data.zoom_frequency || 10,\n                zoom_scale: image.data.zoom_scale || 0.99,\n                zoom_shift_x: image.data.zoom_shift_x || 0,\n                zoom_shift_y: image.data.zoom_shift_y || 0,\n            }))\n        }\n\n        if (searchParams.parent) {\n            loadParent(searchParams.parent)\n        }\n    }, [searchParams.parent, setInput, props.api])\n\n    useEffect(() => {\n        if (searchParams.parent) {\n            return\n        }\n        const suggestion = localStorage.getItem(\"suggestion\")\n        if (suggestion) {\n            // clear suggestion\n            localStorage.setItem(\"suggestion\", \"\")\n            const phrases = suggestion.split(\"|\")\n            setInput({\n                ...input,\n                phrases: phrases,\n                label: phrases[0],\n            })\n        }\n    })\n\n    return (\n        <>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Create new image</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    <form onSubmit={onSubmit}>\n                        <div className=\"form-group\">\n                            <label>Phrases</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.phrases?.join(\"|\")}\n                                onChange={(e) => setInput({ ...input, phrases: e.target.value.split(\"|\") })}\n                                placeholder=\"Separate | phrases | like this\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Label</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.label}\n                                onChange={(e) => setInput({ ...input, label: e.target.value })}\n                                placeholder=\"Label\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Iterations</label>\n                            <input min={1} max={10000} className=\"form-control\" type=\"number\" value={input.iterations} onChange={(e) => setInput({ ...input, iterations: parseInt(e.target.value) })} />\n                        </div>\n                        {/* count */}\n                        <div className=\"form-group\">\n                            <label>Count</label>\n                            <input className=\"form-control\" type=\"number\" max={10} min={1} value={count} onChange={(e) => setCount(parseInt(e.target.value))} />\n                        </div>\n                        {/* model dropdown (faces or unset) */}\n                        {/* <div className=\"form-group\">\n                            <label>Model</label>\n                            <select className=\"form-control\" value={input.model} onChange={(e) => setInput({ ...input, model: e.target.value })}>\n                                <option value={undefined}>ImageNet</option>\n                                <option value=\"faces\">FacesHQ</option>\n                            </select>\n                        </div> */}\n                        {/* boolean enable_video (bootstrap styled checkbox) */}\n                        <div className=\"form-group\">\n                            <label style={{ marginRight: \"10px\" }}>Enable video</label>\n                            <div className=\"form-check\">\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.enable_video} onChange={(e) => setInput({ ...input, enable_video: e.target.checked })} />\n                            </div>\n                        </div>\n                        {/* boolean enable_zoom (bootstrap styled checkbox) */}\n                        {input.enable_video && <div className=\"form-group\">\n                            <label style={{ marginRight: \"10px\" }}>Enable zoom</label>\n                            <div className=\"form-check\">\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.enable_zoom} onChange={(e) => setInput({ ...input, enable_zoom: e.target.checked })} />\n                            </div>\n                        </div>}\n\n                        {/* if enable_zoom, show zoom_interval input */}\n                        {input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom interval</label>\n                            <input min={1} max={100} className=\"form-control\" type=\"number\" value={input.zoom_frequency} onChange={(e) => setInput({ ...input, zoom_frequency: parseInt(e.target.value) })} />\n                        </div>}\n                        {/* if enable_zoom, show zoom_scale input */}\n                        {input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom scale</label>\n                            <input min={0.1} max={10} step={0.01} className=\"form-control\" type=\"number\" value={input.zoom_scale} onChange={(e) => setInput({ ...input, zoom_scale: parseFloat(e.target.value) })} />\n                        </div>}\n                        {/* if enable_zoom, show zoom_shift_x input */}\n                        {input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom shift x</label>\n                            <input min={-10} max={10} className=\"form-control\" type=\"number\" value={input.zoom_shift_x} onChange={(e) => setInput({ ...input, zoom_shift_x: parseInt(e.target.value) })} />\n                        </div>}\n                        {/* if enable_zoom, show zoom_shift_y input */}\n                        {input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom shift y</label>\n                            <input min={-10} max={10} className=\"form-control\" type=\"number\" value={input.zoom_shift_y} onChange={(e) => setInput({ ...input, zoom_shift_y: parseInt(e.target.value) })} />\n                        </div>}\n\n                        {/* If encoded_image (base64 only) is set, show the image using a base64 image url*/}\n                        {input.encoded_image && <div className=\"form-group\">\n                            <h5>Initial Image</h5>\n                            <img alt=\"\" src={`data:image/jpeg;base64,${input.encoded_image}`} style={{ maxWidth: \"100%\" }} />\n                        </div>}\n                        {/* If encoded_image is set, display edit button */}\n                        <div className=\"form-group\">\n                            <label\n                                id=\"loadimage-wrapper\"\n                                className={`btn btn-sm btn-primary btn-file`}\n                                style={{ marginTop: \"8px\", marginRight: \"8px\" }}\n                            >\n                                {input.encoded_image ? \"Replace Image\" : \"Upload Image\"}\n                                <input\n                                    id=\"loadimage\"\n                                    type=\"file\"\n                                    style={{ display: \"none\" }}\n                                    onChange={e => onImageSelected(e)}\n                                />\n                            </label>\n                            <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={onEditImage}>Edit Image</button>\n\n                        </div>\n                        {/* <div className=\"form-group\">\n                                <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={onRandomizeImage}>Randomize Image</button>\n                            </div> */}\n\n                        <div className=\"form-group\">\n                            {/* Cancel button \"/\" */}\n                            <button onClick={onCancel} type=\"button\" className=\"btn btn-secondary\">Cancel</button>\n                            &nbsp;\n                            <button type=\"submit\" className=\"btn btn-primary\">Create</button>\n                        </div>\n\n                    </form>\n                </div>\n            </div>\n            {editingImage && (\n                <ImageEditor\n                    encodedImage={`${editingImage}`}\n                    onCancel={() => setEditingImage(null)}\n                    onSave={onImageEdited}\n                />\n            )}\n        </>\n    )\n\n\n}","import React, { FC, useState, useEffect } from 'react';\nimport loadImage from \"blueimp-load-image\"\n\nimport { AIBrushApi, Image, CreateImageInput, ImageStatusEnum } from \"../client/api\";\nimport { getDesignerCurrentImageId, setDesignerCurrentImageId } from \"../lib/designer\";\nimport { imageStatusToIconClass } from '../lib/iconhelper';\nimport { ImageEditor } from '../components/ImageEditor';\n\ninterface InteractiveDesignerProps {\n    api: AIBrushApi;\n    apiUrl: string;\n}\n\nexport const InteractiveDesigner: FC<InteractiveDesignerProps> = ({ api }) => {\n\n    const [image, setImage] = useState<Image | null>(null);\n    const [input, setInput] = useState<CreateImageInput>({\n        phrases: [],\n        label: \"\",\n        iterations: 100,\n        encoded_image: \"\",\n        enable_video: false,\n    });\n    const [currentImageId, setCurrentImageId] = useState<string | null>(getDesignerCurrentImageId());\n    const [editingImage, setEditingImage] = useState<string | null>(null);\n\n\n\n\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0]\n        if (!file) {\n            return\n        }\n        loadImage(file, (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n            if (!(img instanceof HTMLCanvasElement)) {\n                return\n            }\n            // convert image to base64\n            const canvas = img as HTMLCanvasElement\n            const dataUrl = canvas.toDataURL(\"image/jpeg\")\n            const base64 = dataUrl.split(\",\")[1]\n            setInput({\n                ...input,\n                encoded_image: base64\n            })\n        }, {\n            maxWidth: 512,\n            maxHeight: 512,\n            crop: true,\n            canvas: true,\n        })\n    }\n\n    const onPlay = async () => {\n        const resp = await api.createImage({\n            ...input,\n            parent: currentImageId || undefined,\n        });\n        if (resp.data) {\n            setDesignerCurrentImageId(resp.data.id);\n            setCurrentImageId(resp.data.id);\n            setImage(resp.data);\n        }\n    }\n\n    const renderPlayButton = () => {\n        const playButton = <button type=\"button\" className=\"btn btn-primary\" onClick={onPlay}>\n            {/* Play icon */}\n            <i className=\"fas fa-play\" />\n        </button>\n        if (!image || image.status === \"completed\" || image.status === \"saved\") {\n            return playButton;\n        }\n        return (\n            <button type=\"button\" className=\"btn btn-primary\" disabled={true}>\n                <i className={imageStatusToIconClass(image.status as ImageStatusEnum)}></i>&nbsp;\n            </button>\n        )\n    }\n\n    const onEditImage = () => {\n        let img = input.encoded_image;\n        if (!img) {\n            // blank 512 x 512 image with white background\n            // create a new canvas\n            const canvas = document.createElement(\"canvas\")\n            canvas.width = 512\n            canvas.height = 512\n            const ctx = canvas.getContext(\"2d\")\n            if (ctx) {\n                ctx.fillStyle = \"white\"\n                ctx.fillRect(0, 0, 512, 512)\n                img = canvas.toDataURL(\"image/jpeg\").split(\",\")[1]\n            }\n        }\n        if (img) {\n            setEditingImage(`data:image/jpeg;base64,${img}`)\n        }\n    }\n\n    const onImageEdited = (imageUri: string) => {\n        // extract base64 portion of the image uri\n        const base64 = imageUri.split(\",\")[1]\n        setInput({\n            ...input,\n            encoded_image: base64\n        })\n        setEditingImage(null)\n    }\n\n    useEffect(() => {\n\n        const loadImageData = async (id: string) => {\n            try {\n                const resp = await api.getImageData(id, {\n                    responseType: \"arraybuffer\"\n                })\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                // convert binary to base64\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                setInput(input => ({\n                    ...input,\n                    encoded_image: base64ImageData,\n                }))\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        const fetchImage = async () => {\n            if (!currentImageId) {\n                return;\n            }\n            try {\n                const resp = await api.getImage(currentImageId);\n                setImage(image => {\n                    if (resp.data) {\n                        // TODO: if updated_at has changed, load image data\n                        if (!image || image.updated_at !== resp.data.updated_at) {\n                            loadImageData(currentImageId);\n                            setInput(input => ({\n                                ...input,\n                                phrases: resp.data.phrases,\n                                label: resp.data.label,\n                                iterations: resp.data.iterations,\n                                enable_video: resp.data.enable_video,\n                            }))\n                            return resp.data;\n                        }\n                    }\n                    return image;\n                });\n            } catch (err) {\n                console.error(err)\n                // clear current image id\n                setCurrentImageId(null);\n                // clear image id in local storage\n                setDesignerCurrentImageId(null);\n            }\n        }\n\n        fetchImage();\n        const timer = setInterval(fetchImage, 2000);\n        return () => clearInterval(timer);\n    }, [currentImageId, api])\n\n    const inprogress = (image && (image.status === \"pending\" || image.status === \"processing\")) || false;\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Interactive Designer</h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    <form onSubmit={e => e.preventDefault()}>\n                        <div className=\"form-group\">\n                            <label>Phrases</label>\n                            <input\n                                disabled={inprogress}\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.phrases?.join(\"|\")}\n                                onChange={(e) => setInput({ ...input, phrases: e.target.value.split(\"|\") })}\n                                placeholder=\"Separate | phrases | like this\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Label</label>\n                            <input\n                                disabled={inprogress}\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.label}\n                                onChange={(e) => setInput({ ...input, label: e.target.value })}\n                                placeholder=\"Label\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Iterations</label>\n                            <input disabled={inprogress} min={1} max={1000} className=\"form-control\" type=\"number\" value={input.iterations} onChange={(e) => setInput({ ...input, iterations: parseInt(e.target.value) })} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label style={{ marginRight: \"10px\" }}>Enable video</label>\n                            <div className=\"form-check\">\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.enable_video} onChange={(e) => setInput({ ...input, enable_video: e.target.checked })} />\n                            </div>\n                        </div>\n\n                        {/* If encoded_image (base64 only) is set, show the image using a base64 image url*/}\n                        {input.encoded_image && <div className=\"form-group\">\n                            <h5>Image</h5>\n                            <img alt=\"\" src={`data:image/jpeg;base64,${input.encoded_image}`} style={{ maxWidth: \"100%\" }} />\n                        </div>}\n                        <div className=\"form-group\">\n                            {image && image.status === \"processing\" && <div className=\"progress\">\n                                <div className=\"progress-bar\" role=\"progressbar\" style={{ width: `${(image.current_iterations * 1.0) / image.iterations * 100}%` }}>\n                                </div>\n                            </div>}\n                        </div>\n                        {/* If encoded_image is set, display edit button */}\n                        <div className=\"form-group\">\n                            <label\n                                id=\"loadimage-wrapper\"\n                                className={`btn btn-primary btn-file`}\n                                style={{ marginTop: \"8px\" }}\n                            >\n                                {/* Browse font-awesome icon */}\n                                <i className=\"fas fa-upload\" />\n\n                                <input\n                                    disabled={inprogress}\n                                    id=\"loadimage\"\n                                    type=\"file\"\n                                    style={{ display: \"none\" }}\n                                    onChange={e => onImageSelected(e)}\n                                />\n                            </label>&nbsp;\n                            {renderPlayButton()}&nbsp;\n                            <button disabled={inprogress} type=\"button\" className=\"btn btn-primary\" onClick={onEditImage}>\n                                {/* Edit icon */}\n                                <i className=\"fas fa-edit\" />\n                            </button>\n                        </div>\n\n\n                    </form>\n                </div>\n            </div>\n            {editingImage && (\n                <ImageEditor\n                    encodedImage={`${editingImage}`}\n                    onCancel={() => setEditingImage(null)}\n                    onSave={onImageEdited}\n                />\n            )}\n        </>\n    )\n}\n"],"sourceRoot":""}
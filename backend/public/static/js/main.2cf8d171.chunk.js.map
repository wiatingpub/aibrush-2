{"version":3,"sources":["client/api.ts","client/base.ts","client/common.ts","pages/Login.tsx","pages/MainMenu.tsx","lib/iconhelper.ts","components/ImageThumbnail.tsx","components/ImagePopup.tsx","components/SvgPopup.tsx","components/LoadMoreImages.tsx","pages/Images.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","lib/sleep.ts","components/SuggestionSeedTile.tsx","components/ImageSearchPopup.tsx","components/SuggestionSeedModal.tsx","components/SuggestionJobPopup.tsx","components/ViewSuggestionSeedModal.tsx","pages/Suggestions.tsx","pages/WorkerConfig.tsx","pages/Admin.tsx","lib/workflow.tsx","pages/CreateWorkflow.tsx","pages/Workflows.tsx","pages/WorkflowDetail.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","pages/CreateImage.tsx","components/MaskEditor.tsx","components/Uncropper.tsx"],"names":["CreateImageInputHeightEnum","CreateImageInputWidthEnum","CreateServiceAccountInputTypeEnum","HealthcheckStatusEnum","ImageStatusEnum","ImageWidthEnum","ImageHeightEnum","ImageUncropOffsetXEnum","ImageUncropOffsetYEnum","SuggestionsJobStatusEnum","SvgJobStatusEnum","UpdateImageInputStatusEnum","UpdateSuggestionsJobInputStatusEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","name","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","createImage","createImageInput","a","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","data","createInviteCode","createServiceAccount","createServiceAccountInput","createSuggestionSeed","suggestionSeedInput","createSuggestionsJob","createSuggestionsJobInput","createSvgJob","createSvgJobInput","createWorkflow","createWorkflowInput","createWorkflowEvent","workflowId","createWorkflowEventInput","localVarPath","encodeURIComponent","String","deleteImage","id","deleteSuggestionSeed","deleteSuggestionsJob","deleteSvgJob","deleteWorkflow","getAssetsUrl","getFeatures","getImage","getImageData","getMaskData","getNpyData","getSuggestionSeed","getSuggestionsJob","getSvgJob","getSvgJobResult","getThumbnailData","getVideoData","getWorkflow","getWorkflowEvents","getWorkflows","healthcheck","isAdmin","listImages","cursor","limit","direction","listSuggestionSeeds","listSuggestionsJobs","login","loginInput","processImage","processImageInput","processSuggestionsJob","processSvgJob","processWorkflow","refresh","refreshLoginInput","updateImage","updateImageInput","updateSuggestionSeed","updateSuggestionsJob","updateSuggestionsJobInput","updateSvgJob","updateSvgJobInput","updateVideoData","body","updateWorkflow","updateWorkflowInput","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","then","Login","props","useState","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","err","setErr","window","location","inviteCode","qs","parse","substring","onLogin","match","client","invite_code","console","error","onVerify","result","className","style","marginTop","href","htmlFor","type","placeholder","onChange","e","target","onClick","preventDefault","aria-describedby","MainMenu","to","imageStatusToIconClass","status","ImageThumbnail","assetsUrl","apiUrl","image","onDelete","onFork","onSvg","onWorkflow","src","updated_at","fontSize","label","length","useEffect","img","document","getElementById","onerror","t","setTimeout","clearTimeout","padding","width","margin","alt","score","toFixed","role","current_iterations","iterations","marginRight","enable_video","open","ImagePopup","onClose","useRef","current","Modal","show","onHide","size","Header","closeButton","Title","Body","ref","maxWidth","maxHeight","display","marginLeft","height","phrases","join","model","negative_phrases","negative_score","enable_zoom","zoom_frequency","zoom_scale","zoom_shift_x","zoom_shift_y","glid_3_xl_skip_iterations","glid_3_xl_clip_guidance","glid_3_xl_clip_guidance_scale","SvgPopup","api","svgData","setSvgData","svgImageUri","setSvgImageUri","svgJobId","setSvgJobId","onGenerateSvg","image_id","resp","handle","pollSvg","Completed","blob","Blob","createObjectURL","setInterval","clearInterval","Footer","disabled","saveAs","LoadMoreImages","onLoadMore","isLoading","ImagesPage","history","useHistory","images","setImages","selectedImage","setSelectedImage","loadingMore","setLoadingMore","generatingSvg","setGeneratingSvg","onForkImage","push","moment","add","valueOf","loadImages","pollImages","reduce","max","Math","newImages","filter","findIndex","i","updatedImages","map","updatedImage","find","sort","sortImages","timerHandle","onDeleteImage","b","parent","aScore","bScore","minUpdatedAt","forEach","min","TokenRefresher","onCredentialsRefreshed","credentials","interval","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","catch","sleep","ms","Promise","resolve","SuggestionSeedTile","suggestionSeed","onView","onGenerate","onEdit","description","ImageSearchPopup","filterOut","onSubmit","setSearch","filteredImages","setFilteredImages","selectedImages","setSelectedImages","includes","searchValue","toLowerCase","dedup","trim","phrase","event","checked","onImageSelected","Object","keys","selected","alert","SuggestionSeedModal","editingSuggestionSeed","onCreate","onUpdate","items","input","setInput","searchingImages","setSearchingImages","required","rows","split","SuggestionJobPopup","suggestionJobId","suggestionSeedId","onSaveSuggestion","onRetry","onGenerateImage","setSuggestionSeed","suggestionJob","setSuggestionJob","savedSuggestions","setSavedSuggestions","loadSuggestionJob","loadSuggestionSeed","onBackdropClick","index","backgroundColor","borderRadius","saveSuggestion","ViewSuggestionSeedModal","SuggestionsPage","suggestionSeeds","setSuggestionSeeds","creatingSuggestionSeed","setCreatingSuggestionSeed","setEditingSuggestionSeed","viewingSuggestionSeed","setViewingSuggestionSeed","selectedSuggestionSeedId","setSelectedSuggestionSeedId","runningSuggestionJobId","setRunningSuggestionJobId","seed_id","onCreateSuggestionSeed","onEditSuggestionSeed","onUpdateSuggestionSeed","suggestion","seed","onRetryGenerateSuggestions","onDeleteSuggestionSeed","confirm","s","localStorage","setItem","onViewSuggestionSeed","loadSuggestionSeeds","WorkerConfigPage","Private","setType","setIsAdmin","download","creds","is_admin","Admin","links","setLinks","onGenerateLink","link","toInputJSX","configField","setValue","onHandleInputChange","parseFloat","prevState","enum","workflowSchemas","display_name","workflow_type","config_fields","default","CreateWorkflow","workflowSchema","setWorkflowSchema","setLabel","executionDelay","setExecutionDelay","config","setConfig","setCreating","setParent","execution_delay","config_json","data_json","is_active","state","parseInt","workflowType","schema","cfg","goBack","Workflows","workflows","setWorkflows","loadWorkflows","onDeleteWorkflow","workflow","onDeactivateWorkflow","onActivateWorkflow","onViewDetail","WorkflowDetail","setWorkflow","generationsRemaining","setGenerationsRemaining","useParams","loadWorkflow","loadDisplayData","displayImages","display_images","remaining_generations","httpClient","getItem","updateHttpClient","accessToken","defaults","common","App","setCredentials","setAssetsUrl","features","setFeatures","init","log","assets_url","storedCredentials","removeItem","path","exact","CreateImage","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","encoded_image","encoded_npy","encoded_mask","editingMask","seteditingMask","uncroppingImage","setUncroppingImage","count","setCount","creating","canvasRef","file","files","loadImage","HTMLCanvasElement","base64","toDataURL","renderInitImage","canvas","ctx","getContext","Image","onload","globalAlpha","drawImage","mask","loadParent","parentId","imageDataPromise","responseType","npyDataPromise","imageResp","binaryImageData","Buffer","from","base64ImageData","base64NpyData","npyResp","binaryNpyData","step","newInput","onChangeModel","encodedImage","onCancel","onSave","imageUri","maskUri","offsetX","offsetY","imageBase64","maskBase64","uncrop_offset_x","uncrop_offset_y","MaskEditor","setImage","offscreenCanvas","setOffscreenCanvas","setCtx","brushSize","setBrushSize","brushColor","setBrushColor","isDrawing","setIsDrawing","lastX","setLastX","lastY","setLastY","createElement","fillStyle","fillRect","renderCtx","drawDot","getMousePos","rect","getBoundingClientRect","scaleX","scaleY","nativeEvent","MouseEvent","evt","x","clientX","left","y","clientY","top","TouchEvent","touches","handleMouseDown","mousePos","beginPath","arc","PI","fill","handleMouseMove","stopPropagation","moveTo","lineTo","strokeStyle","lineWidth","lineCap","stroke","handleMouseUp","handleBrushColorChange","newColor","handleCancel","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","aria-label","Uncropper","imageCanvas","setImageCanvas","maskCanvas","setMaskCanvas","setWidth","setHeight","setOffsetX","setOffsetY","createOffscreenCanvas","renderMask","renderImage","newWidth","newHeight","newOffsetX","newOffsetY","maskData","imageData"],"mappings":"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","file":"static/js/main.2cf8d171.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    negative_phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_video?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_skip_iterations?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_clip_guidance?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_clip_guidance_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    height?: CreateImageInputHeightEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    width?: CreateImageInputWidthEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    uncrop_offset_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    uncrop_offset_y?: number;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputHeightEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputWidthEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n\n/**\n * \n * @export\n * @interface CreateServiceAccountInput\n */\nexport interface CreateServiceAccountInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateServiceAccountInput\n     */\n    type?: CreateServiceAccountInputTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateServiceAccountInputTypeEnum {\n    Public = 'public',\n    Private = 'private'\n}\n\n/**\n * \n * @export\n * @interface CreateSuggestionsJobInput\n */\nexport interface CreateSuggestionsJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateSuggestionsJobInput\n     */\n    seed_id?: string;\n}\n/**\n * \n * @export\n * @interface CreateSvgJobInput\n */\nexport interface CreateSvgJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateSvgJobInput\n     */\n    image_id?: string;\n}\n/**\n * \n * @export\n * @interface CreateWorkflowEventInput\n */\nexport interface CreateWorkflowEventInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowEventInput\n     */\n    workflow_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowEventInput\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface CreateWorkflowInput\n */\nexport interface CreateWorkflowInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    workflow_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    config_json: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    data_json: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateWorkflowInput\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    state: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateWorkflowInput\n     */\n    execution_delay: number;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    phrases: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    negative_phrases: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    current_iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    status: ImageStatusEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_video: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    glid_3_xl_skip_iterations?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    glid_3_xl_clip_guidance?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    glid_3_xl_clip_guidance_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    width?: ImageWidthEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    height?: ImageHeightEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    uncrop_offset_x?: ImageUncropOffsetXEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    uncrop_offset_y?: ImageUncropOffsetYEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageWidthEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageHeightEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageUncropOffsetXEnum {\n    NUMBER_MINUS_896 = -896,\n    NUMBER_MINUS_768 = -768,\n    NUMBER_MINUS_640 = -640,\n    NUMBER_MINUS_512 = -512,\n    NUMBER_MINUS_384 = -384,\n    NUMBER_MINUS_256 = -256,\n    NUMBER_MINUS_128 = -128,\n    NUMBER_0 = 0,\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageUncropOffsetYEnum {\n    NUMBER_MINUS_896 = -896,\n    NUMBER_MINUS_768 = -768,\n    NUMBER_MINUS_640 = -640,\n    NUMBER_MINUS_512 = -512,\n    NUMBER_MINUS_384 = -384,\n    NUMBER_MINUS_256 = -256,\n    NUMBER_MINUS_128 = -128,\n    NUMBER_0 = 0,\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896\n}\n\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface ProcessImageInput\n */\nexport interface ProcessImageInput {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ProcessImageInput\n     */\n    zoom_supported: boolean;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface SuggestionSeed\n */\nexport interface SuggestionSeed {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    description: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionSeed\n     */\n    items: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    created_by: string;\n}\n/**\n * \n * @export\n * @interface SuggestionSeedInput\n */\nexport interface SuggestionSeedInput {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeedInput\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeedInput\n     */\n    description?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionSeedInput\n     */\n    items: Array<string>;\n}\n/**\n * \n * @export\n * @interface SuggestionSeedList\n */\nexport interface SuggestionSeedList {\n    /**\n     * \n     * @type {Array<SuggestionSeed>}\n     * @memberof SuggestionSeedList\n     */\n    suggestionSeeds: Array<SuggestionSeed>;\n}\n/**\n * \n * @export\n * @interface SuggestionsJob\n */\nexport interface SuggestionsJob {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SuggestionsJob\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SuggestionsJob\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    seed_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    status: SuggestionsJobStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionsJob\n     */\n    result: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SuggestionsJobStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface SuggestionsJobList\n */\nexport interface SuggestionsJobList {\n    /**\n     * \n     * @type {Array<SuggestionsJob>}\n     * @memberof SuggestionsJobList\n     */\n    suggestionsJobs?: Array<SuggestionsJob>;\n}\n/**\n * \n * @export\n * @interface SvgJob\n */\nexport interface SvgJob {\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SvgJob\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SvgJob\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    image_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    status: SvgJobStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SvgJobStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed'\n}\n\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    current_iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    status?: UpdateImageInputStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface UpdateSuggestionsJobInput\n */\nexport interface UpdateSuggestionsJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateSuggestionsJobInput\n     */\n    status?: UpdateSuggestionsJobInputStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateSuggestionsJobInput\n     */\n    result?: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateSuggestionsJobInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface UpdateSvgJobInput\n */\nexport interface UpdateSvgJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateSvgJobInput\n     */\n    result?: string;\n}\n/**\n * \n * @export\n * @interface UpdateWorkflowInput\n */\nexport interface UpdateWorkflowInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    data_json?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    config_json?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkflowInput\n     */\n    is_active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    state?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkflowInput\n     */\n    execution_delay?: number;\n}\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Workflow\n */\nexport interface Workflow {\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    created_by: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    workflow_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    config_json: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    data_json: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Workflow\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Workflow\n     */\n    execution_delay: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Workflow\n     */\n    next_execution: number;\n}\n/**\n * \n * @export\n * @interface WorkflowEvent\n */\nexport interface WorkflowEvent {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowEvent\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowEvent\n     */\n    workflow_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof WorkflowEvent\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowEvent\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface WorkflowEventList\n */\nexport interface WorkflowEventList {\n    /**\n     * \n     * @type {Array<WorkflowEvent>}\n     * @memberof WorkflowEventList\n     */\n    workflowEvents: Array<WorkflowEvent>;\n}\n/**\n * \n * @export\n * @interface WorkflowList\n */\nexport interface WorkflowList {\n    /**\n     * \n     * @type {Array<Workflow>}\n     * @memberof WorkflowList\n     */\n    workflows: Array<Workflow>;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (createServiceAccountInput?: CreateServiceAccountInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/service-accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createServiceAccountInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionSeed: async (suggestionSeedInput?: SuggestionSeedInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestion-seeds`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(suggestionSeedInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionsJob: async (createSuggestionsJobInput?: CreateSuggestionsJobInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestions-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createSuggestionsJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new svg job\n         * @param {CreateSvgJobInput} [createSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSvgJob: async (createSvgJobInput?: CreateSvgJobInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/svg-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createSvgJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new workflow\n         * @param {CreateWorkflowInput} [createWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflow: async (createWorkflowInput?: CreateWorkflowInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/workflows`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new workflow event\n         * @param {string} workflowId \n         * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflowEvent: async (workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('createWorkflowEvent', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}/events`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowEventInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionSeed: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionsJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a svg job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSvgJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSvgJob', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkflow: async (workflowId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('deleteWorkflow', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNpyData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getNpyData', 'id', id)\n            const localVarPath = `/api/images/{id}.npy`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionSeed: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionsJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSvgJob', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJobResult: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSvgJobResult', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}/result.svg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getVideoData', 'id', id)\n            const localVarPath = `/api/images/{id}.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflow: async (workflowId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflow', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow events\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowEvents: async (workflowId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowEvents', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}/events`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflows\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflows: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/workflows`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, limit?: number, direction?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionSeeds: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestion-seeds`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionsJobs: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestions-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage: async (processImageInput?: ProcessImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-image`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSuggestionsJob: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-suggestion-job`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Process a svg job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSvgJob: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-svg-job`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending workflow and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processWorkflow: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-workflow`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionSeed: async (id: string, suggestionSeedInput?: SuggestionSeedInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(suggestionSeedInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionsJob: async (id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateSuggestionsJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a svg job\n         * @param {string} id \n         * @param {UpdateSvgJobInput} [updateSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSvgJob: async (id: string, updateSvgJobInput?: UpdateSvgJobInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSvgJob', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateSvgJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateVideoData', 'id', id)\n            const localVarPath = `/api/images/{id}.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'video/mp4';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the workflow\n         * @param {string} workflowId \n         * @param {UpdateWorkflowInput} [updateWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkflow: async (workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('updateWorkflow', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkflowInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceAccount(createServiceAccountInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSuggestionSeed(suggestionSeedInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSuggestionsJob(createSuggestionsJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new svg job\n         * @param {CreateSvgJobInput} [createSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSvgJob(createSvgJobInput?: CreateSvgJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSvgJob(createSvgJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new workflow\n         * @param {CreateWorkflowInput} [createWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkflow(createWorkflowInput?: CreateWorkflowInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflow(createWorkflowInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new workflow event\n         * @param {string} workflowId \n         * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkflowEvent(workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflowEvent(workflowId, createWorkflowEventInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSuggestionSeed(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSuggestionSeed(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSuggestionsJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSuggestionsJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a svg job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSvgJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSvgJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorkflow(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflow(workflowId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNpyData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNpyData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSuggestionSeed(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuggestionSeed(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSuggestionsJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuggestionsJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSvgJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSvgJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSvgJobResult(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSvgJobResult(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getVideoData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflow(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflow(workflowId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the workflow events\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowEvents(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowEventList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowEvents(workflowId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the workflows\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflows(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflows(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, limit, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSuggestionSeeds(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeedList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestionSeeds(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSuggestionsJobs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJobList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestionsJobs(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processImage(processImageInput?: ProcessImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processImage(processImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processSuggestionsJob(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processSuggestionsJob(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Process a svg job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processSvgJob(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processSvgJob(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending workflow and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processWorkflow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processWorkflow(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSuggestionSeed(id, suggestionSeedInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSuggestionsJob(id, updateSuggestionsJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a svg job\n         * @param {string} id \n         * @param {UpdateSvgJobInput} [updateSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSvgJob(id: string, updateSvgJobInput?: UpdateSvgJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSvgJob(id, updateSvgJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateVideoData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideoData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the workflow\n         * @param {string} workflowId \n         * @param {UpdateWorkflowInput} [updateWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkflow(workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflow(workflowId, updateWorkflowInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.createServiceAccount(createServiceAccountInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.createSuggestionSeed(suggestionSeedInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.createSuggestionsJob(createSuggestionsJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new svg job\n         * @param {CreateSvgJobInput} [createSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSvgJob(createSvgJobInput?: CreateSvgJobInput, options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.createSvgJob(createSvgJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new workflow\n         * @param {CreateWorkflowInput} [createWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflow(createWorkflowInput?: CreateWorkflowInput, options?: any): AxiosPromise<Workflow> {\n            return localVarFp.createWorkflow(createWorkflowInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new workflow event\n         * @param {string} workflowId \n         * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflowEvent(workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options?: any): AxiosPromise<WorkflowEvent> {\n            return localVarFp.createWorkflowEvent(workflowId, createWorkflowEventInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionSeed(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSuggestionSeed(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionsJob(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSuggestionsJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a svg job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSvgJob(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSvgJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkflow(workflowId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteWorkflow(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNpyData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getNpyData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionSeed(id: string, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.getSuggestionSeed(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionsJob(id: string, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.getSuggestionsJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJob(id: string, options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.getSvgJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJobResult(id: string, options?: any): AxiosPromise<string> {\n            return localVarFp.getSvgJobResult(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getVideoData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflow(workflowId: string, options?: any): AxiosPromise<Workflow> {\n            return localVarFp.getWorkflow(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow events\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowEvents(workflowId: string, options?: any): AxiosPromise<WorkflowEventList> {\n            return localVarFp.getWorkflowEvents(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflows\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflows(options?: any): AxiosPromise<WorkflowList> {\n            return localVarFp.getWorkflows(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, limit, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionSeeds(options?: any): AxiosPromise<SuggestionSeedList> {\n            return localVarFp.listSuggestionSeeds(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionsJobs(options?: any): AxiosPromise<SuggestionsJobList> {\n            return localVarFp.listSuggestionsJobs(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage(processImageInput?: ProcessImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.processImage(processImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSuggestionsJob(options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.processSuggestionsJob(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Process a svg job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSvgJob(options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.processSvgJob(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending workflow and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processWorkflow(options?: any): AxiosPromise<Workflow> {\n            return localVarFp.processWorkflow(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.updateSuggestionSeed(id, suggestionSeedInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.updateSuggestionsJob(id, updateSuggestionsJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a svg job\n         * @param {string} id \n         * @param {UpdateSvgJobInput} [updateSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSvgJob(id: string, updateSvgJobInput?: UpdateSvgJobInput, options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.updateSvgJob(id, updateSvgJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.updateVideoData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the workflow\n         * @param {string} workflowId \n         * @param {UpdateWorkflowInput} [updateWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkflow(workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options?: any): AxiosPromise<Workflow> {\n            return localVarFp.updateWorkflow(workflowId, updateWorkflowInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a service account\n     * @param {CreateServiceAccountInput} [createServiceAccountInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createServiceAccount(createServiceAccountInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new suggestion seed\n     * @param {SuggestionSeedInput} [suggestionSeedInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSuggestionSeed(suggestionSeedInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new suggestions job\n     * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSuggestionsJob(createSuggestionsJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new svg job\n     * @param {CreateSvgJobInput} [createSvgJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSvgJob(createSvgJobInput?: CreateSvgJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSvgJob(createSvgJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new workflow\n     * @param {CreateWorkflowInput} [createWorkflowInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createWorkflow(createWorkflowInput?: CreateWorkflowInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createWorkflow(createWorkflowInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new workflow event\n     * @param {string} workflowId \n     * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createWorkflowEvent(workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createWorkflowEvent(workflowId, createWorkflowEventInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a suggestion seed\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSuggestionSeed(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSuggestionSeed(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a suggestions job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSuggestionsJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSuggestionsJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a svg job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSvgJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSvgJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete the workflow\n     * @param {string} workflowId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteWorkflow(workflowId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteWorkflow(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getNpyData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getNpyData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a suggestion seed by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSuggestionSeed(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSuggestionSeed(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a suggestions job by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSuggestionsJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSuggestionsJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a svg job by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSvgJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSvgJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a svg job by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSvgJobResult(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSvgJobResult(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary video data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getVideoData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getVideoData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow\n     * @param {string} workflowId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkflow(workflowId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkflow(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow events\n     * @param {string} workflowId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkflowEvents(workflowId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkflowEvents(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflows\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkflows(options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkflows(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, limit, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of suggestion seeds\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listSuggestionSeeds(options?: any) {\n        return AIBrushApiFp(this.configuration).listSuggestionSeeds(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of suggestions jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listSuggestionsJobs(options?: any) {\n        return AIBrushApiFp(this.configuration).listSuggestionsJobs(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending image and set its status to processing.\n     * @param {ProcessImageInput} [processImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processImage(processImageInput?: ProcessImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).processImage(processImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Process a suggestions job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processSuggestionsJob(options?: any) {\n        return AIBrushApiFp(this.configuration).processSuggestionsJob(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Process a svg job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processSvgJob(options?: any) {\n        return AIBrushApiFp(this.configuration).processSvgJob(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending workflow and set its status to processing.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processWorkflow(options?: any) {\n        return AIBrushApiFp(this.configuration).processWorkflow(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a suggestion seed\n     * @param {string} id \n     * @param {SuggestionSeedInput} [suggestionSeedInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSuggestionSeed(id, suggestionSeedInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a suggestions job\n     * @param {string} id \n     * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSuggestionsJob(id, updateSuggestionsJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a svg job\n     * @param {string} id \n     * @param {UpdateSvgJobInput} [updateSvgJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSvgJob(id: string, updateSvgJobInput?: UpdateSvgJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSvgJob(id, updateSvgJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the video data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateVideoData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).updateVideoData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the workflow\n     * @param {string} workflowId \n     * @param {UpdateWorkflowInput} [updateWorkflowInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateWorkflow(workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateWorkflow(workflowId, updateWorkflowInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://aibrush.ngrok.io\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","// Login react component with hooks\nimport React, { useState, FC } from 'react';\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\ninterface LoginProps {\n    httpClient: axios.AxiosInstance;\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = props => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    // check query string for invite_code\n    const query = window.location.search;\n    const queryParams = qs.parse(query.substring(1));\n    const inviteCode = queryParams[\"invite_code\"];\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n        \n        try {\n            await props.client.login({\n                email: email,\n                invite_code: inviteCode as string,\n            })\n            setEmailSubmitted(true);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not login\");\n        }\n    }\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err)\n            setErr(\"Failed to verify code\");\n        }\n    }\n\n    // bootstrap login form\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\" style={{marginTop: \"50px\"}}>\n                    <p className=\"text-info\">\n                        Log in below using your email. After submitting, you will be prompted for a login code. Check your email inbox for the code and enter it to log in.\n                    </p>\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">Login</h5>\n                            {/* Display error if one is set */}\n                            {/* Use <p class=\"text-danger\" */}\n                            {err && <p className=\"text-danger\">{err}</p>}\n                            {err && <p className=\"text-info\">If you don't have an account yet, request one by sending an email to <a href=\"mailto:admin@aibrush.art\">admin@aibrush.art</a></p>}\n                            {/* If email submitted, show verify code form*/}\n                            {emailSubmitted && <div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"verifyCode\">Verify Code</label>\n                                        <input type=\"text\" className=\"form-control\" id=\"verifyCode\" placeholder=\"Verification Code\" value={code} onChange={(e) => setCode(e.target.value)} />\n                                    </div>\n                                    {/* Cancel verification and go back to email */}\n                                    <button className=\"btn btn-secondary\" onClick={() => setEmailSubmitted(false)}>Cancel</button>&nbsp;\n                                    {/* Verify code */}\n                                    <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}>Verify</button>\n                                </div>\n                            }\n                            {/* Else, show login form */}\n                            {!emailSubmitted && <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n                                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                                </div>\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                    e.preventDefault();\n                                    onLogin();\n                                }}>Login</button>\n                            </div>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}","// MainMenu react component with a list of buttons aligned verically\n// Buttons are \"Create a new image\", \"Upload an image\", and \"My Stuff\"\n// use bootstrap classes\n\nimport React, { FC } from 'react';\nimport { Link } from \"react-router-dom\"\n\ninterface Props {\n    isAdmin: boolean\n}\n\nexport const MainMenu: FC<Props> = ({ isAdmin }) => {\n    return (\n        <>\n            {/* Header: Welcome to AIBrush! */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Welcome to AIBrush!</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className=\"btn-group-vertical\">\n                        <Link to=\"/create-image\" className=\"btn btn-primary\">\n                            {/* font awesome image icon */}\n                            <i className=\"fas fa-image\" />&nbsp;\n                            Create a new image\n                        </Link>\n                        <Link to=\"/images\" className=\"btn btn-primary\">\n                            {/* my items */}\n                            <i className=\"fas fa-folder-open\" />&nbsp;\n                            My Images\n                        </Link>\n                        {/* /suggestions */}\n                        <Link to=\"/suggestions\" className=\"btn btn-primary\">\n                            {/* font awesome comments icon */}\n                            <i className=\"fas fa-comments\" />&nbsp;\n                            Suggestions\n                        </Link>\n                        <Link to=\"/workflows\" className=\"btn btn-primary\">\n                            {/* font awesome icon for workflows */}\n                            <i className=\"fas fa-cogs\" />&nbsp;\n                            Workflows\n                        </Link>\n                        {/* /worker-config */}\n                        <Link to=\"/worker-config\" className=\"btn btn-primary\">\n                            {/* font awesome wrench icon */}\n                            <i className=\"fas fa-wrench\" />&nbsp;\n                            Worker Config\n                        </Link>\n                        {\n                            isAdmin &&\n                            <>\n                                <Link to=\"/admin\" className=\"btn btn-primary\">\n                                    {/* font awesome wrench icon */}\n                                    <i className=\"fas fa-wrench\" />&nbsp;\n                                    Admin\n                                </Link>\n\n                            </>\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}","import { ImageStatusEnum, SuggestionsJobStatusEnum } from \"../client/api\";\n\n// map from image status to font awesome class\n// possible values: Pending, Processing, Completed, Saved\nexport const imageStatusToIconClass = (status: ImageStatusEnum | SuggestionsJobStatusEnum) => {\n    switch (status) {\n        case \"pending\":\n            return \"fas fa-hourglass-start\";\n        case \"processing\":\n            return \"fas fa-cog fa-spin\";\n        case \"completed\":\n            return \"fas fa-check\";\n        case \"saved\":\n            return \"fas fa-save\";\n        default:\n            return \"\";\n    }\n}","// Image Thumnail Component\nimport React, { FC, useEffect } from \"react\";\nimport { Image, ImageStatusEnum } from \"../client/api\";\nimport { imageStatusToIconClass } from \"../lib/iconhelper\";\n\ninterface ImageThumbnailProps {\n    apiUrl: string;\n    assetsUrl: string;\n    image: Image;\n    onClick?: (image: Image) => void;\n    onDelete?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n    onSvg?: (image: Image) => void;\n    onWorkflow?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<ImageThumbnailProps> = ({ assetsUrl, apiUrl, image, onClick, onDelete, onFork, onSvg, onWorkflow }) => {\n\n    const src = `${assetsUrl}/${image.id}.thumbnail.jpg?updated_at=${image.updated_at}`;\n    let fontSize = \"1.5em\";\n    // shrink the font size depending on the length of image.label\n    if (image.label.length > 20) {\n        fontSize = \"1em\";\n    } else if (image.label.length > 15) {\n        fontSize = \"1.2em\";\n    } else if (image.label.length > 10) {\n        fontSize = \"1.4em\";\n    }\n\n    useEffect(() => {\n        const img = document.getElementById(`image-${image.id}`) as HTMLImageElement;\n        img.onerror = () => {\n            img.src = \"/images/default.jpg\";\n        }\n        // this seems wasteful, but it helps deal with S3 eventual consistency\n        const t = setTimeout(() => {\n            img.src = `${src}&retry`\n        }, 3000);\n        return () => clearTimeout(t);\n    })\n\n    return (\n        <div className=\"card\" style={{ padding: \"10px\", width: \"200px\", margin: \"10px\" }}>\n            <img\n                style={{ cursor: \"pointer\" }}\n                id={`image-${image.id}`}\n                className=\"card-img-top\"\n                src={src}\n                alt={image.label} onClick={() => onClick && onClick(image)} />\n            <div className=\"card-body\">\n                <div>\n                    {/* label */}\n                    <h5 className=\"card-title\" style={{fontSize: fontSize}}>\n                        {image.label}\n                    </h5>\n\n                    <p className=\"card-text\">\n                        {/* icon for image status */}\n                        <i className={imageStatusToIconClass(image.status as ImageStatusEnum)}></i>&nbsp;\n                        {image.status}\n                    </p>\n                    {/* if the image score > 0, display it */}\n                    {image.score > 0 && <p className=\"card-text\">Score: {image.score.toFixed(5)}</p>}\n                    {/* if status is \"processing\" then show bootstrap progress bar for image.current_iterations / image.iterations */}\n                    {image.status === \"processing\" && <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: `${(image.current_iterations * 1.0) / image.iterations * 100}%` }}>\n                        </div>\n                    </div>}\n                </div>\n\n                <hr />\n                {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => onDelete && onDelete(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-trash-alt\"></i>\n                </button>}\n                {onFork && (image.status === \"completed\" || image.status === \"saved\") && <button className=\"btn btn-secondary btn-sm\" onClick={() => onFork && onFork(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-code-branch\"></i>\n                </button>}\n                {(image.status === \"completed\" || image.status === \"saved\") && image.enable_video && <button className=\"btn btn-secondary btn-sm\" onClick={() => window.open(`${apiUrl}/api/images/${image.id}.mp4`)} style={{marginRight: \"5px\", marginTop: \"5px\"}}>\n                    <i className=\"fas fa-video\"></i>\n                </button>}\n                {onSvg && (image.status === \"completed\" || image.status === \"saved\") && <button className=\"btn btn-secondary btn-sm\" onClick={() => onSvg && onSvg(image)} style={{marginRight: \"5px\", marginTop: \"5px\"}}>\n                    <i className=\"fas fa-file-code\"></i>\n                </button>}\n                {onWorkflow && (image.status === \"completed\" || image.status === \"saved\") && <button className=\"btn btn-secondary btn-sm\" onClick={() => onWorkflow && onWorkflow(image)} style={{marginRight: \"5px\", marginTop: \"5px\"}}>\n                    <i className=\"fas fa-cogs\"></i>\n                </button>}\n            </div>\n        </div>\n    );\n}","import React, { FC, useEffect, useRef } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface ImagePopupProps {\n    apiUrl: string;\n    assetsUrl: string;\n    image: Image;\n    onClose: () => void;\n    onDelete?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({ apiUrl, assetsUrl, image, onClose, onDelete, onFork }) => {\n\n    const img = useRef<HTMLImageElement>(null);\n    const src = `${assetsUrl}/${image.id}.image.jpg?updated_at=${image.updated_at}`;\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.jpg\"\n        }\n    }, [img])\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>{image.label}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img ref={img} style={{ maxWidth: \"100%\", maxHeight: \"1024px\", display: \"block\", marginLeft: \"auto\", marginRight: \"auto\" }} id={`image-popup-${image.id}`} src={src} alt={image.label} />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <p>Status: {image.status}</p>\n                        <p>Width: {image.width}</p>\n                        <p>Height: {image.height}</p>\n                        <p>Iterations: {image.iterations}</p>\n                        <p>Phrases: {image.phrases.join(\", \")}</p>\n                        {/* show negative phrases if model is glid_3_xl */}\n                        {image.model === \"glid_3_xl\" && <p>Negative phrases: {image.negative_phrases.join(\", \")}</p>}\n                        {/* score */}\n                        <p>Score: {image.score.toFixed(5)}</p>\n                        <p>Negative Score: {image.negative_score.toFixed(5)}</p>\n                        <p>Model: {image.model}</p>\n                        {/* enable_video */}\n                        {image.model == \"vqgan_imagenet_f16_16384\" && <p>Enable Video: {image.enable_video ? \"Yes\" : \"No\"}</p>}\n                        {/* enable_zoom */}\n                        {image.model == \"vqgan_imagenet_f16_16384\" && image.enable_video && <p>Enable Zoom: {image.enable_zoom ? \"Yes\" : \"No\"}</p>}\n                        {/* zoom_frequency */}\n                        {image.model == \"vqgan_imagenet_f16_16384\" && image.enable_zoom && <p>Zoom Frequency: {image.zoom_frequency}</p>}\n                        {/* zoom_scale */}\n                        {image.model == \"vqgan_imagenet_f16_16384\" && image.enable_zoom && <p>Zoom Scale: {image.zoom_scale}</p>}\n                        {/* zoom_shift_x */}\n                        {image.model == \"vqgan_imagenet_f16_16384\" && image.enable_zoom  && <p>Zoom Shift X: {image.zoom_shift_x}</p>}\n                        {/* zoom_shift_y */}\n                        {image.model == \"vqgan_imagenet_f16_16384\" && image.enable_zoom && <p>Zoom Shift Y: {image.zoom_shift_y}</p>}\n                        {/* glid_3_xl_skip_iterations */}\n                        {image.model == \"glid_3_xl\" &&<p>Skip Iterations: {image.glid_3_xl_skip_iterations}</p>}\n                        {/* glid_3_xl_clip_guidance */}\n                        {image.model == \"glid_3_xl\" &&<p>Clip Guidance: {image.glid_3_xl_clip_guidance ? \"Yes\" : \"No\"}</p>}\n                        {/* glid_3_xl_clip_guidance_scale */}\n                        {image.model == \"glid_3_xl\" &&<p>Clip Guidance Scale: {image.glid_3_xl_clip_guidance_scale}</p>}\n                    </div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => onDelete && onDelete(image)} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-trash-alt\"></i>\n                        </button>}\n                        {onFork && image.status === \"saved\" && <button className=\"btn btn-secondary btn-sm\" onClick={() => onFork && onFork(image)} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-code-branch\"></i>\n                        </button>}\n                        {(image.status === \"completed\" || image.status === \"saved\") && image.enable_video && <button className=\"btn btn-secondary btn-sm\" onClick={() => window.open(`${apiUrl}/api/images/${image.id}.mp4`)} style={{ marginRight: \"5px\", marginTop: \"5px\" }}>\n                            <i className=\"fas fa-video\"></i>\n                        </button>}\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n\n}","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, SvgJobStatusEnum, Image } from \"../client/api\";\n\ninterface Props {\n    apiUrl: string;\n    api: AIBrushApi;\n    image: Image;\n    onClose: () => void;\n}\n\nexport const SvgPopup: FC<Props> = ({ apiUrl, api, image, onClose }) => {\n    const [svgData, setSvgData] = useState(\"\");\n    const [svgImageUri, setSvgImageUri] = useState(\"\");\n    const [svgJobId, setSvgJobId] = useState(\"\");\n    const [err, setErr] = useState<string | null>(null);\n\n    const onGenerateSvg = async () => {\n        setSvgData(\"\");\n        setSvgImageUri(\"\");\n        setErr(null);\n        try {\n            const resp = await api.createSvgJob({\n                image_id: image.id,\n            })\n            setSvgJobId(resp.data.id)\n        } catch (err) {\n            setErr(\"Could not generate SVG\")\n            console.error(err)\n        }\n    }\n\n    const onDownloadSvg = () => {\n        const blob = new Blob([svgData], { type: \"text/plain;charset=utf-8\" });\n        saveAs(blob, `${image.label}.svg`);\n    }\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        let handle: number;\n        const pollSvg = async () => {\n            try {\n                const resp = await api.getSvgJob(svgJobId)\n                if (resp.data.status === SvgJobStatusEnum.Completed) {\n                    const result = await api.getSvgJobResult(svgJobId)\n                    setSvgData(result.data)\n                    // convert svgData to image uri\n                    const blob = new Blob([result.data], { type: \"image/svg+xml\" });\n                    const url = URL.createObjectURL(blob);\n                    setSvgImageUri(url)\n                    setSvgJobId(\"\")\n                }\n            } catch (err) {\n                console.error(err)\n            }\n        }\n        handle = window.setInterval(pollSvg, 1000)\n        return () => clearInterval(handle)\n    }, [api, svgJobId])\n\n    return (\n        <Modal show={true} onHide={onClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>SVG</Modal.Title>\n            </Modal.Header>\n            {(err || svgJobId || svgImageUri) && <Modal.Body>\n                {/* error if set */}\n                {err && <div className=\"alert alert-danger\">{err}</div>}\n                {/* display svg if set */}\n                {svgImageUri && (\n                    <div style={{width: \"100%\"}}>\n                        <img src={svgImageUri} alt=\"svg\" style={{width: \"100%\"}} />\n                    </div>\n                )}\n                {/* loading indicator if svgJobId is set0 */}\n                {svgJobId && (\n                    <div className=\"spinner-border text-primary\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                )}\n                \n            </Modal.Body>}\n            <Modal.Footer>\n                {/* generate svg button */}\n                {!svgData && <button disabled={!!svgJobId} className=\"btn btn-primary\" onClick={onGenerateSvg}>\n                    {svgJobId ? \"Generating\" : \"Generate SVG\"}\n                </button>}\n                {/* if svgData, show a download button */}\n                {svgData && (\n                    <button className=\"btn btn-primary\" onClick={onDownloadSvg}>\n                        Download SVG\n                    </button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    )\n}","import React, { FC } from \"react\";\n\ninterface LoadMoreImagesProps {\n    onLoadMore: () => void;\n    isLoading: boolean;\n}\n\nexport const LoadMoreImages: FC<LoadMoreImagesProps> = ({ onLoadMore, isLoading }) => {\n    return (\n        <div className=\"card\" style={{ padding: \"10px\", width: \"200px\", margin: \"10px\" }}>\n            <div className=\"card-body\">\n                <button disabled={isLoading} className=\"btn btn-primary\" onClick={onLoadMore}>\n                    {isLoading ? (\n                        <>\n                            <i className=\"fa fa-spinner fa-spin\" /> Loading...\n                        </>\n                    ) : (\n                        <>\n                            <i className=\"fa fa-plus\" /> Load more\n                        </>\n                    )}\n                </button>\n            </div>\n        </div>\n    )\n};","// React page to show all images\n// use bootstrap\nimport React, { FC, useState, useEffect } from 'react';\nimport moment from \"moment\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\nimport { AIBrushApi, Image } from \"../client/api\";\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { SvgPopup } from \"../components/SvgPopup\";\nimport { setDesignerCurrentImageId } from \"../lib/designer\";\nimport { LoadMoreImages } from \"../components/LoadMoreImages\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiUrl: string;\n    assetsUrl: string;\n}\n\nexport const ImagesPage: FC<Props> = ({ api, apiUrl, assetsUrl }) => {\n    const history = useHistory();\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [loadingMore, setLoadingMore] = useState<boolean>(false);\n    const [generatingSvg, setGeneratingSvg] = useState<Image | null>(null);\n\n    const onForkImage = async (image: Image) => {\n        // navigate to /create-image with ?parent=image.id\n        history.push(`/create-image?parent=${image.id}`)\n    }\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        const loadImages = async () => {\n            // clear error\n            setErr(null);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf()\n                const resp = await api.listImages(cursor, 100, \"desc\")\n                if (resp.data.images) {\n                    setImages(resp.data.images)\n                }\n                return 0\n            } catch (err) {\n                setErr(\"Could not load images\")\n                console.error(err)\n            }\n        };\n        loadImages()\n    }, [api])\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at)\n            }, 0)\n\n            try {\n                const resp = await api.listImages(cursor + 1, 100, \"asc\")\n                if (resp.data.images) {\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = resp.data.images.filter(image => {\n                        return images.findIndex(i => i.id === image.id) < 0\n                    })\n                    const updatedImages = resp.data.images.filter(image => {\n                        return images.findIndex(i => i.id === image.id) >= 0\n                    })\n                    setImages(images => [\n                        ...images.map(image => {\n                            const updatedImage = updatedImages.find(i => i.id === image.id)\n                            if (updatedImage) {\n                                return updatedImage\n                            }\n                            return image\n                        }),\n                        ...newImages\n                    ].sort(sortImages))\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\")\n                console.error(err)\n            }\n        }\n\n        const timerHandle = setInterval(() => {\n            pollImages(images)\n        }, 5000)\n        return () => {\n            clearInterval(timerHandle)\n        }\n\n    }, [api, images])\n\n    const onDeleteImage = async (image: Image) => {\n        // clear error\n        setErr(\"\")\n        // attempt to delete image\n        try {\n            // remove image from list\n            setImages(images => images.filter(i => i.id !== image.id));\n            await api.deleteImage(image.id as string)\n        } catch (err) {\n            console.error(err)\n            setErr(\"Could not delete image\")\n        }\n    }\n\n    const onSvg = async (image: Image) => {\n        setGeneratingSvg(image);\n    }\n\n    const onWorkflow = async (image: Image) => {\n        history.push(`/create-workflow?parent=${image.id}`)\n    }\n\n    const sortImages = (a: Image, b: Image) => {\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (a.parent === b.parent && a.phrases.join(\"|\") == b.phrases.join(\"|\")) {\n            // if the score is the same, sort by updated_at\n            const aScore = a.score - a.negative_score\n            const bScore = b.score - b.negative_score\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at\n            }\n            return bScore - aScore\n        }\n        return b.updated_at - a.updated_at\n    }\n\n    const onLoadMore = async () => {\n        setLoadingMore(true)\n        try {\n            // get the minimum updated_at from images\n            let minUpdatedAt = moment().valueOf();\n            images.forEach(image => {\n                minUpdatedAt = Math.min(minUpdatedAt, image.updated_at)\n            })\n            // load images in descending order from updated_at\n            const resp = await api.listImages(minUpdatedAt - 1, 100, \"desc\")\n            if (resp.data.images) {\n                // combine images with new images and sort by updated_at descending\n                setImages(images => [\n                    ...images,\n                    ...(resp.data.images || [])\n                ].sort(sortImages))\n            }\n        } finally {\n            setLoadingMore(false)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <h1>Images</h1>\n                </div>\n            </div>\n            {/* display error message if one is set */}\n            {err && <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        {err}\n                    </div>\n                </div>\n            </div>}\n            {/* Link to navigate to CreateImage */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <Link to=\"/create-image\" className=\"btn btn-primary\">\n                        <i className=\"fas fa-plus\"></i>&nbsp;\n                        Create Image\n                    </Link>\n                </div>\n            </div>\n            <hr />\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"row\">\n                        {images.map(image => (\n                            <ImageThumbnail\n                                onDelete={onDeleteImage}\n                                onFork={onForkImage}\n                                onClick={setSelectedImage}\n                                onSvg={onSvg}\n                                onWorkflow={onWorkflow}\n                                assetsUrl={assetsUrl}\n                                apiUrl={apiUrl}\n                                key={image.id}\n                                image={image} />\n                        ))}\n                        <LoadMoreImages isLoading={loadingMore} onLoadMore={onLoadMore} />\n                    </div>\n                </div>\n            </div>\n            {/* show ImagePopup if selectedImage is set */}\n            {selectedImage && (\n                <ImagePopup\n                    apiUrl={apiUrl}\n                    assetsUrl={assetsUrl}\n                    image={selectedImage as Image}\n                    onClose={() => setSelectedImage(null)}\n                    onDelete={onDeleteImage}\n                    onFork={onForkImage}\n                />\n            )}\n            {generatingSvg && (\n                <SvgPopup api={api} apiUrl={apiUrl} image={generatingSvg} onClose={() => setGeneratingSvg(null)} />\n            )}\n        </>\n    );\n};\n\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Service is unavailable</strong>\n        </div>\n    );\n}\n\n","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","import React, { FC } from \"react\";\nimport { SuggestionSeed } from \"../client\";\n\ninterface Props {\n    suggestionSeed: SuggestionSeed;\n    onDelete?: (suggestionSeed: SuggestionSeed) => void;\n    onView?: (suggestionSeed: SuggestionSeed) => void;\n    onGenerate?: (suggestionSeed: SuggestionSeed) => void;\n    onEdit?: (suggestionSeed: SuggestionSeed) => void;\n}\n\nexport const SuggestionSeedTile: FC<Props> = ({ suggestionSeed, onDelete, onView, onGenerate, onEdit }) => {\n    return (\n        <div className=\"card\" key={suggestionSeed.id} style={{ padding: \"10px\", width: \"230px\", margin: \"10px\" }}>\n            <div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{suggestionSeed.name}</h5>\n                    <p className=\"card-text\">{suggestionSeed.description}</p>\n                    {/*  actions: delete, view, generate */}\n                    <div>\n                        {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => { onDelete(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-trash-alt\"></i>\n                        </button>}\n                        {onView && <button className=\"btn btn-secondary btn-sm\" onClick={() => { onView(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-eye\"></i>\n                        </button>}\n                        {onEdit && <button className=\"btn btn-secondary btn-sm\" onClick={() => { onEdit(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-edit\"></i>\n                        </button>}\n                        {onGenerate && <button className=\"btn btn-secondary btn-sm\" onClick={() => { onGenerate(suggestionSeed) }} style={{ marginRight: \"5px\" }}>\n                            <i className=\"fas fa-play\"></i>\n                        </button>}\n                    </div>\n                </div>\n                \n            </div>\n        </div>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, Image } from \"../client/api\";\n\ninterface Props {\n    api: AIBrushApi;\n    onHide: () => void;\n    filterOut: string[];\n    onSubmit: (input: string[]) => void;\n}\n\nexport const ImageSearchPopup : FC<Props> = ({ api, onHide, filterOut, onSubmit }) => {\n    const [search, setSearch] = useState(\"\");\n    const [images, setImages] = useState<Image[]>([]);\n    const [filteredImages, setFilteredImages] = useState<Image[]>([]);\n    const [selectedImages, setSelectedImages] = useState<{[key: string]: boolean}>({});\n\n    useEffect(() => {\n        const loadImages = async () => {\n            const images = await api.listImages(undefined, 1000)\n            setImages((\n                images.data.images || []\n            ).filter(image => !filterOut.includes(image.phrases.join(\"|\"))));\n        }\n        loadImages();\n    }, [api]);\n\n    useEffect(() => {\n        // case-insensitive match on search value\n        const searchValue = search.toLowerCase();\n        const dedup: {[key: string]: boolean} = {};\n        const filteredImages = images.filter(image => {\n            const name = image.label.toLowerCase().trim();\n            const phrases = image.phrases.map(phrase => phrase.toLowerCase()).join(\"|\").trim();\n            const match = phrases.length > 0 && !dedup[phrases] && (name.includes(searchValue) || phrases.includes(searchValue));\n            if (match) {\n                dedup[phrases] = true;\n            }\n            return match;\n        });\n        setFilteredImages(filteredImages);\n    }, [images, search])\n\n    const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearch(event.target.value);\n    }\n\n    const onImageSelected = (image: Image) => {\n        setSelectedImages(selectedImages => {\n            return {\n                ...selectedImages,\n                [image.id]: !selectedImages[image.id]\n            }\n        });\n    }\n\n    const onSubmitClick = () => {\n        if (Object.keys(selectedImages).length === 0) {\n            alert(\"No images selected\");\n            return;\n        }\n        const selected = filteredImages.filter(image => selectedImages[image.id]);\n        onHide();\n        onSubmit(selected.map(image => image.phrases.join(\"|\")));\n    }\n\n    return (\n        <Modal show onHide={onHide} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Search Images</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"form-group\">\n                    <label>Search</label>\n                    <input type=\"text\" className=\"form-control\" value={search} onChange={onSearchChange} />\n                </div>\n                <div className=\"form-group\">\n                    <label>Images</label>\n                    <div className=\"list-group\">\n                        {filteredImages.map(image => (\n                            <div className=\"list-group-item\" key={image.id}>\n                                <div className=\"form-check\">\n                                    <input type=\"checkbox\" className=\"form-check-input\" checked={selectedImages[image.id]} onChange={() => onImageSelected(image)} />\n                                    <label className=\"form-check-label\">{image.phrases.join(\"|\")}</label>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={onSubmitClick}>Submit</button>\n                {/* cancel */}\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={onHide}>Cancel</button>\n            </Modal.Footer>\n        </Modal>\n    )\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { SuggestionSeedInput, SuggestionSeed, AIBrushApi } from \"../client/api\";\nimport { ImageSearchPopup } from \"./ImageSearchPopup\";\n\ninterface Props {\n    api: AIBrushApi;\n    editingSuggestionSeed?: SuggestionSeed;\n    onHide: () => void;\n    onCreate?: (input: SuggestionSeedInput) => void;\n    onUpdate?: (id: string, input: SuggestionSeedInput) => void;\n}\n\nexport const SuggestionSeedModal: FC<Props> = ({ api, editingSuggestionSeed, onHide, onCreate, onUpdate }) => {\n    const [input, setInput] = useState<SuggestionSeedInput>({\n        name: \"\",\n        description: \"\",\n        items: []\n    });\n    const [searchingImages, setSearchingImages] = useState(false);\n\n    const submit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (input.items.length === 0) {\n            alert(\"Please add at least one item\");\n            return;\n        }\n        onHide();\n        if (onCreate) {\n            onCreate(input);\n        } else if (editingSuggestionSeed && onUpdate) {\n            onUpdate(editingSuggestionSeed.id, input);\n        }\n    };\n\n    useEffect(() => {\n        if (editingSuggestionSeed) {\n            setInput({\n                name: editingSuggestionSeed.name,\n                description: editingSuggestionSeed.description,\n                items: editingSuggestionSeed.items\n            });\n        }\n    }, [editingSuggestionSeed])\n\n    return (\n        <>\n            <Modal show={true} onHide={onHide}>\n                <form onSubmit={submit}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create Suggestions Seed</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* name (required) */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input\n                                required\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"name\"\n                                placeholder=\"Name\"\n                                value={input.name}\n                                onChange={(e) => setInput({ ...input, name: e.target.value })}\n                            />\n                        </div>\n                        {/* description */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"description\">Description</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"description\"\n                                placeholder=\"Description\"\n                                value={input.description}\n                                onChange={(e) => setInput({ ...input, description: e.target.value })}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"suggestions\">Suggestions</label>\n                            <textarea\n                                className=\"form-control\"\n                                id=\"suggestions\"\n                                rows={10}\n                                value={input.items.join(\"\\n\")}\n                                onChange={(e) => {\n                                    setInput({\n                                        ...input,\n                                        items: e.target.value.split(\"\\n\")\n                                    });\n                                }}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={() => setSearchingImages(true)}>\n                                <i className=\"fas fa-search\"></i>&nbsp;\n                                Search Images\n                            </button>\n                        </div>\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                            {editingSuggestionSeed ? \"Update\" : \"Create\"}\n                        </button>\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={onHide}>Close</button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n            {searchingImages && <ImageSearchPopup\n                api={api}\n                filterOut={input.items}\n                onHide={() => setSearchingImages(false)}\n                onSubmit={(items) => {\n                    setInput({\n                        ...input,\n                        items: [...input.items, ...items]\n                    });\n                }}\n            />}\n        </>\n\n    );\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { AIBrushApi, SuggestionsJob, SuggestionSeed, SuggestionsJobStatusEnum } from \"../client\";\nimport { imageStatusToIconClass } from \"../lib/iconhelper\";\n\ninterface Props {\n    api: AIBrushApi;\n    suggestionJobId: string;\n    suggestionSeedId: string;\n    onClose: () => void;\n    onSaveSuggestion: (suggestionSeedId: string, suggestion: string) => void;\n    onRetry: (suggestionSeedId: string) => void;\n    onGenerateImage: (suggestion: string) => void;\n}\n\nexport const SuggestionJobPopup: FC<Props> = ({ api, suggestionJobId, suggestionSeedId, onClose, onSaveSuggestion, onRetry, onGenerateImage }) => {\n    const [suggestionSeed, setSuggestionSeed] = useState<SuggestionSeed | null>(null);\n    const [suggestionJob, setSuggestionJob] = useState<SuggestionsJob | null>(null);\n    const [savedSuggestions, setSavedSuggestions] = useState<{ [key: string]: boolean }>({});\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        let handle: number;\n        const loadSuggestionJob = async () => {\n            try {\n                const resp = await api.getSuggestionsJob(suggestionJobId)\n                if (resp.data) {\n                    setSuggestionJob(resp.data)\n                    // if status is pending or processing,\n                    // poll for updates\n                    if (resp.data.status === \"pending\" || resp.data.status === \"processing\") {\n                        handle = window.setTimeout(() => {\n                            loadSuggestionJob()\n                        }, 1000);\n                    }\n                }\n            } catch (err) {\n                console.error(err)\n            }\n        };\n        loadSuggestionJob()\n        return () => {\n            if (handle) {\n                window.clearTimeout(handle)\n            }\n        }\n    }, [api, suggestionJobId]);\n\n    const saveSuggestion = (result: string) => {\n        onSaveSuggestion(suggestionSeedId, result)\n        setSavedSuggestions({\n            ...savedSuggestions,\n            [result]: true,\n        })\n    }\n\n    useEffect(() => {\n        if (!api) {\n            return\n        }\n        const loadSuggestionSeed = async () => {\n            // clear error\n            setSuggestionSeed(null);\n            try {\n                const resp = await api.getSuggestionSeed(suggestionSeedId)\n                if (resp.data) {\n                    setSuggestionSeed(resp.data)\n                }\n            } catch (err) {\n                console.error(err)\n            }\n        };\n        loadSuggestionSeed()\n    }, [api, suggestionSeedId]);\n\n    // modal\n    return (\n        <Modal show={true} onHide={onClose} onBackdropClick={e => { }}>\n            <Modal.Header>\n                <Modal.Title>{suggestionSeed && `Generating suggestions for ${suggestionSeed.name}`}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {suggestionJob && (\n                    <>\n                        {/* Show status */}\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                {/* status font awesome icon */}\n                                <i className={imageStatusToIconClass(suggestionJob.status)} />&nbsp;\n                                {suggestionJob.status}\n                            </div>\n                        </div>\n                        {/* one row per result */}\n                        {suggestionJob.result && suggestionJob.result.map((result, index) => (\n                            <div className=\"row\" key={index}>\n                                <div className=\"col-md-12\">\n                                    <div className=\"row\" style={{ backgroundColor: \"gray\", margin: \"5px\", padding: \"10px\", borderRadius: \"5px\" }}>\n                                        <div className=\"col-md-8\">\n                                            {result}\n                                        </div>\n\n\n                                        <div className=\"col-md-4\">\n                                            {/* actions to the right: save, generate */}\n                                            <div className=\"pull-right\">\n                                                <button className=\"btn btn-primary btn-sm\" disabled={savedSuggestions[result]} onClick={() => saveSuggestion(result)}>\n                                                    {!savedSuggestions[result] && <i className=\"fas fa-save\" />}\n                                                    {savedSuggestions[result] && <i className=\"fas fa-check\" />}\n                                                </button>\n                                                <button className=\"btn btn-primary btn-sm\" style={{ marginLeft: \"5px\" }} onClick={() => onGenerateImage(result)}>\n                                                    <i className=\"fas fa-play\" />&nbsp;\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </>\n                )}\n            </Modal.Body>\n            <Modal.Footer>\n                {/* retry button */}\n                {onRetry && suggestionJob && suggestionJob.status == SuggestionsJobStatusEnum.Completed && (\n                    <button className=\"btn btn-primary\" onClick={() => onRetry(suggestionSeedId)}>\n                        <i className=\"fas fa-redo\" />&nbsp;\n                        Retry\n                    </button>\n                )}\n                <button className=\"btn btn-primary\" onClick={onClose}>Close</button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { SuggestionSeed } from \"../client/api\";\n\ninterface Props {\n    suggestionSeed: SuggestionSeed;\n    onClose: () => void;\n    onGenerateImage: (suggestion: string) => void;\n}\n\nexport const ViewSuggestionSeedModal: FC<Props> = ({ suggestionSeed, onClose, onGenerateImage }) => {\n    return (\n        <Modal show={true} onHide={onClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{suggestionSeed.name}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        {suggestionSeed.items.map((item, index) => (\n                            <div className=\"row\" style={{ backgroundColor: \"gray\", margin: \"5px\", padding: \"10px\", borderRadius: \"5px\" }}>\n                                <div className=\"col-md-8\">\n                                    {item}\n                                </div>\n\n                                <div className=\"col-md-4\">\n                                    {/* actions to the right: save, generate */}\n                                    <div className=\"pull-right\">\n                                        <button className=\"btn btn-primary btn-sm\" style={{ marginLeft: \"5px\" }} onClick={() => onGenerateImage(item)}>\n                                            <i className=\"fas fa-play\" />&nbsp;\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-secondary\" onClick={onClose}>Close</button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AIBrushApi, SuggestionSeed, SuggestionSeedInput, SuggestionsJob } from \"../client\";\nimport { sleep } from \"../lib/sleep\";\n\nimport { SuggestionSeedTile } from \"../components/SuggestionSeedTile\";\nimport { SuggestionSeedModal } from \"../components/SuggestionSeedModal\";\nimport { SuggestionJobPopup } from \"../components/SuggestionJobPopup\";\nimport { ViewSuggestionSeedModal } from \"../components/ViewSuggestionSeedModal\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiUrl: string;\n}\n\nexport const SuggestionsPage: FC<Props> = ({ api, apiUrl }) => {\n    const [suggestionSeeds, setSuggestionSeeds] = useState<SuggestionSeed[]>([]);\n    const [err, setErr] = useState<string | null>(null);\n\n    const [creatingSuggestionSeed, setCreatingSuggestionSeed] = useState<boolean>(false);\n    const [editingSuggestionSeed, setEditingSuggestionSeed] = useState<SuggestionSeed | null>(null);\n    const [viewingSuggestionSeed, setViewingSuggestionSeed] = useState<SuggestionSeed | null>(null);\n    const [selectedSuggestionSeedId, setSelectedSuggestionSeedId] = useState<string | null>(null);\n    const [runningSuggestionJobId, setRunningSuggestionJobId] = useState<string | null>(null);\n\n    const history = useHistory();\n\n    const onView = async (suggestionSeed: SuggestionSeed) => {\n        // TODO: show details modal\n    };\n\n    const onGenerate = async (suggestionSeedId: string) => {\n        // clear error\n        setErr(null);\n        // create a new job with this seed\n        try {\n            const resp = await api.createSuggestionsJob({\n                seed_id: suggestionSeedId,\n            });\n            setSelectedSuggestionSeedId(suggestionSeedId);\n            setRunningSuggestionJobId(resp.data.id);\n        } catch (err) {\n            console.error(err)\n            setErr(\"Could not generate suggestions\")\n        }\n    }\n\n    const onGenerateClose = () => {\n        setSelectedSuggestionSeedId(null);\n        setRunningSuggestionJobId(null);\n    }\n\n    const onCreateClick = () => {\n        setCreatingSuggestionSeed(true);\n    }\n\n    const onCancelCreateSuggestionSeed = () => {\n        setCreatingSuggestionSeed(false);\n    }\n\n    const onCreateSuggestionSeed = async (suggestionSeed: SuggestionSeedInput) => {\n        const result = await api.createSuggestionSeed(suggestionSeed);\n        setCreatingSuggestionSeed(false);\n        setSuggestionSeeds(suggestionSeeds => [...suggestionSeeds, result.data]);\n    }\n\n    const onEditSuggestionSeed = (suggestionSeed: SuggestionSeed) => {\n        setEditingSuggestionSeed(suggestionSeed);\n    }\n\n    const onCancelEditSuggestionSeed = () => {\n        setEditingSuggestionSeed(null);\n    }\n\n    const onUpdateSuggestionSeed = async (id: string, input: SuggestionSeedInput) => {\n        const result = await api.updateSuggestionSeed(id, input);\n        setEditingSuggestionSeed(null);\n        setSuggestionSeeds(suggestionSeeds => suggestionSeeds.map(suggestionSeed => suggestionSeed.id === id ? result.data : suggestionSeed));\n    }\n\n    const onSaveSuggestion = async (suggestionSeedId: string, suggestion: string) => {\n        // clear error\n        setErr(null);\n        try {\n            const seed = await api.getSuggestionSeed(suggestionSeedId);\n            await onUpdateSuggestionSeed(seed.data.id, {\n                ...seed.data,\n                items: [...seed.data.items, suggestion],\n            });\n        } catch(err) {\n            console.error(err);\n            setErr(\"Could not save suggestion\")\n        }\n    }\n\n    const onRetryGenerateSuggestions = async (suggestionSeedId: string) => {\n        setRunningSuggestionJobId(null);\n        await sleep(500);\n        await onGenerate(suggestionSeedId);\n    }\n\n    const onDeleteSuggestionSeed = async(seed: SuggestionSeed) => {\n        if (window.confirm(\"Are you sure you want to delete this seed?\")) {\n            // clear error\n            setErr(null);\n            try {\n                await api.deleteSuggestionSeed(seed.id);\n                setSuggestionSeeds(suggestionSeeds => suggestionSeeds.filter(s => s.id !== seed.id));\n            } catch(err) {\n                console.error(err);\n                setErr(\"Could not delete seed\");\n            }\n        }\n    }\n\n    const onGenerateImage = async (suggestion: string) => {\n        localStorage.setItem(\"suggestion\", suggestion);\n        // open /create-image in a new tab\n        window.open(`/create-image`, \"_blank\");\n        // history.push(`/create-image`);\n    }\n\n    const onViewSuggestionSeed = (seed: SuggestionSeed) => {\n        setViewingSuggestionSeed(seed);\n    }\n\n    const onCloseViewSuggestionSeed = () => {\n        setViewingSuggestionSeed(null);\n    }\n\n    useEffect(() => {\n        const loadSuggestionSeeds = async () => {\n            // clear error\n            setErr(null);\n            try {\n                const resp = await api.listSuggestionSeeds()\n                if (resp.data.suggestionSeeds) {\n                    setSuggestionSeeds(resp.data.suggestionSeeds)\n                }\n            } catch (err) {\n                setErr(\"Could not load suggestion seeds\")\n                console.error(err)\n            }\n        };\n        if (!api) {\n            return\n        }\n        loadSuggestionSeeds()\n    }, [api])\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <h1>Suggestions</h1>\n                </div>\n            </div>\n            {/* display error if one is set in a new row */}\n            {err && <div className=\"row\"><div className=\"col-md-12\"><div className=\"alert alert-danger\">{err}</div></div></div>}\n            {/* display suggestion seeds */}\n            {/* Button for create suggestions seed popup */}\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <button className=\"btn btn-primary\" onClick={onCreateClick}>Create Suggestion Seed</button>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"row\">\n                        {suggestionSeeds.map(suggestionSeed => (\n                            <SuggestionSeedTile\n                                key={suggestionSeed.id}\n                                suggestionSeed={suggestionSeed}\n                                onGenerate={seed => onGenerate(seed.id)}\n                                onEdit={onEditSuggestionSeed}\n                                onDelete={onDeleteSuggestionSeed}\n                                onView={onViewSuggestionSeed}\n                            />\n                        ))}\n                    </div>\n\n                </div>\n            </div>\n            {/* create suggestions seed popup */}\n            {creatingSuggestionSeed && <SuggestionSeedModal api={api} onHide={onCancelCreateSuggestionSeed} onCreate={onCreateSuggestionSeed} />}\n            {/* edit suggestions seed popup */}\n            {editingSuggestionSeed && <SuggestionSeedModal api={api} onHide={onCancelEditSuggestionSeed} onUpdate={onUpdateSuggestionSeed} editingSuggestionSeed={editingSuggestionSeed} />}\n            {runningSuggestionJobId && selectedSuggestionSeedId && (\n                <SuggestionJobPopup\n                    onClose={onGenerateClose}\n                    api={api}\n                    suggestionSeedId={selectedSuggestionSeedId}\n                    suggestionJobId={runningSuggestionJobId}\n                    onSaveSuggestion={onSaveSuggestion}\n                    onRetry={onRetryGenerateSuggestions}\n                    onGenerateImage={onGenerateImage}\n                />\n            )}\n            {viewingSuggestionSeed && <ViewSuggestionSeedModal\n                onClose={onCloseViewSuggestionSeed}\n                suggestionSeed={viewingSuggestionSeed}\n                onGenerateImage={onGenerateImage}\n            />}\n        </>\n    );\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { saveAs } from \"file-saver\";\n\nimport { AIBrushApi, CreateServiceAccountInputTypeEnum } from \"../client/api\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const WorkerConfigPage: FC<Props> = ({ api }) => {\n\n    const [type, setType] = useState<CreateServiceAccountInputTypeEnum>(CreateServiceAccountInputTypeEnum.Private);\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n\n    // show some information about what a worker is and does\n    // * a worker processes requests to create images with AIBrush\n    const info = (): JSX.Element => {\n        return (\n            <>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h2>Worker Config</h2>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>\n                            This page allows you to download a worker config file needed to access the AIBrush api.\n                            This file can be used to run a worker on a local or cloud machine, or a Colab notebook.\n                            Images worker requires an NVidia GPU with at least 12GB of VRAM, but at least 16GB is recommended.\n                            Suggestions worker requires an NVidia GPU with at least 16GB of VRAM.\n\n                            See the <a href=\"https://github.com/wolfgangmeyers/aibrush-2/tree/main/worker#readme\" target=\"_blank\">worker readme</a> for details on how to set up a worker process.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-6 offset-lg-3\">\n                        <hr/>\n                        <p>\n                            Here is a link to a Google Colab notebook that can be used as a worker node:\n                        </p>\n                        {/* Link to google colab notebook at https://colab.research.google.com/drive/1cW3vVjdeI19o7a9miMu47J5EDyHfZT20#scrollTo=Ed1iT6_JK0Mo */}\n                        <a className=\"btn btn-primary top-button\" href=\"https://colab.research.google.com/drive/1cW3vVjdeI19o7a9miMu47J5EDyHfZT20#scrollTo=Ed1iT6_JK0Mo\" target=\"_blank\">\n                            {/* font awesome google colab icon */}\n                            <i className=\"fab fa-google\"></i>&nbsp;\n                            Google Colab Notebook\n                        </a>\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    const download = async () => {\n        const creds = await api.createServiceAccount({\n            type: type\n        })\n        const blob = new Blob([JSON.stringify(creds.data)], { type: \"application/json\" });\n        saveAs(blob, \"credentials.json\");\n    }\n\n    // public / private dropdown\n    // download button\n    const form = (): JSX.Element => {\n        return (\n            <div className=\"row\">\n                {/* lg-6 with lg-3 offset */}\n                <div className=\"col-lg-6 offset-lg-3\">\n                    <form>\n                        {isAdmin && <div className=\"form-group\">\n                            <label htmlFor=\"type\">Type</label>\n                            <select className=\"form-control\" id=\"type\" value={type} onChange={(e) => setType(e.target.value as CreateServiceAccountInputTypeEnum)}>\n                                <option value=\"public\">Public</option>\n                                <option value=\"private\">Private</option>\n                            </select>\n                        </div>}\n                        <button type=\"submit\" className=\"btn btn-primary\" onClick={() => download()}>Download</button>\n                    </form>\n                </div>\n\n            </div>\n        )\n    }\n\n    useEffect(() => {\n        api.isAdmin().then(isAdmin => setIsAdmin(!!isAdmin.data.is_admin));\n    }, [])\n\n    return (\n        <>\n            {info()}\n            {form()}\n        </>\n    )\n}","import React, { FC, useState, useEffect, useRef } from 'react';\nimport { AIBrushApi,  } from \"../client/api\"\n\n\ninterface Props {\n    api: AIBrushApi\n}\n\nexport const Admin: FC<Props> = ({api}) => {\n\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    }\n\n    return (<>\n        {/* Header: Create new image */}\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <h1>Admin features</h1>\n            </div>\n        </div>\n        {/* 50px vertical spacer */}\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <div className=\"spacer\" />\n            </div>\n        </div>\n        {\n            links.length > 0 && <div className=\"row\">\n                <div className=\"col-12\">\n                    <p>\n                        Right click to copy invite links\n                    </p>\n                </div>\n            </div>\n        }\n        <div className=\"row\">\n            <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                {/* show a list of hyperlinks */}\n                <div className=\"btn-group-vertical\">\n                    {links.map((link, i) => <a key={i} href={link} className=\"btn btn-primary\">\n                        <i className=\"fas fa-link\" />&nbsp;\n                        Invite Link\n                    </a>)}\n                </div>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <div className=\"spacer\" />\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-12\">\n                {/* button to generate links */}\n                <button className=\"btn btn-primary\" onClick={onGenerateLink}>Generate Link</button>\n            </div>\n        </div>\n    </>)\n}","\nimport React from \"react\";\n\nexport interface WorkflowConfigField {\n    name: string;\n    type: \"string\" | \"number\" | \"boolean\" | \"enum\";\n    enum?: string[];\n    min?: number;\n    max?: number;\n    required?: boolean;\n    default: string | number | boolean;\n    placeholder?: string;\n}\n\nexport interface WorkflowSchema {\n    display_name: string;\n    workflow_type: string;\n    config_fields: WorkflowConfigField[];\n}\n\nexport function toInputJSX(configField: WorkflowConfigField, value: any, setValue: React.Dispatch<React.SetStateAction<any>>): JSX.Element | null {\n\n    const onHandleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let value: any;\n        if (configField.type === \"string\") {\n            value = event.target.value;\n        } else if (configField.type === \"number\") {\n            value = parseFloat(event.target.value);\n        } else if (configField.type === \"boolean\") {\n            value = event.target.checked;\n        }\n        setValue((prevState: any) => {\n            return {\n                ...prevState,\n                [configField.name]: value\n            }\n        });\n    }\n\n    const onHandleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const value = event.target.value;\n        setValue((prevState: any) => {\n            return {\n                ...prevState,\n                [configField.name]: value\n            }\n        });\n    }\n\n    switch (configField.type) {\n        case \"string\":\n            return <input placeholder={configField.placeholder} className=\"form-control\" type=\"text\" value={value[configField.name] as string} onChange={onHandleInputChange} />;\n        case \"number\":\n            return <input className=\"form-control\" type=\"number\" value={value[configField.name] as number} onChange={onHandleInputChange} min={configField.min} max={configField.max} />;\n        case \"boolean\":\n            return <input className=\"form-control\" type=\"checkbox\" checked={value[configField.name] as boolean} onChange={onHandleInputChange} />;\n        case \"enum\":\n            return <select className=\"form-control\" value={value[configField.name] as string} onChange={onHandleSelectChange}>\n                {configField.enum!.map((value: string) => {\n                    return <option key={value} value={value}>{value}</option>;\n                })}\n                </select>\n        default:\n            return null\n    }\n}\n\nexport const workflowSchemas: WorkflowSchema[] = [\n    {\n        display_name: \"Basic Genetic Algorithm\",\n        workflow_type: \"basic_ga\",\n        config_fields: [\n            {\n                name: \"phrases\",\n                type: \"string\",\n                default: \"\",\n                placeholder: \"Separate phrases | like this\",\n            },\n            {\n                name: \"negative_phrases\",\n                type: \"string\",\n                default: \"\",\n                placeholder: \"Separate phrases | like this\",\n            },\n            {\n                name: \"generation_size\",\n                type: \"number\",\n                max: 1000,\n                min: 1,\n                default: 10,\n            },\n            {\n                name: \"keep_count\",\n                type: \"number\",\n                max: 100,\n                min: 1,\n                default: 2,\n            },\n            {\n                name: \"generations\",\n                type: \"number\",\n                max: 100,\n                min: 1,\n                default: 10,\n            }\n        ],\n    },\n    {\n        display_name: \"Parallel Genetic Algorithm\",\n        workflow_type: \"parallel_ga\",\n        config_fields: [\n            {\n                name: \"phrases\",\n                type: \"string\",\n                default: \"\",\n            },\n            {\n                name: \"negative_phrases\",\n                type: \"string\",\n                default: \"\",\n            },\n            {\n                name: \"initial_model\",\n                type: \"enum\",\n                default: \"glid_3_xl\",\n                enum: [\n                    \"glid_3_xl\",\n                    \"dalle_mega\",\n                    \"vqgan_imagenet_f16_16384\",\n                ],\n            },\n            {\n                name: \"parallel_model\",\n                type: \"enum\",\n                default: \"glid_3_xl\",\n                enum: [\n                    \"glid_3_xl\",\n                    \"vqgan_imagenet_f16_16384\",\n                ],\n            },\n            {\n                name: \"initial_generation_size\",\n                type: \"number\",\n                max: 1000,\n                min: 1,\n                default: 10,\n            },\n            {\n                name: \"initial_keep_count\",\n                type: \"number\",\n                max: 100,\n                min: 1,\n                default: 2,\n            },\n            {\n                name: \"parallel_generation_size\",\n                type: \"number\",\n                max: 1000,\n                min: 1,\n                default: 10,\n            },\n            {\n                name: \"parallel_keep_count\",\n                type: \"number\",\n                max: 100,\n                min: 1,\n                default: 2,\n            },\n            {\n                name: \"generations\",\n                type: \"number\",\n                max: 100,\n                min: 1,\n                default: 10,\n            },\n        ],\n    }\n];","import React, {FC, useEffect, useState} from \"react\";\nimport { useHistory } from \"react-router-dom\"\nimport { AIBrushApi, Image } from \"../client/api\";\nimport { workflowSchemas, WorkflowSchema, WorkflowConfigField, toInputJSX } from \"../lib/workflow\";\nimport qs from \"qs\";\n\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiUrl: string;\n    assetsUrl: string;\n}\n\nexport const CreateWorkflow: FC<Props> = ({api, apiUrl, assetsUrl}) => {\n    const searchParams = qs.parse(window.location.search.substring(1)) as any\n    const [workflowSchema, setWorkflowSchema] = useState<WorkflowSchema | undefined>(undefined);\n\n    const history = useHistory()\n    const [label, setLabel] = useState(\"\");\n    const [executionDelay, setExecutionDelay] = useState(30);\n    const [config, setConfig] = useState<any>({})\n    const [creating, setCreating] = useState(false);\n    const [parent, setParent] = useState<Image | undefined>();\n\n    useEffect(() => {\n        if (searchParams.parent) {\n            api.getImage(searchParams.parent).then(resp => {\n                setParent(resp.data)\n            }).catch(err => {\n                console.error(err)\n            })\n        }\n    }, [searchParams.parent])\n\n    const onChangeWorkflowType = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const workflowType = event.target.value;\n        const workflowSchema = workflowSchemas.find((schema: WorkflowSchema) => schema.workflow_type === workflowType);\n        setWorkflowSchema(workflowSchema);\n        let cfg: any = {}\n        if (workflowSchema) {\n            for (let field of workflowSchema.config_fields) {\n                cfg[field.name] = field.default;\n            }\n        }\n        setConfig(cfg);\n    }\n\n    const onCancel = () => {\n        // on cancel, return to the previous page\n        // check if there is a previous page. if not, redirect to home\n        if (history.length > 1) {\n            history.goBack()\n        } else {\n            history.push(\"/\")\n        }\n    }\n\n    const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (!workflowSchema) {\n            console.error(\"No workflow schema selected\")\n            return\n        }\n        setCreating(true);\n        config.parent = parent?.id;\n        try {\n            const workflow = await api.createWorkflow({\n                label,\n                execution_delay: executionDelay,\n                config_json: JSON.stringify(config),\n                workflow_type: workflowSchema.workflow_type,\n                data_json: \"{}\",\n                is_active: true,\n                state: \"init\",\n            })\n            history.push(\"/workflows\")\n        } finally {\n            setCreating(false);\n        }\n    }\n\n    return <>\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                <h1>Create new workflow</h1>\n            </div>\n        </div>\n        {/* 50px vertical spacer */}\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <div className=\"spacer\" />\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                <form onSubmit={onSubmit}>\n                    {/* label */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"label\">Label</label>\n                        <input required className=\"form-control\" type=\"text\" id=\"label\" value={label} onChange={(event) => setLabel(event.target.value)} />\n                    </div>\n                    {/* execution delay (10-60) */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"executionDelay\">Execution delay (seconds)</label>\n                        <input className=\"form-control\" type=\"number\" id=\"executionDelay\" value={executionDelay} onChange={(event) => setExecutionDelay(parseInt(event.target.value))} min={10} max={600} />\n                    </div>\n                    {/* select element that lists workflow schemas */}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"workflow-type\">Workflow type</label>\n                        <select required value={workflowSchema && workflowSchema.workflow_type} className=\"form-control\" id=\"workflow-type\" onChange={onChangeWorkflowType}>\n                            <option value=\"\">Select workflow type</option>\n                            {workflowSchemas.map((schema: WorkflowSchema) => (\n                                <option key={schema.workflow_type} value={schema.workflow_type}>\n                                    {schema.display_name}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                    {workflowSchema && <>\n                        {workflowSchema.config_fields.map((configField: WorkflowConfigField) => (\n                            <div className=\"form-group\" key={configField.name}>\n                                <label htmlFor={configField.name}>{configField.name}</label>\n                                    {toInputJSX(configField, config, setConfig)}\n                            </div>\n                        ))}\n                    </>}\n                    {\n                        parent && <div className=\"form-group\">\n                            {/* show image thumbnail */}\n                            <label>Parent:</label>\n                            <ImageThumbnail image={parent} apiUrl={apiUrl} assetsUrl={assetsUrl} />\n                        </div>\n                    }\n                    {/* footer */}\n                    <div className=\"form-group\">\n                        {/* cancel button */}\n                        <button className=\"btn btn-secondary\" type=\"button\" onClick={onCancel}>Cancel</button>\n                        &nbsp;\n                        <button className=\"btn btn-primary\" type=\"submit\">Create</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </>\n}\n","import React, {FC, useEffect, useState} from \"react\";\nimport { useHistory } from \"react-router-dom\"\n\nimport { Link } from \"react-router-dom\";\nimport { AIBrushApi, Workflow } from \"../client\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const Workflows: FC<Props> = ({api}) => {\n\n    const [workflows, setWorkflows] = useState<Workflow[]>([]);\n    const history = useHistory();\n\n    const loadWorkflows = async () => {\n        const resp = await api.getWorkflows();\n        setWorkflows(resp.data.workflows);\n    }\n\n    const onDeleteWorkflow = async (workflow: Workflow) => {\n        if (!window.confirm(`Are you sure you want to delete ${workflow.label}?`)) {\n            return;\n        }\n        await api.deleteWorkflow(workflow.id);\n        loadWorkflows();\n    }\n\n    const onDeactivateWorkflow = async (workflow: Workflow) => {\n        await api.updateWorkflow(workflow.id, {is_active: false});\n    }\n\n    const onActivateWorkflow = async (workflow: Workflow) => {\n        await api.updateWorkflow(workflow.id, {is_active: true});\n    }\n\n    const onViewDetail = (workflow: Workflow) => {\n        history.push(`/workflows/${workflow.id}`);\n    }\n\n    useEffect(() => {\n        loadWorkflows();\n    })\n\n    return (<>\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <h1>Workflows</h1>\n            </div>\n        </div>\n        {/* Link to navigate to CreateImage */}\n        <div className=\"row\">\n                <div className=\"col-12\">\n                    <Link to=\"/create-workflow\" className=\"btn btn-primary\">\n                        <i className=\"fas fa-plus\"></i>&nbsp;\n                        Create Workflow\n                    </Link>\n                </div>\n            </div>\n        {/* 50px vertical spacer */}\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <div className=\"spacer\" />\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                {/* table that displays workflow label, state, and actions */}\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Label</th>\n                            <th>State</th>\n                            <th>Active</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {workflows.map(workflow => (\n                            <tr key={workflow.id}>\n                                <td>{workflow.label}</td>\n                                <td>{workflow.state}</td>\n                                <td>{workflow.is_active ? \"Yes\" : \"No\"}</td>\n                                <td>\n                                    {/* View detail */}\n                                    <button className=\"btn btn-primary\" onClick={() => onViewDetail(workflow)}>\n                                        <i className=\"fas fa-eye\"></i>\n                                    </button>\n                                    &nbsp;\n                                    {/* Delete action */}\n                                    <button className=\"btn btn-danger\" onClick={() => onDeleteWorkflow(workflow)}>\n                                        <i className=\"fas fa-trash-alt\" />\n                                    </button>\n                                    &nbsp;\n                                    {/* deactivate button */}\n                                    {workflow.is_active && <button className=\"btn btn-warning\" onClick={() => onDeactivateWorkflow(workflow)}>\n                                        <i className=\"fas fa-minus-circle\" />\n                                    </button>}\n                                    {/* activate button */}\n                                    {!workflow.is_active && <button className=\"btn btn-success\" onClick={() => onActivateWorkflow(workflow)}>\n                                        <i className=\"fas fa-plus-circle\" />\n                                    </button>}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </>)\n}","import React, {FC, useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\"\n\nimport { AIBrushApi, Workflow, Image } from '../client';\nimport { ImagePopup } from '../components/ImagePopup';\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\n\ninterface Props {\n    api: AIBrushApi;\n    apiUrl: string;\n    assetsUrl: string;\n}\n\ninterface Params {\n    id: string;\n}\n\nexport const WorkflowDetail: FC<Props> = ({api, apiUrl, assetsUrl}) => {\n    const [workflow, setWorkflow] = useState<Workflow>();\n    const [err, setErr] = useState(\"\");\n    const [images, setImages] = useState<Image[]>([]);\n    const [generationsRemaining, setGenerationsRemaining] = useState(0);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const {id} = useParams<Params>();\n\n    const loadWorkflow = async (id: string) => {\n        setErr(\"\")\n        try {\n            const workflow = await api.getWorkflow(id);\n            setWorkflow(workflow.data);\n        } catch (err) {\n            console.error(err);\n            setErr(\"Could not load workflow\");\n        }\n    }\n\n    const loadDisplayData = async (workflow: Workflow) => {\n        const data = JSON.parse(workflow.data_json)\n        const displayImages = (data.display_images || []) as Image[];\n        setImages(displayImages);\n        const generationsRemaining = data.remaining_generations || undefined;\n        setGenerationsRemaining(generationsRemaining);\n\n        // console.log(\"displayImages\", displayImages);\n        // const images = data.images || [] as Image[]\n        // console.log(\"images\", images);\n    }\n\n    useEffect(() => {\n        loadWorkflow(id);\n    }, [id])\n\n    useEffect(() => {\n        if (workflow) {\n            loadDisplayData(workflow);\n        }\n    }, [workflow])\n\n    // refresh every 10 seconds\n    useEffect(() => {\n        const interval = setInterval(() => {\n            loadWorkflow(id);\n        }\n        , 10000);\n        return () => clearInterval(interval);\n    }, [id])\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <h1>Workflow: {workflow?.label}</h1>\n                </div>\n            </div>\n             {/* display error message if one is set */}\n             {err && <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        {err}\n                    </div>\n                </div>\n            </div>}\n            {\n                generationsRemaining && <div className=\"row\">\n                    <div className=\"col-12\">\n                            {generationsRemaining} generations remaining\n                    </div>\n                </div>\n            }\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"row\">\n                        {images.map(image => (\n                            <ImageThumbnail key={image.id} image={image} apiUrl={apiUrl} assetsUrl={assetsUrl} onClick={setSelectedImage} />\n                        ))}\n                        {!images.length && <div className=\"col-12\">\n                            <div className=\"alert alert-info\" role=\"alert\">\n                                No images to display\n                            </div>\n                        </div>}\n                    </div>\n                </div>\n            </div>\n             {/* show ImagePopup if selectedImage is set */}\n             {selectedImage && (\n                <ImagePopup\n                    apiUrl={apiUrl}\n                    assetsUrl={assetsUrl}\n                    image={selectedImage as Image}\n                    onClose={() => setSelectedImage(null)}\n                />\n            )}\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\"\nimport './App.css';\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { getConfig } from './config';\nimport { Login } from \"./pages/Login\"\nimport { MainMenu } from './pages/MainMenu';\nimport { CreateImage } from \"./pages/CreateImage\"\nimport { ImagesPage } from \"./pages/Images\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from './components/Healthchecker';\nimport { SuggestionsPage } from \"./pages/Suggestions\";\nimport { WorkerConfigPage } from \"./pages/WorkerConfig\";\nimport { Admin } from \"./pages/Admin\";\nimport { CreateWorkflow } from \"./pages/CreateWorkflow\";\nimport { Workflows } from \"./pages/Workflows\";\nimport { WorkflowDetail } from \"./pages/WorkflowDetail\"\n\nconst config = getConfig()\nconst httpClient = axios.default;\nconst client = new AIBrushApi(undefined, localStorage.getItem(\"apiUrl\") || config.apiUrl, httpClient);\n\nfunction updateHttpClient(loginResult: LoginResult) {\n  if (loginResult.accessToken) {\n    httpClient.defaults.headers.common['Authorization'] = `Bearer ${loginResult.accessToken}`;\n  }\n}\n\nfunction App() {\n\n  const [credentials, setCredentials] = useState<LoginResult | null>(null);\n  const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n  const [isAdmin, setIsAdmin] = useState<boolean>(false);\n  const [features, setFeatures] = useState<FeatureList | null>(null);\n\n  const onLogout = () => {\n    setCredentials(null);\n    localStorage.removeItem(\"credentials\");\n    httpClient.defaults.headers.common['Authorization'] = undefined;\n  }\n\n  const init = async () => {\n    console.log(\"App.init\")\n    client.getAssetsUrl().then(result => setAssetsUrl(result.data.assets_url));\n    client.getFeatures().then(result => setFeatures(result.data));\n    const storedCredentials = localStorage.getItem(\"credentials\");\n    if (storedCredentials) {\n      // attempt to refresh token\n      try {\n        const credentials = JSON.parse(storedCredentials) as LoginResult;\n        const result = await client.refresh({\n          refreshToken: credentials.refreshToken\n        });\n        setCredentials(result.data);\n        // save to storage\n        localStorage.setItem(\"credentials\", JSON.stringify(result.data));\n        updateHttpClient(result.data);\n        const isAdmin = await client.isAdmin();\n        setIsAdmin(!!isAdmin.data.is_admin);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  const onLogin = async (credentials: LoginResult) => {\n    localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n    setCredentials(credentials);\n    updateHttpClient(credentials);\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <TokenRefresher api={client} credentials={credentials as LoginResult} onCredentialsRefreshed={onLogin} />\n      <Healthchecker api={client} />\n\n      <BrowserRouter>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              {/* if credentials are not set, show Login component */}\n              {!credentials && <Login httpClient={httpClient} client={client} onLogin={onLogin} />}\n              {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n              {credentials && <>\n                <button className=\"btn btn-primary top-button\" onClick={() => onLogout()}>\n                  {/* font awesome logout icon */}\n                  <i className=\"fas fa-sign-out-alt\"></i>&nbsp;\n                  Logout\n                </button>\n                {/* home button */}\n                <Link className=\"btn btn-primary top-button\" to=\"/\">\n                  {/* font awesome home icon */}\n                  <i className=\"fas fa-home\"></i>&nbsp;\n                  Home\n                </Link>\n                {/* Link to github project at https://github.com/wolfgangmeyers/aibrush-2 */}\n                <a className=\"btn btn-primary top-button\" href=\"https://github.com/wolfgangmeyers/aibrush-2\" target=\"_blank\">\n                  {/* font awesome github icon */}\n                  <i className=\"fab fa-github\"></i>&nbsp;\n                </a>\n              </>}\n            </div>\n          </div>\n\n          {/* if credentials are set, show the rest of the app */}\n          {credentials && <Switch>\n            <Route path=\"/\" exact={true}>\n              <MainMenu isAdmin={isAdmin} />\n            </Route>\n            <Route path=\"/create-image\">\n              <CreateImage api={client} apiUrl={config.apiUrl} />\n            </Route>\n            <Route path=\"/images\">\n              <ImagesPage apiUrl={config.apiUrl} api={client} assetsUrl={assetsUrl} />\n            </Route>\n            {/* /suggestions route */}\n            <Route path=\"/suggestions\">\n              <SuggestionsPage api={client} apiUrl={config.apiUrl} />\n            </Route>\n            <Route path=\"/worker-config\">\n              <WorkerConfigPage api={client} />\n            </Route>\n\n            <Route path=\"/create-workflow\">\n              <CreateWorkflow api={client} apiUrl={config.apiUrl} assetsUrl={assetsUrl} />\n            </Route>\n            <Route path=\"/workflows\" exact={true}>\n              <Workflows api={client} />\n            </Route>\n            <Route path=\"/workflows/:id\">\n              <WorkflowDetail api={client} apiUrl={config.apiUrl} assetsUrl={assetsUrl} />\n            </Route>\n            {\n              isAdmin &&\n              <>\n                <Route path=\"/admin\">\n                  <Admin api={client} />\n                </Route>\n\n              </>\n            }\n          </Switch>}\n          <div className=\"row\" style={{ marginTop: \"100px\", padding: \"50px\" }}>\n            <div className=\"col-lg-12\">\n              {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n              {features && features.privacy_uri && <a href={features.privacy_uri} target=\"_blank\">\n                Privacy Policy\n              </a>}\n              {features && features.terms_uri && <a href={features.terms_uri} target=\"_blank\" style={{ marginLeft: \"20px\" }}>\n                Terms of Service\n              </a>}\n            </div>\n          </div>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { FC, useState, useEffect, useRef } from 'react';\nimport { useHistory } from \"react-router-dom\"\nimport { AxiosResponse } from \"axios\";\nimport { AIBrushApi, CreateImageInput, CreateImageInputHeightEnum, CreateImageInputWidthEnum } from \"../client/api\"\nimport loadImage from \"blueimp-load-image\"\nimport qs from \"qs\";\nimport { MaskEditor } from \"../components/MaskEditor\";\nimport { Uncropper } from \"../components/Uncropper\";\n\ninterface CreateImageProps {\n    api: AIBrushApi\n    apiUrl: string;\n}\n\nexport const CreateImage: FC<CreateImageProps> = (props) => {\n    const searchParams = qs.parse(window.location.search.substring(1)) as any\n\n    const history = useHistory()\n    const [input, setInput] = useState<CreateImageInput>({\n        phrases: [\"a painting of a happy corgi wearing sunglasses\"],\n        negative_phrases: [],\n        label: \"a painting of a happy corgi wearing sunglasses\",\n        iterations: 50,\n        encoded_image: \"\",\n        encoded_npy: \"\",\n        encoded_mask: \"\",\n        enable_video: false,\n        enable_zoom: false,\n        zoom_frequency: 10,\n        zoom_scale: 0.99,\n        zoom_shift_x: 0,\n        zoom_shift_y: 0,\n        model: \"stable_diffusion_text2im\",\n        glid_3_xl_clip_guidance: false,\n        glid_3_xl_clip_guidance_scale: 150,\n        glid_3_xl_skip_iterations: 0,\n        width: 512,\n        height: 512,\n    });\n    const [editingMask, seteditingMask] = useState<string | null>(null);\n    const [uncroppingImage, setUncroppingImage] = useState<string | null>(null);\n    const [count, setCount] = useState(1)\n    const [creating, setCreating] = useState(false)\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (input.model == \"swinir\" && !input.encoded_image) {\n            alert(\"Init image is required for SwinIR upscaling\")\n            return\n        }\n        setCreating(true)\n        try {\n            for (let i = 0; i < count; i++) {\n                await props.api.createImage(input);\n            }\n        } finally {\n            setCreating(false)\n        }\n        \n\n        // redirect to images page\n        history.push(\"/images\")\n    }\n\n    const onCancel = () => {\n        // on cancel, return to the previous page\n        // check if there is a previous page. if not, redirect to home\n        if (history.length > 1) {\n            history.goBack()\n        } else {\n            history.push(\"/\")\n        }\n    }\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0]\n        if (!file) {\n            return\n        }\n        loadImage(file, (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n            if (!(img instanceof HTMLCanvasElement)) {\n                return\n            }\n            // convert image to base64\n            const canvas = img as HTMLCanvasElement\n            const dataUrl = canvas.toDataURL(\"image/jpeg\")\n            const base64 = dataUrl.split(\",\")[1]\n            setInput({\n                ...input,\n                encoded_image: base64,\n                encoded_npy: undefined,\n                width: img.width,\n                height: img.height,\n            })\n            renderInitImage(base64, undefined, img.width, img.height)\n        }, {\n            maxWidth: 1024,\n            maxHeight: 1024,\n            canvas: true,\n        })\n    }\n\n    const onEditMask = () => {\n        if (input.encoded_image) {\n            seteditingMask(`data:image/jpeg;base64,${input.encoded_image}`)\n        }\n    }\n\n    const onMaskEdited = (imageUri: string) => {\n        // extract base64 portion of the image uri\n        const base64 = imageUri.split(\",\")[1]\n        setInput(input => ({\n            ...input,\n            encoded_mask: base64,\n            glid_3_xl_skip_iterations: 0,\n        }))\n        seteditingMask(null)\n        if (input.encoded_image) {\n            renderInitImage(input.encoded_image, base64, input.width || 256, input.height || 256)\n        }\n    }\n\n    const onUncropImage = () => {\n        if (input.encoded_image) {\n            setUncroppingImage(`data:image/jpeg;base64,${input.encoded_image}`)\n        }\n    }\n\n    const onImageUncropped = (imageUri: string, maskUri: string, width: number, height: number, offsetX: number, offsetY: number) => {\n        const imageBase64 = imageUri.split(\",\")[1]\n        const maskBase64 = maskUri.split(\",\")[1]\n        setInput(input => ({\n            ...input,\n            encoded_image: imageBase64,\n            encoded_mask: maskBase64,\n            // encoded_npy: undefined,\n            glid_3_xl_skip_iterations: 0,\n            width,\n            height,\n            uncrop_offset_x: offsetX,\n            uncrop_offset_y: offsetY,\n        }))\n        setUncroppingImage(null)\n        renderInitImage(imageBase64, maskBase64, width, height)\n    }\n\n    const onWidthChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const width = parseInt(e.target.value)\n        if (width) {\n            setInput(input => ({\n                ...input,\n                width,\n            }))\n            if (input.encoded_image) {\n                renderInitImage(input.encoded_image, input.encoded_mask, width, input.height || 256)\n            }\n        }\n    }\n\n    const onHeightChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const height = parseInt(e.target.value)\n        if (height) {\n            setInput(input => ({\n                ...input,\n                height,\n            }))\n            if (input.encoded_image) {\n                console.log(\"onHeightChanged\");\n                renderInitImage(input.encoded_image, input.encoded_mask, input.width || 256, height)\n            }\n        }\n    }\n\n    const onChangeModel = (model: string) => {\n        let newInput = { ...input, model }\n        if (model === \"vqgan_imagenet_f16_16384\") {\n            newInput.iterations = 300;\n        } else if (model == \"glid_3_xl\") {\n            newInput.iterations = 50;\n            newInput.enable_video = false;\n        }\n        setInput({ ...newInput, model: model })\n    }\n\n    const renderInitImage = (encoded_image: string, encoded_mask: string | undefined, width: number, height: number) => {\n        if (canvasRef.current && encoded_image) {\n            console.log(\"renderInitImage\")\n            const ctx = canvasRef.current.getContext(\"2d\")\n            if (ctx) {\n                const image = new Image()\n                image.src = `data:image/jpeg;base64,${encoded_image}`\n                image.onload = () => {\n                    ctx.globalAlpha = 1\n                    ctx.drawImage(image, 0, 0, width, height)\n                    if (encoded_mask) {\n                        const mask = new Image()\n                        mask.src = `data:image/jpeg;base64,${encoded_mask}`\n                        mask.onload = () => {\n                            ctx.globalAlpha = 0.5\n                            ctx.drawImage(mask, 0, 0, width, height)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n\n        const loadParent = async (parentId: string) => {\n            const image = await props.api.getImage(parentId)\n            // get encoded image data for parent\n            const imageDataPromise = props.api.getImageData(image.data.id, {\n                responseType: \"arraybuffer\"\n            })\n            // only glide-3-xl iamges have .npy files\n            let npyDataPromise: Promise<AxiosResponse<any>> | null = null;\n            if (image.data.model === \"glid_3_xl\") {\n                npyDataPromise = props.api.getNpyData(image.data.id, {\n                    responseType: \"arraybuffer\",\n                })\n            }\n\n            const imageResp = await imageDataPromise\n            const binaryImageData = Buffer.from(imageResp.data, \"binary\");\n            // convert binary to base64\n            const base64ImageData = binaryImageData.toString(\"base64\");\n\n            let base64NpyData = \"\";\n\n            if (npyDataPromise) {\n                try {\n                    const npyResp = await npyDataPromise\n                    const binaryNpyData = Buffer.from(npyResp.data, \"binary\");\n                    base64NpyData = binaryNpyData.toString(\"base64\");\n                    console.log(\"loaded npy data successfully\")\n                } catch {\n                    console.log(\"failed to load npy data\")\n                }\n            }\n\n            setInput(input => ({\n                ...input,\n                label: image.data.label,\n                phrases: image.data.phrases,\n                negative_phrases: image.data.negative_phrases,\n                iterations: image.data.iterations,\n                parent: parentId,\n                encoded_image: base64ImageData,\n                encoded_npy: base64NpyData || undefined,\n                enable_video: !!image.data.enable_video,\n                enable_zoom: !!image.data.enable_zoom,\n                zoom_frequency: image.data.zoom_frequency || 10,\n                zoom_scale: image.data.zoom_scale || 0.99,\n                zoom_shift_x: image.data.zoom_shift_x || 0,\n                zoom_shift_y: image.data.zoom_shift_y || 0,\n                model: image.data.model || \"vqgan_imagenet_f16_16384\",\n                glid_3_xl_clip_guidance: !!image.data.glid_3_xl_clip_guidance,\n                glid_3_xl_clip_guidance_scale: image.data.glid_3_xl_clip_guidance_scale || 150,\n                glid_3_xl_skip_iterations: image.data.glid_3_xl_skip_iterations || 0,\n                width: image.data.width as any as CreateImageInputWidthEnum || 256,\n                height: image.data.height as any as CreateImageInputHeightEnum || 256,\n            }))\n            renderInitImage(base64ImageData, base64NpyData, image.data.width as any as CreateImageInputWidthEnum || 256, image.data.height as any as CreateImageInputHeightEnum || 256)\n        }\n\n        if (searchParams.parent) {\n            loadParent(searchParams.parent)\n        }\n    }, [searchParams.parent, setInput, props.api])\n\n    useEffect(() => {\n        if (searchParams.parent) {\n            return\n        }\n        const suggestion = localStorage.getItem(\"suggestion\")\n        if (suggestion) {\n            // clear suggestion\n            localStorage.setItem(\"suggestion\", \"\")\n            const phrases = suggestion.split(\"|\")\n            setInput({\n                ...input,\n                phrases: phrases,\n                label: phrases[0],\n            })\n        }\n    })\n\n    return (\n        <>\n            {/* Header: Create new image */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Create new image</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    <form onSubmit={onSubmit}>\n                        {input.model !== \"swinir\" && <div className=\"form-group\">\n                            <label>Phrases</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.phrases?.join(\"|\")}\n                                onChange={(e) => setInput({ ...input, phrases: e.target.value.split(\"|\") })}\n                                placeholder=\"Separate | phrases | like this\" />\n                        </div>}\n                        {/* negative phrases for glid 3 xl */}\n                        {   input.model === \"glid_3_xl\" && (\n                            <div className=\"form-group\">\n                                <label>Negative phrases</label>\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    value={input.negative_phrases?.join(\"|\")}\n                                    onChange={(e) => setInput({ ...input, negative_phrases: e.target.value.split(\"|\") })}\n                                    placeholder=\"Separate | phrases | like this\" />\n                            </div>\n                        )}\n                        <div className=\"form-group\">\n                            <label>Label</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.label}\n                                onChange={(e) => setInput({ ...input, label: e.target.value })}\n                                placeholder=\"Label\" />\n                        </div>\n                        {input.model !== \"dalle_mega\" && <div className=\"form-group\">\n                            <label>Width</label>\n                            <input type=\"number\" className=\"form-control\" min={128} max={1024} step={64} value={input.width} onChange={onWidthChanged} />\n                        </div>}\n                        {input.model !== \"dalle_mega\" && <div className=\"form-group\">\n                            <label>Height</label>\n                            <input type=\"number\" className=\"form-control\" min={128} max={1024} step={64} value={input.height} onChange={onHeightChanged} />\n                        </div>}\n                        {input.model !== \"swinir\" && input.model !== \"dalle_mega\" && <div className=\"form-group\">\n                            <label>Iterations</label>\n                            <input min={1} max={10000} className=\"form-control\" type=\"number\" value={input.iterations} onChange={(e) => setInput({ ...input, iterations: parseInt(e.target.value) })} />\n                        </div>}\n                        {/* count */}\n                        {input.model !== \"swinir\" && <div className=\"form-group\">\n                            <label>Count</label>\n                            <input className=\"form-control\" type=\"number\" max={30} min={1} value={count} onChange={(e) => setCount(parseInt(e.target.value))} />\n                        </div>}\n                        {/* model dropdown */}\n                        <div className=\"form-group\">\n                            <label>Model</label>\n                            <select className=\"form-control\" value={input.model} onChange={(e) => onChangeModel(e.target.value)}>\n                                <option value=\"dalle_mega\">DALLE Mega</option>\n                                <option value=\"vqgan_imagenet_f16_16384\">VQGAN ImageNet</option>\n                                <option value=\"glid_3_xl\">Glid-3 XL</option>\n                                <option value=\"swinir\">SwinIR</option>\n                                <option value=\"stable_diffusion_text2im\">Stable Diffusion Text2Image</option>\n                            </select>\n                        </div>\n                        {/* boolean enable_video (bootstrap styled checkbox) */}\n                        {input.model == \"vqgan_imagenet_f16_16384\" && <div className=\"form-group\">\n                            <label style={{ marginRight: \"10px\" }}>Enable video</label>\n                            <div className=\"form-check\">\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.enable_video} onChange={(e) => setInput({ ...input, enable_video: e.target.checked })} />\n                            </div>\n                        </div>}\n                        {/* boolean enable_zoom (bootstrap styled checkbox) */}\n                        {input.model == \"vqgan_imagenet_f16_16384\" && input.enable_video && <div className=\"form-group\">\n                            <label style={{ marginRight: \"10px\" }}>Enable zoom</label>\n                            <div className=\"form-check\">\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.enable_zoom} onChange={(e) => setInput({ ...input, enable_zoom: e.target.checked })} />\n                            </div>\n                        </div>}\n\n                        {/* if enable_zoom, show zoom_interval input */}\n                        {input.model == \"vqgan_imagenet_f16_16384\" && input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom interval</label>\n                            <input min={1} max={100} className=\"form-control\" type=\"number\" value={input.zoom_frequency} onChange={(e) => setInput({ ...input, zoom_frequency: parseInt(e.target.value) })} />\n                        </div>}\n                        {/* if enable_zoom, show zoom_scale input */}\n                        {input.model == \"vqgan_imagenet_f16_16384\" && input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom scale</label>\n                            <input min={0.1} max={10} step={0.01} className=\"form-control\" type=\"number\" value={input.zoom_scale} onChange={(e) => setInput({ ...input, zoom_scale: parseFloat(e.target.value) })} />\n                        </div>}\n                        {/* if enable_zoom, show zoom_shift_x input */}\n                        {input.model == \"vqgan_imagenet_f16_16384\" && input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom shift x</label>\n                            <input min={-10} max={10} className=\"form-control\" type=\"number\" value={input.zoom_shift_x} onChange={(e) => setInput({ ...input, zoom_shift_x: parseInt(e.target.value) })} />\n                        </div>}\n                        {/* if enable_zoom, show zoom_shift_y input */}\n                        {input.model == \"vqgan_imagenet_f16_16384\" && input.enable_zoom && <div className=\"form-group\">\n                            <label>Zoom shift y</label>\n                            <input min={-10} max={10} className=\"form-control\" type=\"number\" value={input.zoom_shift_y} onChange={(e) => setInput({ ...input, zoom_shift_y: parseInt(e.target.value) })} />\n                        </div>}\n\n                        {/* glid_3_xl_skip_iterations number input*/}\n                        {input.model == \"glid_3_xl\" && !input.encoded_mask && <div className=\"form-group\">\n                            <label>Skip iterations</label>\n                            <input min={0} max={10000} className=\"form-control\" type=\"number\" value={input.glid_3_xl_skip_iterations} onChange={(e) => setInput({ ...input, glid_3_xl_skip_iterations: parseInt(e.target.value) })} />\n                        </div>}\n\n                        {/* glid_3_xl_clip_guidance checkbox */}\n                        {input.model == \"glid_3_xl\" && <div className=\"form-group\">\n                            <label style={{ marginRight: \"10px\" }}>Clip guidance</label>\n                            <div className=\"form-check\">\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.glid_3_xl_clip_guidance} onChange={(e) => setInput({ ...input, glid_3_xl_clip_guidance: e.target.checked })} />\n                            </div>\n                        </div>}\n\n                        {/* glid_3_xl_clip_guidance_scale number input */}\n                        {input.model == \"glid_3_xl\" && input.glid_3_xl_clip_guidance && <div className=\"form-group\">\n                            <label>Clip guidance scale</label>\n                            <input min={10} max={2000} step={1} className=\"form-control\" type=\"number\" value={input.glid_3_xl_clip_guidance_scale} onChange={(e) => setInput({ ...input, glid_3_xl_clip_guidance_scale: parseFloat(e.target.value) })} />\n                        </div>}\n\n                        {/* If encoded_image (base64 only) is set, show the image using a base64 image url*/}\n                        {input.encoded_image && <div className=\"form-group\">\n                            <h5>Initial Image</h5>\n                            {/* <img alt=\"\" src={`data:image/jpeg;base64,${input.encoded_image}`} style={{ maxWidth: \"100%\" }} /> */}\n                            <canvas ref={canvasRef} style={{ maxWidth: \"100%\" }} width={input.width} height={input.height} />\n                        </div>}\n                        {/* If encoded_image is set, display edit button */}\n                        {input.model !== \"dalle_mega\" && <div className=\"form-group\">\n                            <label\n                                id=\"loadimage-wrapper\"\n                                className={`btn btn-sm btn-primary btn-file`}\n                                style={{ marginTop: \"8px\", marginRight: \"8px\" }}\n                            >\n                                {input.encoded_image ? \"Replace Image\" : \"Upload Image\"}\n                                <input\n                                    id=\"loadimage\"\n                                    type=\"file\"\n                                    style={{ display: \"none\" }}\n                                    onChange={e => onImageSelected(e)}\n                                />\n                            </label>\n                            {input.encoded_image && input.model == \"glid_3_xl\" && !input.encoded_mask && <button type=\"button\" style={{marginRight: \"8px\"}} className=\"btn btn-sm btn-primary\" onClick={onEditMask}>Edit Mask</button>}\n                            {input.encoded_image && input.model == \"glid_3_xl\" && !input.encoded_mask && input.encoded_npy && <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={onUncropImage}>Uncrop Image</button>}\n                        </div>}\n\n                        <div className=\"form-group\">\n                            {/* Cancel button \"/\" */}\n                            <button onClick={onCancel} type=\"button\" className=\"btn btn-secondary\">Cancel</button>\n                            &nbsp;\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled={creating}>\n                                {creating && <i className=\"fa fa-spinner fa-spin\" />}\n                                {creating ? \"Creating...\" : \"Create\"}\n                            </button>\n                        </div>\n\n                    </form>\n                </div>\n            </div>\n            {editingMask && (\n                <MaskEditor\n                    encodedImage={editingMask}\n                    onCancel={() => seteditingMask(null)}\n                    onSave={onMaskEdited}\n                />\n            )}\n            {uncroppingImage && (\n                <Uncropper\n                    encodedImage={uncroppingImage}\n                    onCancel={() => setUncroppingImage(null)}\n                    onSave={onImageUncropped}\n                />\n            )}\n        </>\n    )\n\n\n}","// react bootstrap large modal with a canvas for image editing.\n// Brush size, brush size preview, color selector, color picker\n// Save and cancel buttons\n\nimport React, { FC, useState, useEffect, useRef } from 'react';\nimport { Modal } from \"react-bootstrap\";\n\ninterface MaskEditorProps {\n    encodedImage: string; // image is required in order to draw a mask\n    onSave: (image: string) => void;\n    onCancel: () => void;\n}\n\nexport const MaskEditor: FC<MaskEditorProps> = ({ encodedImage, onSave, onCancel }) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const [image, setImage] = useState<HTMLImageElement | null>(null);\n    const [offscreenCanvas, setOffscreenCanvas] = useState<HTMLCanvasElement | null>(null);\n    const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState('#000000');\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [lastX, setLastX] = useState(0);\n    const [lastY, setLastY] = useState(0);\n\n    useEffect(() => {\n        const img = new Image();\n        img.src = encodedImage;\n        img.onload = () => {\n            setImage(img)\n        }\n    }, [encodedImage])\n\n    useEffect(() => {\n        if (canvasRef.current && image) {\n            const offscreenCanvas = document.createElement('canvas');\n            // hide it\n            offscreenCanvas.style.display = 'none';\n            offscreenCanvas.width = image.width;\n            offscreenCanvas.height = image.height;\n            const ctx = offscreenCanvas.getContext('2d');\n            if (ctx) {\n                setOffscreenCanvas(offscreenCanvas);\n                setCtx(ctx);\n                ctx.fillStyle = '#ffffff';\n                ctx.fillRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                render(offscreenCanvas, image, lastX, lastY, brushColor, brushSize);\n            }\n            setCtx(ctx);\n        }\n    }, [canvasRef.current, image]);\n\n    const render = (canvas: HTMLCanvasElement, image: HTMLImageElement | null, lastX: number, lastY: number, brushColor: string, brushSize: number) => {\n        if (canvasRef.current && image && canvas) {\n            const renderCtx = canvasRef.current.getContext('2d');\n            if (renderCtx) {\n                renderCtx.drawImage(image, 0, 0);\n                renderCtx.globalAlpha = 0.5;\n                renderCtx.drawImage(canvas, 0, 0);\n                // draw the brush\n                renderCtx.globalAlpha = 1;\n                drawDot(renderCtx, lastX, lastY, brushColor, brushSize);\n            }\n        }\n    }\n\n    const getMousePos = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        const canvas = canvasRef.current;\n        if (!canvas) {\n            throw Error(\"No canvas\")\n        }\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        if (e.nativeEvent instanceof MouseEvent) {\n            const evt = e as React.MouseEvent<HTMLCanvasElement>;\n            return {\n                x: (evt.clientX - rect.left) * scaleX,\n                y: (evt.clientY - rect.top) * scaleY\n            }\n        } else if (e.nativeEvent instanceof TouchEvent) {\n            const evt = e as React.TouchEvent<HTMLCanvasElement>;\n            return {\n                x: (evt.touches[0].clientX - rect.left) * scaleX,\n                y: (evt.touches[0].clientY - rect.top) * scaleY\n            }\n        }\n        console.log(e)\n        throw new Error(\"event is not MouseEvent or TouchEvent\")\n    }\n\n    const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        const canvas = canvasRef.current;\n        if (!canvas || !offscreenCanvas) {\n            return;\n        }\n        setIsDrawing(true);\n        const mousePos = getMousePos(e);\n        setLastX(mousePos.x);\n        setLastY(mousePos.y);\n        // draw a single dot in case the user clicks without moving the mouse\n        drawDot(ctx, mousePos.x, mousePos.y, brushColor, brushSize);\n        render(offscreenCanvas, image, mousePos.x, mousePos.y, brushColor, brushSize);\n    };\n\n    const drawDot = (ctx: CanvasRenderingContext2D | null, x: number, y: number, brushColor: string, brushSize: number) => {\n        if (!ctx) {\n            return;\n        }\n        ctx.fillStyle = brushColor;\n        ctx.beginPath();\n        ctx.arc(x, y, brushSize / 2, 0, Math.PI * 2);\n        ctx.fill();\n    }\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        const canvas = canvasRef.current;\n        if (!ctx || !canvas || !offscreenCanvas) {\n            return;\n        }\n\n        // get x and y relative to the canvas\n        const mousePos = getMousePos(e);\n        const x = mousePos.x;\n        const y = mousePos.y;\n\n        if (isDrawing) {\n            e.preventDefault()\n            e.stopPropagation()\n            ctx.beginPath();\n            ctx.moveTo(lastX, lastY);\n            ctx.lineTo(x, y);\n            ctx.strokeStyle = brushColor;\n            ctx.lineWidth = brushSize;\n            // line caps\n            ctx.lineCap = 'round';\n            ctx.stroke();\n\n            setLastX(x);\n            setLastY(y);\n        }\n        render(offscreenCanvas, image, x, y, brushColor, brushSize);\n    };\n\n    const handleMouseUp = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {\n        setIsDrawing(false);\n    };\n\n    const handleBrushSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setBrushSize(parseFloat(e.target.value));\n        if (offscreenCanvas) {\n            render(offscreenCanvas, image, lastX, lastY, brushColor, brushSize);\n        }\n    };\n\n    const handleBrushColorChange = (newColor: string) => {\n        setBrushColor(newColor);\n        if (offscreenCanvas) {\n            render(offscreenCanvas, image, lastX, lastY, brushColor, brushSize);\n        }\n    };\n\n    const handleSave = () => {\n        if (offscreenCanvas) {\n            const data = offscreenCanvas.toDataURL('image/jpg');\n            onSave(data);\n        }\n    };\n\n    const handleCancel = () => {\n        onCancel();\n    };\n\n    return (\n        <Modal show={true} onHide={handleCancel} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Mask Editor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    Areas in black will be repainted, areas in white will be preserved.\n                </p>\n                {image && <canvas\n                    style={{ maxWidth: \"100%\", maxHeight: \"1024px\", display: \"block\", marginLeft: \"auto\", marginRight: \"auto\"  }}\n                    id=\"maskEditorCanvas\"\n                    width={image.width}\n                    height={image.height}\n                    ref={canvasRef}\n                    onMouseDown={handleMouseDown}\n                    onMouseMove={handleMouseMove}\n                    onMouseUp={handleMouseUp}\n                    onTouchStart={handleMouseDown}\n                    onTouchMove={handleMouseMove}\n                    onTouchEnd={handleMouseUp}\n                ></canvas>}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushSize\">Brush Size</label>\n                            <input type=\"range\" className=\"form-control\" id=\"brushSize\" min=\"1\" max=\"100\" value={brushSize} onChange={handleBrushSizeChange} />\n                        </div>\n\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushColor\">Brush Color</label>\n                            {/* Show two toggle buttons for white and black */}\n                            <div className=\"btn-group\" role=\"group\" aria-label=\"Brush Color\" style={{marginLeft: \"20px\"}}>\n                                <button type=\"button\" className=\"btn btn-secondary\" style={{ backgroundColor: \"white\", padding: \"30px\" }} onClick={() => handleBrushColorChange(\"white\")}></button>\n                                <button type=\"button\" className=\"btn btn-secondary\" style={{ backgroundColor: \"black\", padding: \"30px\" }} onClick={() => handleBrushColorChange(\"black\")}></button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-primary\" onClick={handleSave}>Save</button>\n                <button className=\"btn btn-secondary\" onClick={handleCancel}>Cancel</button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","// react bootstrap large modal with a canvas for image editing.\n// Brush size, brush size preview, color selector, color picker\n// Save and cancel buttons\n\nimport React, { FC, useState, useEffect, useRef } from 'react';\nimport { Modal } from \"react-bootstrap\";\n\ninterface UncropperProps {\n    encodedImage: string; // image is required in order to draw a mask\n    onSave: (image: string, mask: string, width: number, height: number, offsetX: number, offsetY: number) => void;\n    onCancel: () => void;\n}\n\nexport const Uncropper: FC<UncropperProps> = ({ encodedImage, onSave, onCancel }) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const [image, setImage] = useState<HTMLImageElement | null>(null);\n    const [imageCanvas, setImageCanvas] = useState<HTMLCanvasElement | null>(null);\n    const [maskCanvas, setMaskCanvas] = useState<HTMLCanvasElement | null>(null);\n\n    const [width, setWidth] = useState(256);\n    const [height, setHeight] = useState(256);\n    const [offsetX, setOffsetX] = useState(0);\n    const [offsetY, setOffsetY] = useState(0);\n\n    const createOffscreenCanvas = (width: number, height: number) => {\n        const offscreenCanvas = document.createElement('canvas');\n        // hide it\n        offscreenCanvas.style.display = 'none';\n        offscreenCanvas.width = width;\n        offscreenCanvas.height = height;\n        return offscreenCanvas;\n    }\n\n    const renderMask = (canvas: HTMLCanvasElement, image: HTMLImageElement, width: number, height: number, offsetX: number, offsetY: number) => {\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n            ctx.fillStyle = '#ffffff';\n            ctx.fillRect(0, 0, width, height);\n            // if (offsetX > 0) {\n            //     ctx.fillStyle = '#000000';\n            //     ctx.fillRect(0, 0, offsetX, height);\n            // }\n            // if (offsetX + image.width < width) {\n            //     ctx.fillStyle = '#000000';\n            //     ctx.fillRect(offsetX + image.width, 0, width - (offsetX + image.width), height);\n            // }\n            // if (offsetY > 0) {\n            //     ctx.fillStyle = '#000000';\n            //     ctx.fillRect(0, 0, width, offsetY);\n            // }\n            // if (offsetY + image.height < height) {\n            //     ctx.fillStyle = '#000000';\n            //     ctx.fillRect(0, offsetY + image.height, width, height - (offsetY + image.height));\n            // }\n        }\n    }\n\n    const renderImage = (canvas: HTMLCanvasElement, image: HTMLImageElement, width: number, height: number, offsetX: number, offsetY: number) => {\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n            ctx.fillStyle = '#ffffff';\n            ctx.fillRect(0, 0, width, height);\n            ctx.drawImage(image, offsetX, offsetY);\n        }\n    }\n\n    const onWidthChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newWidth = parseInt(e.target.value);\n        setWidth(newWidth);\n        if (canvasRef.current) {\n            canvasRef.current.width = newWidth;\n        }\n        if (maskCanvas && imageCanvas) {\n            maskCanvas.width = newWidth;\n            imageCanvas.width = newWidth;\n            render(maskCanvas, imageCanvas, newWidth, height, offsetX, offsetY);\n        }\n    }\n\n    const onHeightChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newHeight = parseInt(e.target.value);\n        setHeight(newHeight);\n        if (canvasRef.current) {\n            canvasRef.current.height = newHeight;\n        }\n        if (maskCanvas && imageCanvas) {\n            maskCanvas.height = newHeight;\n            imageCanvas.height = newHeight;\n            render(maskCanvas, imageCanvas, width, newHeight, offsetX, offsetY);\n        }\n    }\n\n    const onOffsetXChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newOffsetX = parseInt(e.target.value);\n        setOffsetX(newOffsetX);\n        if (maskCanvas && imageCanvas) {\n            render(maskCanvas, imageCanvas, width, height, newOffsetX, offsetY);\n        }\n    }\n\n    const onOffsetYChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newOffsetY = parseInt(e.target.value);\n        setOffsetY(newOffsetY);\n        if (maskCanvas && imageCanvas) {\n            render(maskCanvas, imageCanvas, width, height, offsetX, newOffsetY);\n        }\n    }\n\n    useEffect(() => {\n        const img = new Image();\n        img.src = encodedImage;\n        img.onload = () => {\n            setImage(img)\n        }\n    }, [encodedImage])\n\n    useEffect(() => {\n        if (canvasRef.current && image) {\n            const maskCanvas = createOffscreenCanvas(image.width, image.height);\n            setMaskCanvas(maskCanvas);\n            const imageCanvas = createOffscreenCanvas(image.width, image.height);\n            setImageCanvas(imageCanvas);\n            \n            render(maskCanvas, imageCanvas, width, height, offsetX, offsetY);\n            setWidth(image.width);\n            setHeight(image.height);\n        }\n    }, [canvasRef.current, image]);\n\n    const render = (maskCanvas: HTMLCanvasElement, imageCanvas: HTMLCanvasElement, width: number, height: number, offsetX: number, offsetY: number) => {\n        if (canvasRef.current && image && maskCanvas && imageCanvas) {\n            renderMask(maskCanvas, image, width, height, offsetX, offsetY);\n            renderImage(imageCanvas, image, width, height, offsetX, offsetY);\n            const renderCtx = canvasRef.current.getContext('2d');\n            if (renderCtx) {\n                renderCtx.globalAlpha = 1;\n                renderCtx.drawImage(imageCanvas, 0, 0);\n                renderCtx.globalAlpha = 0.5;\n                renderCtx.drawImage(maskCanvas, 0, 0);\n                // draw the brush\n                renderCtx.globalAlpha = 1;\n            }\n        }\n    }\n\n\n    const handleSave = () => {\n        if (imageCanvas && maskCanvas) {\n            const maskData = maskCanvas.toDataURL('image/jpg');\n            const imageData = imageCanvas.toDataURL('image/jpg');\n            onSave(imageData, maskData, width, height, offsetX, offsetY);\n        }\n    };\n\n    const handleCancel = () => {\n        onCancel();\n    };\n\n    return (\n        <Modal show={true} onHide={handleCancel} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Uncrop Image</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    <b>Note:</b> Uncropping may not work well with images larger than 256x256.\n                </p>\n                {image && <canvas\n                    style={{ maxWidth: \"100%\", maxHeight: \"1024px\", display: \"block\", marginLeft: \"auto\", marginRight: \"auto\" }}\n                    id=\"uncropperCanvas\"\n                    width={image.width}\n                    height={image.height}\n                    ref={canvasRef}\n                ></canvas>}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        {/* width */}\n                        <div className=\"form-group\">\n                            <label>Width</label>\n                            <input type=\"number\" className=\"form-control\" value={width} onChange={onWidthChanged} min={128} max={1024} step={64} />\n                        </div>\n                        {/* height */}\n                        <div className=\"form-group\">\n                            <label>Height</label>\n                            <input type=\"number\" className=\"form-control\" value={height} onChange={onHeightChanged} min={128} max={1024} step={64} />\n                        </div>\n                        \n                    </div>\n                    <div className=\"col-md-6\">\n                        {/* offsetX */}\n                        <div className=\"form-group\">\n                            <label>Offset X</label>\n                            {/* number input */}\n                            <input type=\"number\"\n                                step={64}\n                                min={-1024}\n                                max={1024}\n                                className=\"form-control\"\n                                value={offsetX}\n                                onChange={onOffsetXChanged}\n                            />\n                        </div>\n                        {/* offsetY */}\n                        <div className=\"form-group\">\n                            <label>Offset Y</label>\n                            {/* number input */}\n                            <input type=\"number\"\n                                step={64}\n                                min={-1024}\n                                max={1024}\n                                className=\"form-control\"\n                                value={offsetY}\n                                onChange={onOffsetYChanged}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-primary\" onClick={handleSave}>Save</button>\n                <button className=\"btn btn-secondary\" onClick={handleCancel}>Cancel</button>\n            </Modal.Footer>\n        </Modal>\n    );\n}"],"sourceRoot":""}
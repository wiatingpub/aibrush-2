{"version":3,"sources":["lib/aspecRatios.ts","pages/image-editor/ImageEditor.tsx","pages/image-editor/renderer.ts","lib/sleep.ts","pages/image-editor/import-export.tsx","client/api.ts","client/base.ts","client/common.ts","pages/image-editor/tool.ts","pages/Login.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","pages/WorkerConfig.tsx","pages/Admin.tsx","components/ImageThumbnailV2.tsx","components/ImagePopupV2.tsx","pages/Homepage.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","pages/image-editor/zoomHelper.tsx","lib/upscale.ts","components/ImagePrompt.tsx","components/AspectRatioSelector.tsx","pages/image-editor/selection-tool.tsx","pages/image-editor/enhance-tool.tsx","pages/image-editor/smudge-tool.tsx","pages/image-editor/PaletteButton.tsx","pages/image-editor/ColorPicker.tsx","pages/image-editor/pencil-tool.tsx"],"names":["DEFAULT_ASPECT_RATIO","aspectRatios","displayName","width","height","id","getClosestAspectRatio","aspectRatio","tests","sort","a","b","aRatio","bRatio","Math","abs","compareSize","upscale","ImageEditor","api","useState","showSelectionControls","setShowSelectionControls","tools","name","iconClass","constructor","r","SelectionTool","renderControls","t","renderer","tool","defaultArgs","selectionWidth","selectionHeight","EnhanceTool","variationStrength","onShowSelectionControls","image","PencilTool","SmudgeTool","BaseTool","setImage","setRenderer","setTool","useParams","history","useHistory","canvasRef","useRef","onSelectTool","toolconfig","destroy","newTool","onSaveImage","encodedImage","console","log","updateImage","encoded_image","renderTool","buttonClass","isSelected","className","onClick","charAt","toUpperCase","slice","useEffect","getImage","then","data","getImageData","responseType","resp","base64ImageData","Buffer","from","toString","src","imageElement","Image","onload","current","createRenderer","setBaseImage","error","listener","e","preventDefault","onWheel","addEventListener","removeEventListener","style","fontSize","textAlign","cursor","goBack","map","verticalAlign","float","marginTop","select","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","position","left","transform","updateZoomAndOffset","canvas","baseImageLayer","editLayer","overlayLayer","selectionOverlay","selectionOverlayPreview","hasSelection","zoom","offsetX","offsetY","this","document","createElement","context","getContext","clearRect","setTransform","drawImage","setSelectionOverlay","x","y","render","imageData","putImageData","lineWidth","max","strokeStyle","strokeRect","type","color","beginPath","arc","radius","PI","stroke","fillStyle","fill","moveTo","lineTo","drawOverlay","selection","result","toDataURL","remove","split","setEditImage","brushSize","x1","y1","x2","y2","lineCap","brushOpacity","unitVector","length","sqrt","i","totalRed","totalGreen","totalBlue","count","index","averageRed","averageGreen","averageBlue","pixel","g","rgbToHex","sleep","ms","Promise","resolve","window","setTimeout","ImportExportControls","backupImage","setBackupImage","undefined","img","saveListener","display","onChange","event","files","target","loadImage","getEncodedImage","byteString","atob","buffer","ArrayBuffer","intArray","Uint8Array","charCodeAt","blob","Blob","saveAs","onExport","marginLeft","CreateImageInputStatusEnum","CreateImageInputHeightEnum","CreateImageInputWidthEnum","CreateServiceAccountInputTypeEnum","HealthcheckStatusEnum","ImageStatusEnum","ImageWidthEnum","ImageHeightEnum","ImageUncropOffsetXEnum","ImageUncropOffsetYEnum","SuggestionsJobStatusEnum","SvgJobStatusEnum","UpdateImageInputStatusEnum","UpdateSuggestionsJobInputStatusEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","RequiredError","field","msg","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","createImage","createImageInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","createInviteCode","createServiceAccount","createServiceAccountInput","createSuggestionSeed","suggestionSeedInput","createSuggestionsJob","createSuggestionsJobInput","createSvgJob","createSvgJobInput","createWorkflow","createWorkflowInput","createWorkflowEvent","workflowId","createWorkflowEventInput","localVarPath","encodeURIComponent","String","deleteImage","deleteSuggestionSeed","deleteSuggestionsJob","deleteSvgJob","deleteWorkflow","getAssetsUrl","getFeatures","getMaskData","getNpyData","getSuggestionSeed","getSuggestionsJob","getSvgJob","getSvgJobResult","getThumbnailData","getVideoData","getWorkflow","getWorkflowEvents","getWorkflows","healthcheck","isAdmin","listImages","limit","direction","listSuggestionSeeds","listSuggestionsJobs","login","loginInput","processImage","processImageInput","processSuggestionsJob","processSvgJob","processWorkflow","refresh","refreshLoginInput","updateImageInput","updateSuggestionSeed","updateSuggestionsJob","updateSuggestionsJobInput","updateSvgJob","updateSvgJobInput","updateVideoData","body","updateWorkflow","updateWorkflowInput","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","parse","localStorage","getItem","args","setItem","Login","props","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","err","setErr","location","inviteCode","qs","substring","onLogin","match","client","invite_code","onVerify","marginRight","fontWeight","href","htmlFor","placeholder","aria-describedby","TokenRefresher","onCredentialsRefreshed","credentials","interval","setInterval","refreshToken","loginResult","clearInterval","Healthchecker","healthCheck","setHealthCheck","catch","role","WorkerConfigPage","Private","setType","setIsAdmin","download","creds","is_admin","Admin","links","setLinks","onGenerateLink","link","ImageThumbnail","assetsUrl","updated_at","retry","setRetry","hover","setHover","moment","diff","clearTimeout","label","phrases","onMouseEnter","backgroundImage","backgroundSize","margin","filter","nsfw","background","lineHeight","status","Pending","Processing","ImagePopup","onClose","onDelete","onFork","onEdit","onUpscale","onNSFW","score","negative_phrases","join","trim","negative_score","showNSFW","setShowNSFW","onerror","title","upscaleLevel","getUpscaleLevel","Modal","show","onHide","size","Header","closeButton","Title","Body","maxWidth","maxHeight","alt","displayStatus","icon","Completed","top","statusBadge","Saved","marginBottom","toFixed","checked","Homepage","creating","setCreating","selectedImage","setSelectedImage","parentImage","setParentImage","images","setImages","hasMore","setHasMore","find","onSubmit","input","scrollTo","newImages","imagesToAdd","sortImages","onEditNewImage","push","imageInput","parent","model","add","valueOf","loadImages","pollImages","reduce","findIndex","updatedImages","updatedImage","timerHandle","ids","uniqueIds","Set","indexOf","isPendingOrProcessing","aScore","bScore","onLoadMore","minUpdatedAt","forEach","min","onThumbnailClicked","ImagePrompt","onCancel","dataLength","next","loader","res","config","apiUrl","httpClient","updateHttpClient","accessToken","defaults","common","App","setCredentials","setAssetsUrl","features","setFeatures","init","assets_url","storedCredentials","removeItem","to","path","exact","padding","privacy_uri","terms_uri","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","ZoomHelper","originalZoom","getZoom","getOffsetX","getOffsetY","canvasPoint","translateMouseToCanvasCoordinates","deltaY","xDiff","yDiff","movementX","movementY","rect","getBoundingClientRect","getWidth","getHeight","mouseX","mouseY","getCanvas","iterations","encoded_npy","encoded_mask","enable_video","enable_zoom","zoom_frequency","zoom_scale","zoom_shift_x","zoom_shift_y","glid_3_xl_clip_guidance","glid_3_xl_clip_guidance_scale","glid_3_xl_skip_iterations","stable_diffusion_strength","prompt","setPrompt","negativePrompt","setNegativePrompt","setCount","setVariationStrength","setAspectRatio","parentId","setParentId","advancedView","setAdvancedView","setEncodedImage","aspectRatioDetails","setAspectRatioDetails","resetState","handleSubmit","bestMatch","onImageSelected","file","HTMLCanvasElement","ctx","base64","disabled","textDecoration","aspectRatioId","parseInt","step","parseFloat","minHeight","AspectRatioSelector","alignItems","border","zoomHelper","panning","sync","setSelectionOverlayPreview","button","imageWidth","imageHeight","onPan","nativeEvent","round","Controls","updateArgs","getArgs","_state","stateHandler","selectionControlsListener","selectedImageDataIndex","state","handler","featherLeftEdge","featherRightEdge","featherTopEdge","featherBottomEdge","baseWidth","featherWidth","floor","pixelIndex","alpha","existingAlpha","imageId","baseImage","reject","featherEdges","getSelectionOverlay","completed","completeCount","imageResp","loadImageData","commitSelection","EnhanceControls","setState","onChangeState","cancel","confirm","submit","lastX","lastY","smudging","_dirty","dirtyListener","copyEditImageFromBaseImage","dirty","setCursor","smudgeLine","SmudgeControls","setBrushSize","setBrushOpacity","setDirty","onDirty","PaletteButton","selectedColor","backgroundColor","ColorPicker","onColorSelected","displayColorPicker","setDisplayColorPicker","tmpColor","setTmpColor","zIndex","right","bottom","hex","onChangeComplete","defaultColors","brushColor","palette","isDrawing","colorPicking","lastPickedColor","colorPickedListener","drawPoint","getPixel","drawLine","setBrushColor","setPalette","addToPalette","onColorPicked","flexDirection","flexWrap","beginColorpicker"],"mappings":"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","file":"static/js/main.21e91198.chunk.js","sourcesContent":["export interface AspectRatio {\n    displayName: string;\n    width: number;\n    height: number;\n    id: number;\n}\n\nexport const DEFAULT_ASPECT_RATIO = 5;\n\nexport const aspectRatios: AspectRatio[] = [\n    {\n        displayName: \"4:1\",\n        width: 1024,\n        height: 256,\n        id: 0,\n    },\n    {\n        displayName: \"3:1\",\n        width: 768,\n        height: 256,\n        id: 1,\n    },\n    {\n        displayName: \"2:1\",\n        width: 640,\n        height: 320,\n        id: 2,\n    },\n    {\n        displayName: \"3:2\",\n        width: 576,\n        height: 384,\n        id: 3,\n    },\n    {\n        displayName: \"5:4\",\n        width: 640,\n        height: 512,\n        id: 4,\n    },\n    {\n        displayName: \"1:1\",\n        width: 512,\n        height: 512,\n        id: 5,\n    },\n    {\n        displayName: \"4:5\",\n        width: 512,\n        height: 640,\n        id: 6,\n    },\n    {\n        displayName: \"2:3\",\n        width: 384,\n        height: 576,\n        id: 7,\n    },\n    {\n        displayName: \"1:2\",\n        width: 320,\n        height: 640,\n        id: 8,\n    },\n    {\n        displayName: \"1:3\",\n        width: 256,\n        height: 768,\n        id: 9,\n    },\n    {\n        displayName: \"1:4\",\n        width: 256,\n        height: 1024,\n        id: 10,\n    }\n];\n\nexport function getClosestAspectRatio(width: number, height: number): AspectRatio {\n    const aspectRatio = width / height;\n\n    const tests = [...aspectRatios];\n    tests.sort((a, b) => {\n        const aRatio = a.width / a.height;\n        const bRatio = b.width / b.height;\n        return (\n            Math.abs(aRatio - aspectRatio) -\n            Math.abs(bRatio - aspectRatio)\n        );\n    });\n    const bestMatch = tests[0];\n    return bestMatch;\n}\n\nexport function compareSize(a: AspectRatio, width: number, height: number): number {\n    const area1 = a.width * a.height;\n    const area2 = width * height;\n    return area1 - area2;\n}\n\nexport function upscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width * 2,\n        height: aspectRatio.height * 2,\n        id: aspectRatio.id,\n    }\n}\n\nexport function downscale(aspectRatio: AspectRatio): AspectRatio {\n    return {\n        displayName: aspectRatio.displayName,\n        width: aspectRatio.width / 2,\n        height: aspectRatio.height / 2,\n        id: aspectRatio.id,\n    }\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport loadImage from \"blueimp-load-image\";\n\nimport { AIBrushApi, Image as APIImage } from \"../../client\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport \"./ImageEditor.css\";\nimport { createRenderer, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { SelectionTool, Controls as SelectionControls } from \"./selection-tool\";\nimport { EnhanceTool, EnhanceControls } from \"./enhance-tool\";\nimport { PencilTool, Controls as PencilControls } from \"./pencil-tool\";\nimport { SmudgeTool, SmudgeControls } from \"./smudge-tool\";\nimport { ImportExportControls } from \"./import-export\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\ninterface ToolConfig {\n    name: string;\n    iconClass: string;\n    constructor: (r: Renderer) => Tool;\n    renderControls: (t: Tool, renderer: Renderer) => JSX.Element;\n    defaultArgs: any;\n}\n\nexport const ImageEditor: React.FC<Props> = ({ api }) => {\n    const [showSelectionControls, setShowSelectionControls] = useState(false);\n    const tools: Array<ToolConfig> = [\n        {\n            name: \"select\",\n            iconClass: \"far fa-square\",\n            constructor: (r: Renderer) => new SelectionTool(r),\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return <SelectionControls tool={t} renderer={renderer} />;\n            },\n            defaultArgs: {\n                selectionWidth: 512,\n                selectionHeight: 512,\n            },\n        },\n        {\n            name: \"enhance\",\n            iconClass: \"fas fa-magic\",\n            constructor: (r: Renderer) => new EnhanceTool(r),\n            defaultArgs: {\n                variationStrength: 0.75,\n            },\n            renderControls: (t: Tool, renderer: Renderer) => {\n                t.onShowSelectionControls(setShowSelectionControls);\n                return (\n                    <EnhanceControls\n                        tool={t as EnhanceTool}\n                        renderer={renderer}\n                        api={api}\n                        image={image!}\n                    />\n                );\n            },\n        },\n        {\n            name: \"pencil\",\n            iconClass: \"fas fa-pencil-alt\",\n            constructor: (r: Renderer) => new PencilTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return <PencilControls tool={t as PencilTool} renderer={renderer} />;\n            }\n        },\n        {\n            name: \"smudge\",\n            // finger icon\n            iconClass: \"fas fa-hand-pointer\",\n            constructor: (r: Renderer) => new SmudgeTool(r),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return <SmudgeControls tool={t as SmudgeTool} renderer={renderer} />;\n            },\n        },\n        {\n            name: \"import-export\",\n            iconClass: \"fas fa-file-import\",\n            constructor: (r: Renderer) => new BaseTool(\"import-export\"),\n            defaultArgs: {},\n            renderControls: (t: Tool, renderer: Renderer) => {\n                return <ImportExportControls renderer={renderer} tool={t as BaseTool} api={api} />;\n            }\n        }\n    ];\n\n    const [image, setImage] = useState<APIImage | null>(null);\n    const [renderer, setRenderer] = useState<Renderer | null>(null);\n    const [tool, setTool] = useState<Tool | null>(null);\n\n    const { id } = useParams<{ id: string }>();\n    const history = useHistory();\n\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const onSelectTool = (toolconfig: ToolConfig) => {\n        if (renderer) {\n            if (tool) {\n                if (!tool.destroy()) {\n                    return;\n                }\n            }\n            const newTool = toolconfig.constructor(renderer);\n            setTool(newTool);\n            newTool.onSaveImage((encodedImage) => {\n                console.log(\"Saving image...\")\n                api.updateImage(id, {\n                    encoded_image: encodedImage,\n                });\n            });\n        }\n    };\n\n    useEffect(() => {\n        api.getImage(id).then((image) => {\n            setImage(image.data);\n            api.getImageData(id, {\n                responseType: \"arraybuffer\"\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/jpeg;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    if (!canvasRef.current) {\n                        console.error(\"Failed to get canvas\");\n                        return;\n                    }\n                    const renderer = createRenderer(canvasRef.current);\n                    renderer.setBaseImage(imageElement);\n                    setRenderer(renderer);\n                }\n            });\n        });\n    }, [id]);\n\n    useEffect(() => {\n        if (renderer) {\n            onSelectTool(tools[0]);\n        }\n    }, [renderer]);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n            const listener = (e: WheelEvent) => {\n                if (tool) {\n                    e.preventDefault();\n                    tool.onWheel(e);\n                }\n            };\n            canvasRef.current.addEventListener(\"wheel\", listener);\n            return () => {\n                canvasRef.current?.removeEventListener(\"wheel\", listener);\n            };\n        }\n    }, [tool, canvasRef.current]);\n\n    function renderTool(t: ToolConfig) {\n        let buttonClass = `btn btn-secondary light-button image-editor-tool-button`;\n        const isSelected = tool && tool.name == t.name;\n        if (isSelected) {\n            buttonClass = `btn btn-primary image-editor-tool-button`;\n        }\n        return (\n            <div className=\"form-group\" key={t.name}>\n                <button className={buttonClass} onClick={() => onSelectTool(t)}>\n                    <i className={t.iconClass}></i>\n                </button>\n                {/* capitalize tool name */}\n                <label>\n                    {t.name.charAt(0).toUpperCase() + t.name.slice(1)}\n                </label>\n                {isSelected && t.renderControls(tool!, renderer!)}\n            </div>\n        );\n    }\n\n    function onResize() {}\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                        <i\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => history.goBack()}\n                            className=\"fas fa-chevron-left\"\n                        ></i>\n                        &nbsp; AI Edit\n                    </h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-lg-3\">\n                    {renderer && <>{tools.map((tool) => renderTool(tool))}</>}\n                </div>\n                <div className=\"col-lg-9\">\n                    <div style={{ verticalAlign: \"middle\" }}>\n                        {showSelectionControls && (\n                            <>\n                                <div\n                                    style={{ float: \"left\", marginTop: \"45%\" }}\n                                >\n                                    <button\n                                        // center vertically\n\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => tool!.select(\"left\")}\n                                    >\n                                        <i className=\"fas fa-chevron-left\"></i>\n                                    </button>\n                                </div>\n                                <div\n                                    style={{ float: \"right\", marginTop: \"45%\" }}\n                                >\n                                    <button\n                                        // center vertically\n\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => tool!.select(\"right\")}\n                                    >\n                                        <i className=\"fas fa-chevron-right\"></i>\n                                    </button>\n                                </div>\n                            </>\n                        )}\n\n                        <canvas\n                            style={{cursor: \"none\"}}\n                            ref={canvasRef}\n                            className=\"image-editor-canvas\"\n                            onMouseDown={(e) => tool && tool.onMouseDown(e)}\n                            onMouseMove={(e) => tool && tool.onMouseMove(e)}\n                            onMouseUp={(e) => tool && tool.onMouseUp(e)}\n                            onMouseLeave={(e) => tool && tool.onMouseLeave(e)}\n                            // onWheel={e => tool && tool.onWheel(e)}\n                        />\n                    </div>\n                    <div className=\"row\">\n                        <button\n                            className=\"btn btn-primary\"\n                            // center horizontally\n                            style={{\n                                position: \"absolute\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, 0)\",\n                            }}\n                            onClick={() => {\n                                if (renderer) {\n                                    renderer.updateZoomAndOffset(1, 0, 0);\n                                }\n                            }}\n                        >\n                            Reset View\n                        </button>\n                    </div>\n                    {/* vertically center button within the div */}\n                </div>\n            </div>\n        </>\n    );\n};\n","\nexport interface Rect {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface Cursor {\n    x: number;\n    y: number;\n    radius: number;\n    color: string;\n    type: \"circle\" | \"circle-fill\" | \"colorpicker\";\n}\n\nclass renderer {\n\n    // private backgroundLayer: HTMLCanvasElement;\n    private baseImageLayer: HTMLCanvasElement;\n    private editLayer: HTMLCanvasElement;\n    private overlayLayer: HTMLCanvasElement;\n\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n    private hasSelection: boolean = false;\n    private cursor: Cursor | undefined;\n\n    private zoom: number;\n    private offsetX: number;\n    private offsetY: number;\n\n    constructor(private readonly canvas: HTMLCanvasElement) {\n        // invisible canvas elements\n        // this.backgroundLayer = document.createElement('canvas');\n        this.baseImageLayer = document.createElement('canvas');\n        this.editLayer = document.createElement('canvas');\n        this.overlayLayer = document.createElement('canvas');\n\n        this.zoom = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n    \n    render() {\n        const context = this.canvas.getContext('2d');\n        if (context) {\n            context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            // apply zoom and offset\n            context.setTransform(this.zoom, 0, 0, this.zoom, this.offsetX * this.zoom, this.offsetY * this.zoom);\n            // context.drawImage(this.backgroundLayer, 0, 0);\n            context.drawImage(this.baseImageLayer, 0, 0);\n            context.drawImage(this.editLayer, 0, 0);\n            if (!this.hasSelection) {\n                context.drawImage(this.overlayLayer, 0, 0);\n            }\n        }\n    }\n\n    getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    setBaseImage(image: HTMLImageElement) {\n        const context = this.baseImageLayer.getContext('2d');\n        if (context) {\n            // set size of all layers\n            // this.backgroundLayer.width = image.width;\n            // this.backgroundLayer.height = image.height;\n            this.baseImageLayer.width = image.width;\n            this.baseImageLayer.height = image.height;\n            this.editLayer.width = image.width;\n            this.editLayer.height = image.height;\n            this.overlayLayer.width = image.width;\n            this.overlayLayer.height = image.height;\n            // set canvas size\n            this.canvas.width = image.width;\n            this.canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n\n            // set 512x512 selection overlay at the center of the image\n            this.setSelectionOverlay({\n                x: (image.width - 512) / 2,\n                y: (image.height - 512) / 2,\n                width: 512,\n                height: 512,\n            });\n\n            this.render();\n        }\n    }\n\n    setEditImage(imageData: ImageData | null) {\n        this.hasSelection = !!imageData;\n        const context = this.editLayer.getContext('2d');\n        if (context && this.selectionOverlay) {\n            context.clearRect(0, 0, this.editLayer.width, this.editLayer.height);\n            if (imageData) {\n                context.putImageData(imageData, this.selectionOverlay.x, this.selectionOverlay.y);\n            }\n            this.render();\n        }\n    }\n\n    private drawOverlay() {\n        const lineWidth = Math.max(this.canvas.width / 512, this.canvas.height / 512);\n        const context = this.overlayLayer.getContext('2d');\n        if (context) {\n            context.clearRect(0, 0, this.overlayLayer.width, this.overlayLayer.height);\n            context.strokeStyle = 'gray';\n            context.lineWidth = lineWidth;\n            context.strokeRect(0, 0, this.overlayLayer.width, this.overlayLayer.height);\n            \n            if (this.selectionOverlay) {\n                context.strokeStyle = 'white';\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlay.x,\n                    this.selectionOverlay.y,\n                    this.selectionOverlay.width,\n                    this.selectionOverlay.height,\n                );\n            }\n            if (this.selectionOverlayPreview) {\n                context.strokeStyle = 'cyan';\n                context.lineWidth = lineWidth;\n                context.strokeRect(\n                    this.selectionOverlayPreview.x,\n                    this.selectionOverlayPreview.y,\n                    this.selectionOverlayPreview.width,\n                    this.selectionOverlayPreview.height,\n                );\n            }\n            if (this.cursor) {\n                if (this.cursor.type === 'circle') {\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(this.cursor.x, this.cursor.y, this.cursor.radius, 0, 2 * Math.PI);\n                    context.stroke();\n                } else if (this.cursor.type === 'circle-fill') {\n                    context.fillStyle = this.cursor.color;\n                    // context.lineWidth = lineWidth;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(this.cursor.x, this.cursor.y, this.cursor.radius, 0, 2 * Math.PI);\n                    context.fill();\n                } else if (this.cursor.type === 'colorpicker') {\n                    // TODO: add croshairs\n                    context.lineWidth = this.cursor.radius * 0.75;\n                    context.strokeStyle = this.cursor.color;\n                    // context.globalAlpha = 0.5;\n                    context.beginPath();\n                    context.arc(this.cursor.x, this.cursor.y, this.cursor.radius, 0, 2 * Math.PI);\n                    context.stroke();\n\n                    // draw crosshairs (black)\n                    context.lineWidth = lineWidth;\n                    context.strokeStyle = 'black';\n                    context.beginPath();\n                    context.moveTo(this.cursor.x - this.cursor.radius, this.cursor.y);\n                    context.lineTo(this.cursor.x + this.cursor.radius, this.cursor.y);\n                    context.moveTo(this.cursor.x, this.cursor.y - this.cursor.radius);\n                    context.lineTo(this.cursor.x, this.cursor.y + this.cursor.radius);\n                    context.stroke();\n                }\n            }\n\n            this.render();\n        }\n    }\n\n    setSelectionOverlay(selectionOverlay: Rect | undefined) {\n        this.selectionOverlay = selectionOverlay;\n        this.drawOverlay();\n    }\n\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined) {\n        this.selectionOverlayPreview = selectionOverlayPreview;\n        this.drawOverlay();\n    }\n\n    setCursor(cursor: Cursor | undefined) {\n        this.cursor = cursor;\n        this.drawOverlay();\n    }\n\n    getSelectionOverlay(): Rect | undefined {\n        return this.selectionOverlay;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getOffsetX(): number {\n        return this.offsetX;\n    }\n\n    getOffsetY(): number {\n        return this.offsetY;\n    }\n\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number) {\n        this.zoom = zoom;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.render();\n    }\n\n    getWidth(): number {\n        return this.canvas.width;\n    }\n\n    getHeight(): number {\n        return this.canvas.height;\n    }\n\n\n    getEncodedImage(selection: Rect | null): string | undefined {\n        const imageData = this.getImageData(selection);\n        if (imageData) {\n            // create a canvas and draw the image data on it\n            const canvas = document.createElement('canvas');\n            canvas.width = imageData.width;\n            canvas.height = imageData.height;\n            const context = canvas.getContext('2d');\n            if (context) {\n                context.putImageData(imageData, 0, 0);\n                // return the data url of the canvas\n                const result = canvas.toDataURL(\"image/jpeg\");\n                // cleanup the canvas\n                canvas.remove();\n                // extract base64 data from data url\n                return result.split(',')[1];\n            }\n        }\n    }\n\n    getImageData(selection: Rect | null): ImageData | undefined {\n        if (!selection) {\n            selection = {\n                x: 0,\n                y: 0,\n                width: this.canvas.width,\n                height: this.canvas.height,\n            }\n        }\n        // get image data of the selection\n        let context = this.baseImageLayer.getContext('2d');\n        if (context) {\n            const imageData = context.getImageData(\n                selection.x,\n                selection.y,\n                selection.width,\n                selection.height,\n            );\n            return imageData;\n        }\n    }\n\n    commitSelection() {\n        // draw the selection overlay on the base image layer\n        const context = this.baseImageLayer.getContext('2d');\n        if (context) {\n            context.drawImage(this.editLayer, 0, 0);\n            this.setEditImage(null);\n        }\n    }\n\n    drawPoint(x: number, y: number, brushSize: number, color: string): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext('2d');\n        if (context) {\n            context.fillStyle = color;\n            context.beginPath();\n            context.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n            context.fill();\n        }\n        this.render();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, brushSize: number, color: string): void {\n        // draw on selection layer\n        const context = this.editLayer.getContext('2d');\n        if (context) {\n            context.strokeStyle = color;\n            context.lineWidth = brushSize;\n            context.lineCap = 'round';\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n        this.render();\n    }\n\n    smudgeLine(x1: number, y1: number, x2: number, y2: number, brushSize: number, brushOpacity: number): void {\n        const unitVector = {\n            x: x2 - x1,\n            y: y2 - y1,\n        };\n        const length = Math.sqrt(unitVector.x * unitVector.x + unitVector.y * unitVector.y);\n        unitVector.x /= length;\n        unitVector.y /= length;\n\n        // for each point on the line, get image data (brushSize x brushSize) from edit layer\n        // average pixel values that are within the brush circle.\n        // update the image data with the averaged pixel values in the\n        // brush circle, then put the image data back on the edit layer\n        // at the point on the line\n\n        const context = this.editLayer.getContext('2d');\n        if (context) {\n            for (let i = 0; i < length; i++) {\n                const x = x1 + i * unitVector.x;\n                const y = y1 + i * unitVector.y;\n\n                const imageData = context.getImageData(\n                    x - brushSize / 2,\n                    y - brushSize / 2,\n                    brushSize,\n                    brushSize,\n                );\n\n                let totalRed = 0;\n                let totalGreen = 0;\n                let totalBlue = 0;\n                let count = 0.0;\n\n                // average pixel values\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt((x - brushSize / 2) * (x - brushSize / 2) + (y - brushSize / 2) * (y - brushSize / 2));\n                        if (distance <= brushSize / 2) {\n                            // get the pixel value from the image data\n                            const r = imageData.data[index];\n                            const g = imageData.data[index + 1];\n                            const b = imageData.data[index + 2];\n\n                            totalRed += r;\n                            totalGreen += g;\n                            totalBlue += b;\n                            count++;\n                        }\n                    }\n                }\n\n                // update the image data with the averaged pixel values\n                // these need to be weighted by the brush opacity\n                const averageRed = totalRed / count;\n                const averageGreen = totalGreen / count;\n                const averageBlue = totalBlue / count;\n                for (let y = 0; y < imageData.height; y++) {\n                    for (let x = 0; x < imageData.width; x++) {\n                        const index = (y * imageData.width + x) * 4;\n                        const distance = Math.sqrt((x - brushSize / 2) * (x - brushSize / 2) + (y - brushSize / 2) * (y - brushSize / 2));\n                        if (distance <= brushSize / 2) {\n                            imageData.data[index] = averageRed * brushOpacity + imageData.data[index] * (1 - brushOpacity);\n                            imageData.data[index + 1] = averageGreen * brushOpacity + imageData.data[index + 1] * (1 - brushOpacity);\n                            imageData.data[index + 2] = averageBlue * brushOpacity + imageData.data[index + 2] * (1 - brushOpacity);\n                        }\n                    }\n                }\n\n                // put the image data back on the edit layer\n                context.putImageData(imageData, x - brushSize / 2, y - brushSize / 2);\n            }\n        }\n        this.render();\n    }\n\n    getPixel(x: number, y: number): string {\n        const context = this.baseImageLayer.getContext('2d');\n        // get pixel as hex string\n        if (context) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n            return \"#\" + (\"000000\" + rgbToHex(pixel[0], pixel[1], pixel[2])).slice(-6);\n        }\n        return '#000000';\n    }\n\n    copyEditImageFromBaseImage(): void {\n        // copy the base image to the edit layer\n        const context = this.editLayer.getContext('2d');\n        if (context) {\n            context.drawImage(this.baseImageLayer, 0, 0);\n        }\n        this.render();\n    }\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    if (r > 255 || g > 255 || b > 255)\n        throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nexport interface Renderer {\n    render(): void;\n    getCanvas(): HTMLCanvasElement;\n    setBaseImage(image: HTMLImageElement): void;\n    setEditImage(imageData: ImageData | null): void;\n    copyEditImageFromBaseImage(): void;\n    setSelectionOverlay(selectionOverlay: Rect | undefined): void;\n    setSelectionOverlayPreview(selectionOverlayPreview: Rect | undefined): void;\n    setCursor(cursor: Cursor | undefined): void;\n    getSelectionOverlay(): Rect | undefined;\n    getZoom(): number;\n    getOffsetX(): number;\n    getOffsetY(): number;\n    getPixel(x: number, y: number): string;\n    updateZoomAndOffset(zoom: number, offsetX: number, offsetY: number): void;\n    getWidth(): number;\n    getHeight(): number;\n    getEncodedImage(selection: Rect | null): string | undefined;\n    getImageData(selection: Rect | null): ImageData | undefined;\n    commitSelection(): void;\n    drawPoint(x: number, y: number, brushSize: number, color: string): void;\n    drawLine(x1: number, y1: number, x2: number, y2: number, brushSize: number, color: string): void;\n    smudgeLine(x1: number, y1: number, x2: number, y2: number, brushSize: number, brushOpacity: number): void;\n}\n\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n    return new renderer(canvas);\n}","export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => window.setTimeout(resolve, ms));\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport loadImage from \"blueimp-load-image\";\nimport saveAs from \"file-saver\";\n\nimport { AIBrushApi } from \"../../client\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\n\ninterface Props {\n    renderer: Renderer;\n    tool: BaseTool;\n    api: AIBrushApi;\n}\n\nexport const ImportExportControls: FC<Props> = ({ renderer, tool }) => {\n\n    const [backupImage, setBackupImage] = useState<string | undefined>();\n\n    const onImageSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            loadImage(\n                files[0],\n                (img) => {\n                    const backupImage = renderer.getEncodedImage(null);\n                    setBackupImage(backupImage);\n                    renderer.setBaseImage(img as HTMLImageElement);\n                },\n                { canvas: false }\n            );\n        }\n    };\n\n    const onExport = () => {\n        const encodedImage = renderer.getEncodedImage(null);\n        if (encodedImage) {\n            // base64 decode\n            const byteString = atob(encodedImage);\n            // save as file\n            const buffer = new ArrayBuffer(byteString.length);\n            const intArray = new Uint8Array(buffer);\n            for (let i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            const blob = new Blob([intArray], { type: \"image/jpeg\" });\n            saveAs(blob, \"image.jpg\");\n        }\n    };\n\n    if (backupImage) {\n        return (\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <button\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        const img = new Image();\n                        // set src as data uri\n                        const src = \"data:image/png;base64,\" + backupImage;\n                        img.src = src;\n                        img.onload = () => {\n                            renderer.setBaseImage(img);\n                        };\n                    }}\n                >\n                    Revert\n                </button>\n                <button\n                    onClick={() => {\n                        setBackupImage(undefined);\n                        if (tool.saveListener) {\n                            tool.saveListener(backupImage);\n                        }\n                    }}\n                >\n                    Save\n                </button>\n            </div>\n        );\n    }\n\n    // Show buttons for import and export and \"save a copy\"\n    return (\n        <>\n            <div className=\"form-group\" style={{marginTop: \"16px\"}}>\n                <label\n                    id=\"loadimage-wrapper\"\n                    className={`btn btn-primary `}\n                    style={{ display: \"inline\" }}\n                >\n                    {/* upload image */}\n                    <i className=\"fas fa-upload\"></i>&nbsp; Import Image\n                    <input\n                        id=\"loadimage\"\n                        type=\"file\"\n                        style={{ display: \"none\" }}\n                        onChange={onImageSelected}\n                    />\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        onExport();\n                    }}\n                    style={{ marginLeft: \"8px\"}}\n                >\n                    <i className=\"fas fa-download\"></i>&nbsp; Export Image\n                </button>\n            </div>\n        </>\n    );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AssetsUrl\n */\nexport interface AssetsUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetsUrl\n     */\n    assets_url: string;\n}\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    status?: CreateImageInputStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    negative_phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_mask?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_video?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    model?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_skip_iterations?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_clip_guidance?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    glid_3_xl_clip_guidance_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    height?: CreateImageInputHeightEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    width?: CreateImageInputWidthEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    uncrop_offset_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    uncrop_offset_y?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    stable_diffusion_strength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    count?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    nsfw?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputHeightEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateImageInputWidthEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n\n/**\n * \n * @export\n * @interface CreateServiceAccountInput\n */\nexport interface CreateServiceAccountInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateServiceAccountInput\n     */\n    type?: CreateServiceAccountInputTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateServiceAccountInputTypeEnum {\n    Public = 'public',\n    Private = 'private'\n}\n\n/**\n * \n * @export\n * @interface CreateSuggestionsJobInput\n */\nexport interface CreateSuggestionsJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateSuggestionsJobInput\n     */\n    seed_id?: string;\n}\n/**\n * \n * @export\n * @interface CreateSvgJobInput\n */\nexport interface CreateSvgJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateSvgJobInput\n     */\n    image_id?: string;\n}\n/**\n * \n * @export\n * @interface CreateWorkflowEventInput\n */\nexport interface CreateWorkflowEventInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowEventInput\n     */\n    workflow_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowEventInput\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface CreateWorkflowInput\n */\nexport interface CreateWorkflowInput {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    workflow_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    config_json: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    data_json: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateWorkflowInput\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkflowInput\n     */\n    state: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateWorkflowInput\n     */\n    execution_delay: number;\n}\n/**\n * \n * @export\n * @interface FeatureList\n */\nexport interface FeatureList {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    terms_uri?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureList\n     */\n    privacy_uri?: string;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    phrases: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    negative_phrases: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    current_iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    negative_score: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    status: ImageStatusEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_video: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_zoom?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_frequency?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_x?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    zoom_shift_y?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    model: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    glid_3_xl_skip_iterations?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    glid_3_xl_clip_guidance?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    glid_3_xl_clip_guidance_scale?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    width: ImageWidthEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    height: ImageHeightEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    uncrop_offset_x?: ImageUncropOffsetXEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    uncrop_offset_y?: ImageUncropOffsetYEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    stable_diffusion_strength: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    nsfw: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageWidthEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageHeightEnum {\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896,\n    NUMBER_1024 = 1024\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageUncropOffsetXEnum {\n    NUMBER_MINUS_896 = -896,\n    NUMBER_MINUS_768 = -768,\n    NUMBER_MINUS_640 = -640,\n    NUMBER_MINUS_512 = -512,\n    NUMBER_MINUS_384 = -384,\n    NUMBER_MINUS_256 = -256,\n    NUMBER_MINUS_128 = -128,\n    NUMBER_0 = 0,\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageUncropOffsetYEnum {\n    NUMBER_MINUS_896 = -896,\n    NUMBER_MINUS_768 = -768,\n    NUMBER_MINUS_640 = -640,\n    NUMBER_MINUS_512 = -512,\n    NUMBER_MINUS_384 = -384,\n    NUMBER_MINUS_256 = -256,\n    NUMBER_MINUS_128 = -128,\n    NUMBER_0 = 0,\n    NUMBER_128 = 128,\n    NUMBER_256 = 256,\n    NUMBER_384 = 384,\n    NUMBER_512 = 512,\n    NUMBER_640 = 640,\n    NUMBER_768 = 768,\n    NUMBER_896 = 896\n}\n\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface InviteCode\n */\nexport interface InviteCode {\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof InviteCode\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InviteCode\n     */\n    created_by?: string;\n}\n/**\n * \n * @export\n * @interface IsAdminResponse\n */\nexport interface IsAdminResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof IsAdminResponse\n     */\n    is_admin?: boolean;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    invite_code?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface ProcessImageInput\n */\nexport interface ProcessImageInput {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ProcessImageInput\n     */\n    zoom_supported: boolean;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface SuggestionSeed\n */\nexport interface SuggestionSeed {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    description: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionSeed\n     */\n    items: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeed\n     */\n    created_by: string;\n}\n/**\n * \n * @export\n * @interface SuggestionSeedInput\n */\nexport interface SuggestionSeedInput {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeedInput\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionSeedInput\n     */\n    description?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionSeedInput\n     */\n    items: Array<string>;\n}\n/**\n * \n * @export\n * @interface SuggestionSeedList\n */\nexport interface SuggestionSeedList {\n    /**\n     * \n     * @type {Array<SuggestionSeed>}\n     * @memberof SuggestionSeedList\n     */\n    suggestionSeeds: Array<SuggestionSeed>;\n}\n/**\n * \n * @export\n * @interface SuggestionsJob\n */\nexport interface SuggestionsJob {\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SuggestionsJob\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SuggestionsJob\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    seed_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SuggestionsJob\n     */\n    status: SuggestionsJobStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SuggestionsJob\n     */\n    result: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SuggestionsJobStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n\n/**\n * \n * @export\n * @interface SuggestionsJobList\n */\nexport interface SuggestionsJobList {\n    /**\n     * \n     * @type {Array<SuggestionsJob>}\n     * @memberof SuggestionsJobList\n     */\n    suggestionsJobs?: Array<SuggestionsJob>;\n}\n/**\n * \n * @export\n * @interface SvgJob\n */\nexport interface SvgJob {\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SvgJob\n     */\n    created_at: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SvgJob\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    image_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SvgJob\n     */\n    status: SvgJobStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SvgJobStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed'\n}\n\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    current_iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    status?: UpdateImageInputStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_npy?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    score?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    negative_score?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateImageInput\n     */\n    nsfw?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved',\n    Error = 'error'\n}\n\n/**\n * \n * @export\n * @interface UpdateSuggestionsJobInput\n */\nexport interface UpdateSuggestionsJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateSuggestionsJobInput\n     */\n    status?: UpdateSuggestionsJobInputStatusEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateSuggestionsJobInput\n     */\n    result?: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateSuggestionsJobInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface UpdateSvgJobInput\n */\nexport interface UpdateSvgJobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateSvgJobInput\n     */\n    result?: string;\n}\n/**\n * \n * @export\n * @interface UpdateWorkflowInput\n */\nexport interface UpdateWorkflowInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    data_json?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    config_json?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkflowInput\n     */\n    is_active?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkflowInput\n     */\n    state?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkflowInput\n     */\n    execution_delay?: number;\n}\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof User\n     */\n    active?: boolean;\n}\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n/**\n * \n * @export\n * @interface Workflow\n */\nexport interface Workflow {\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    created_by: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    workflow_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    config_json: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workflow\n     */\n    data_json: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Workflow\n     */\n    is_active: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Workflow\n     */\n    execution_delay: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Workflow\n     */\n    next_execution: number;\n}\n/**\n * \n * @export\n * @interface WorkflowEvent\n */\nexport interface WorkflowEvent {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowEvent\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowEvent\n     */\n    workflow_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof WorkflowEvent\n     */\n    created_at?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkflowEvent\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface WorkflowEventList\n */\nexport interface WorkflowEventList {\n    /**\n     * \n     * @type {Array<WorkflowEvent>}\n     * @memberof WorkflowEventList\n     */\n    workflowEvents: Array<WorkflowEvent>;\n}\n/**\n * \n * @export\n * @interface WorkflowList\n */\nexport interface WorkflowList {\n    /**\n     * \n     * @type {Array<Workflow>}\n     * @memberof WorkflowList\n     */\n    workflows: Array<Workflow>;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/invite-codes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (createServiceAccountInput?: CreateServiceAccountInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/service-accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createServiceAccountInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionSeed: async (suggestionSeedInput?: SuggestionSeedInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestion-seeds`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(suggestionSeedInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionsJob: async (createSuggestionsJobInput?: CreateSuggestionsJobInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestions-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createSuggestionsJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new svg job\n         * @param {CreateSvgJobInput} [createSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSvgJob: async (createSvgJobInput?: CreateSvgJobInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/svg-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createSvgJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new workflow\n         * @param {CreateWorkflowInput} [createWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflow: async (createWorkflowInput?: CreateWorkflowInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/workflows`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new workflow event\n         * @param {string} workflowId \n         * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflowEvent: async (workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('createWorkflowEvent', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}/events`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowEventInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionSeed: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionsJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a svg job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSvgJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteSvgJob', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkflow: async (workflowId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('deleteWorkflow', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/assets-url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/features`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/api/images/{id}.image.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMaskData', 'id', id)\n            const localVarPath = `/api/images/{id}.mask.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNpyData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getNpyData', 'id', id)\n            const localVarPath = `/api/images/{id}.npy`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionSeed: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionsJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJob: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSvgJob', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJobResult: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getSvgJobResult', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}/result.svg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/api/images/{id}.thumbnail.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getVideoData', 'id', id)\n            const localVarPath = `/api/images/{id}.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflow: async (workflowId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflow', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflow events\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowEvents: async (workflowId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('getWorkflowEvents', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}/events`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the workflows\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflows: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/workflows`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/is-admin`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, limit?: number, direction?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionSeeds: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestion-seeds`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionsJobs: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/suggestions-jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage: async (processImageInput?: ProcessImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-image`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(processImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSuggestionsJob: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-suggestion-job`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Process a svg job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSvgJob: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-svg-job`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending workflow and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processWorkflow: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/process-workflow`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/api/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionSeed: async (id: string, suggestionSeedInput?: SuggestionSeedInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSuggestionSeed', 'id', id)\n            const localVarPath = `/api/suggestion-seeds/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(suggestionSeedInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionsJob: async (id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSuggestionsJob', 'id', id)\n            const localVarPath = `/api/suggestions-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateSuggestionsJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a svg job\n         * @param {string} id \n         * @param {UpdateSvgJobInput} [updateSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSvgJob: async (id: string, updateSvgJobInput?: UpdateSvgJobInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateSvgJob', 'id', id)\n            const localVarPath = `/api/svg-jobs/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateSvgJobInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateVideoData', 'id', id)\n            const localVarPath = `/api/images/{id}.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'video/mp4';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the workflow\n         * @param {string} workflowId \n         * @param {UpdateWorkflowInput} [updateWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkflow: async (workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workflowId' is not null or undefined\n            assertParamExists('updateWorkflow', 'workflowId', workflowId)\n            const localVarPath = `/api/workflows/{workflow_id}`\n                .replace(`{${\"workflow_id\"}}`, encodeURIComponent(String(workflowId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkflowInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createInviteCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteCode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteCode(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceAccount(createServiceAccountInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSuggestionSeed(suggestionSeedInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSuggestionsJob(createSuggestionsJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new svg job\n         * @param {CreateSvgJobInput} [createSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSvgJob(createSvgJobInput?: CreateSvgJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSvgJob(createSvgJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new workflow\n         * @param {CreateWorkflowInput} [createWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkflow(createWorkflowInput?: CreateWorkflowInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflow(createWorkflowInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a new workflow event\n         * @param {string} workflowId \n         * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkflowEvent(workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflowEvent(workflowId, createWorkflowEventInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSuggestionSeed(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSuggestionSeed(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSuggestionsJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSuggestionsJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a svg job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteSvgJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSvgJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorkflow(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflow(workflowId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetsUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetsUrl>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsUrl(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeatures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaskData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaskData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNpyData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNpyData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSuggestionSeed(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuggestionSeed(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSuggestionsJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuggestionsJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSvgJob(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSvgJob(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSvgJobResult(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSvgJobResult(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getVideoData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflow(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflow(workflowId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the workflow events\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflowEvents(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowEventList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowEvents(workflowId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the workflows\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkflows(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflows(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isAdmin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsAdminResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isAdmin(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, limit, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSuggestionSeeds(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeedList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestionSeeds(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listSuggestionsJobs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJobList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestionsJobs(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processImage(processImageInput?: ProcessImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processImage(processImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processSuggestionsJob(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processSuggestionsJob(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Process a svg job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processSvgJob(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processSvgJob(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending workflow and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processWorkflow(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processWorkflow(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionSeed>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSuggestionSeed(id, suggestionSeedInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestionsJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSuggestionsJob(id, updateSuggestionsJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a svg job\n         * @param {string} id \n         * @param {UpdateSvgJobInput} [updateSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateSvgJob(id: string, updateSvgJobInput?: UpdateSvgJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SvgJob>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSvgJob(id, updateSvgJobInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateVideoData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideoData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the workflow\n         * @param {string} workflowId \n         * @param {UpdateWorkflowInput} [updateWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkflow(workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflow(workflowId, updateWorkflowInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new invite code\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createInviteCode(options?: any): AxiosPromise<InviteCode> {\n            return localVarFp.createInviteCode(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a service account\n         * @param {CreateServiceAccountInput} [createServiceAccountInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.createServiceAccount(createServiceAccountInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new suggestion seed\n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.createSuggestionSeed(suggestionSeedInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new suggestions job\n         * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.createSuggestionsJob(createSuggestionsJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new svg job\n         * @param {CreateSvgJobInput} [createSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSvgJob(createSvgJobInput?: CreateSvgJobInput, options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.createSvgJob(createSvgJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new workflow\n         * @param {CreateWorkflowInput} [createWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflow(createWorkflowInput?: CreateWorkflowInput, options?: any): AxiosPromise<Workflow> {\n            return localVarFp.createWorkflow(createWorkflowInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new workflow event\n         * @param {string} workflowId \n         * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkflowEvent(workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options?: any): AxiosPromise<WorkflowEvent> {\n            return localVarFp.createWorkflowEvent(workflowId, createWorkflowEventInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a suggestion seed\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionSeed(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSuggestionSeed(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a suggestions job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSuggestionsJob(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSuggestionsJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a svg job\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteSvgJob(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteSvgJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkflow(workflowId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteWorkflow(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the assets url\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetsUrl(options?: any): AxiosPromise<AssetsUrl> {\n            return localVarFp.getAssetsUrl(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the features\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeatures(options?: any): AxiosPromise<FeatureList> {\n            return localVarFp.getFeatures(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary mask data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaskData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getMaskData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNpyData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getNpyData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a suggestion seed by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionSeed(id: string, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.getSuggestionSeed(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a suggestions job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSuggestionsJob(id: string, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.getSuggestionsJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJob(id: string, options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.getSvgJob(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a svg job by id\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSvgJobResult(id: string, options?: any): AxiosPromise<string> {\n            return localVarFp.getSvgJobResult(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getVideoData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflow(workflowId: string, options?: any): AxiosPromise<Workflow> {\n            return localVarFp.getWorkflow(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflow events\n         * @param {string} workflowId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflowEvents(workflowId: string, options?: any): AxiosPromise<WorkflowEventList> {\n            return localVarFp.getWorkflowEvents(workflowId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the workflows\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkflows(options?: any): AxiosPromise<WorkflowList> {\n            return localVarFp.getWorkflows(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Check if the user is admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isAdmin(options?: any): AxiosPromise<IsAdminResponse> {\n            return localVarFp.isAdmin(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, limit, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of suggestion seeds\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionSeeds(options?: any): AxiosPromise<SuggestionSeedList> {\n            return localVarFp.listSuggestionSeeds(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of suggestions jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listSuggestionsJobs(options?: any): AxiosPromise<SuggestionsJobList> {\n            return localVarFp.listSuggestionsJobs(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {ProcessImageInput} [processImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage(processImageInput?: ProcessImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.processImage(processImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Process a suggestions job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSuggestionsJob(options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.processSuggestionsJob(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Process a svg job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processSvgJob(options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.processSvgJob(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending workflow and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processWorkflow(options?: any): AxiosPromise<Workflow> {\n            return localVarFp.processWorkflow(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a suggestion seed\n         * @param {string} id \n         * @param {SuggestionSeedInput} [suggestionSeedInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any): AxiosPromise<SuggestionSeed> {\n            return localVarFp.updateSuggestionSeed(id, suggestionSeedInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a suggestions job\n         * @param {string} id \n         * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any): AxiosPromise<SuggestionsJob> {\n            return localVarFp.updateSuggestionsJob(id, updateSuggestionsJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a svg job\n         * @param {string} id \n         * @param {UpdateSvgJobInput} [updateSvgJobInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateSvgJob(id: string, updateSvgJobInput?: UpdateSvgJobInput, options?: any): AxiosPromise<SvgJob> {\n            return localVarFp.updateSvgJob(id, updateSvgJobInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.updateVideoData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the workflow\n         * @param {string} workflowId \n         * @param {UpdateWorkflowInput} [updateWorkflowInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkflow(workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options?: any): AxiosPromise<Workflow> {\n            return localVarFp.updateWorkflow(workflowId, updateWorkflowInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new invite code\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createInviteCode(options?: any) {\n        return AIBrushApiFp(this.configuration).createInviteCode(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a service account\n     * @param {CreateServiceAccountInput} [createServiceAccountInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createServiceAccount(createServiceAccountInput?: CreateServiceAccountInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createServiceAccount(createServiceAccountInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new suggestion seed\n     * @param {SuggestionSeedInput} [suggestionSeedInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSuggestionSeed(suggestionSeedInput?: SuggestionSeedInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSuggestionSeed(suggestionSeedInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new suggestions job\n     * @param {CreateSuggestionsJobInput} [createSuggestionsJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSuggestionsJob(createSuggestionsJobInput?: CreateSuggestionsJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSuggestionsJob(createSuggestionsJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new svg job\n     * @param {CreateSvgJobInput} [createSvgJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createSvgJob(createSvgJobInput?: CreateSvgJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createSvgJob(createSvgJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new workflow\n     * @param {CreateWorkflowInput} [createWorkflowInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createWorkflow(createWorkflowInput?: CreateWorkflowInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createWorkflow(createWorkflowInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new workflow event\n     * @param {string} workflowId \n     * @param {CreateWorkflowEventInput} [createWorkflowEventInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createWorkflowEvent(workflowId: string, createWorkflowEventInput?: CreateWorkflowEventInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createWorkflowEvent(workflowId, createWorkflowEventInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a suggestion seed\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSuggestionSeed(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSuggestionSeed(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a suggestions job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSuggestionsJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSuggestionsJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a svg job\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteSvgJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteSvgJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete the workflow\n     * @param {string} workflowId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteWorkflow(workflowId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteWorkflow(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the assets url\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getAssetsUrl(options?: any) {\n        return AIBrushApiFp(this.configuration).getAssetsUrl(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the features\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getFeatures(options?: any) {\n        return AIBrushApiFp(this.configuration).getFeatures(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary mask data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getMaskData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getMaskData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getNpyData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getNpyData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a suggestion seed by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSuggestionSeed(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSuggestionSeed(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a suggestions job by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSuggestionsJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSuggestionsJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a svg job by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSvgJob(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSvgJob(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a svg job by id\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getSvgJobResult(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getSvgJobResult(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary video data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getVideoData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getVideoData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow\n     * @param {string} workflowId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkflow(workflowId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkflow(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflow events\n     * @param {string} workflowId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkflowEvents(workflowId: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkflowEvents(workflowId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the workflows\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getWorkflows(options?: any) {\n        return AIBrushApiFp(this.configuration).getWorkflows(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Check if the user is admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public isAdmin(options?: any) {\n        return AIBrushApiFp(this.configuration).isAdmin(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, limit, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of suggestion seeds\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listSuggestionSeeds(options?: any) {\n        return AIBrushApiFp(this.configuration).listSuggestionSeeds(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of suggestions jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listSuggestionsJobs(options?: any) {\n        return AIBrushApiFp(this.configuration).listSuggestionsJobs(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending image and set its status to processing.\n     * @param {ProcessImageInput} [processImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processImage(processImageInput?: ProcessImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).processImage(processImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Process a suggestions job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processSuggestionsJob(options?: any) {\n        return AIBrushApiFp(this.configuration).processSuggestionsJob(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Process a svg job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processSvgJob(options?: any) {\n        return AIBrushApiFp(this.configuration).processSvgJob(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending workflow and set its status to processing.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processWorkflow(options?: any) {\n        return AIBrushApiFp(this.configuration).processWorkflow(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a suggestion seed\n     * @param {string} id \n     * @param {SuggestionSeedInput} [suggestionSeedInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSuggestionSeed(id: string, suggestionSeedInput?: SuggestionSeedInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSuggestionSeed(id, suggestionSeedInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a suggestions job\n     * @param {string} id \n     * @param {UpdateSuggestionsJobInput} [updateSuggestionsJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSuggestionsJob(id: string, updateSuggestionsJobInput?: UpdateSuggestionsJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSuggestionsJob(id, updateSuggestionsJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a svg job\n     * @param {string} id \n     * @param {UpdateSvgJobInput} [updateSvgJobInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateSvgJob(id: string, updateSvgJobInput?: UpdateSvgJobInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateSvgJob(id, updateSvgJobInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the video data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateVideoData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).updateVideoData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the workflow\n     * @param {string} workflowId \n     * @param {UpdateWorkflowInput} [updateWorkflowInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateWorkflow(workflowId: string, updateWorkflowInput?: UpdateWorkflowInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateWorkflow(workflowId, updateWorkflowInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://aibrush.ngrok.io\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import React from \"react\";\n\nexport interface Tool {\n    name: string;\n    getArgs(): any;\n    updateArgs(args: any): void;\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void;\n    onKeyDown(event: KeyboardEvent): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onWheel(event: WheelEvent): void;\n    destroy(): boolean;\n    onShowSelectionControls(listener: (show: boolean) => void): void;\n    select(direction: \"left\" | \"right\"): void;\n    onSaveImage(listener: (encodedImage: string) => void): void;\n}\n\nexport class BaseTool implements Tool {\n\n    saveListener?: (encodedImage: string) => void = () => {};\n\n    constructor(readonly name: string) {}\n\n    getArgs(): any {\n        return JSON.parse(\n            localStorage.getItem(`tool_args_${this.name}`) || \"{}\"\n        );\n    }\n    updateArgs(args: any) {\n        localStorage.setItem(`tool_args_${this.name}`, JSON.stringify(args));\n    }\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {}\n    onKeyDown(event: KeyboardEvent) {}\n    onKeyUp(event: KeyboardEvent) {}\n    onWheel(event: WheelEvent) {}\n    destroy(): boolean {\n        return true;\n    }\n    onShowSelectionControls(listener: (show: boolean) => void) {}\n    select(direction: \"left\" | \"right\") {}\n    onSaveImage(listener: (encodedImage: string) => void) {\n        this.saveListener = listener;\n    }\n}\n","// Login react component with hooks\nimport React, { useState, FC } from \"react\";\nimport * as axios from \"axios\";\nimport qs from \"qs\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\ninterface LoginProps {\n  httpClient: axios.AxiosInstance;\n  client: AIBrushApi;\n  onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = (props) => {\n  // login form accepts email only\n  const [email, setEmail] = useState(\"\");\n  const [emailSubmitted, setEmailSubmitted] = useState(false);\n  const [code, setCode] = useState(\"\");\n  const [err, setErr] = useState(\"\");\n\n  // check query string for invite_code\n  const query = window.location.search;\n  const queryParams = qs.parse(query.substring(1));\n  const inviteCode = queryParams[\"invite_code\"];\n\n  const onLogin = async () => {\n    // clear error\n    setErr(\"\");\n    // validate valid email\n    if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n      setErr(\"Invalid email address\");\n      return;\n    }\n\n    try {\n      await props.client.login({\n        email: email,\n        invite_code: inviteCode as string,\n      });\n      setEmailSubmitted(true);\n    } catch (err) {\n      console.error(err);\n      setErr(\"Could not login\");\n    }\n  };\n\n  const onVerify = async () => {\n    // clear error\n    setErr(\"\");\n    // attempt to verify code\n    try {\n      const result = await props.client.verify({\n        email,\n        code,\n      });\n      props.onLogin(result.data);\n    } catch (err) {\n      console.error(err);\n      setErr(\"Failed to verify code\");\n    }\n  };\n\n  // bootstrap login form\n  return (\n    <>\n      <div className=\"row\" style={{height: \"100vh\", marginLeft: \"0px\", marginRight: \"0px\"}}>\n        <div className=\"col-md-6 login-splash\">\n          {/* <div className=\"center-cropped\" style={{backgroundImage: \"url(/images/scifi-dreamland.jpg)\"}}></div> */}\n          <img\n            className=\"center-cropped\"\n            src=\"/images/scifi-dreamland.jpg\"\n          />\n        </div>\n        <div className=\"col-md-6\">\n          <div\n            style={{ fontWeight: 500, fontSize: \"48px\", marginTop: \"241px\" }}\n          >\n            AiBrush\n          </div>\n          {/* Display error if one is set */}\n          {/* Use <p class=\"text-danger\" */}\n          {err && <p className=\"text-danger\">{err}</p>}\n          {err && (\n            <p className=\"text-info\">\n              If you don't have an account yet, request one by sending an email\n              to <a href=\"mailto:admin@aibrush.art\">admin@aibrush.art</a>\n            </p>\n          )}\n          <div style={{marginLeft: \"10%\", marginRight: \"10%\", marginTop: \"88px\", textAlign: \"left\"}}>\n            {/* If email submitted, show verify code form*/}\n            {emailSubmitted && (\n              <>\n                <div className=\"form-group\">\n                  <label htmlFor=\"verifyCode\">Verify Code</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"verifyCode\"\n                    placeholder=\"Verification Code\"\n                    value={code}\n                    onChange={(e) => setCode(e.target.value)}\n                  />\n                </div>\n                {/* Cancel verification and go back to email */}\n                <button\n                  className=\"btn btn-secondary\"\n                  onClick={() => setEmailSubmitted(false)}\n                >\n                  Cancel\n                </button>\n                &nbsp;\n                {/* Verify code */}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    onVerify();\n                  }}\n                >\n                  Verify\n                </button>\n              </>\n            )}\n            {/* Else, show login form */}\n            {!emailSubmitted && (\n              <>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email address</label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"email\"\n                    aria-describedby=\"emailHelp\"\n                    placeholder=\"Enter email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  style={{float: \"right\"}}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    onLogin();\n                  }}\n                >\n                  Login\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials, api, onCredentialsRefreshed]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\nimport { AIBrushApi } from \"../client/api\";\n\ninterface HealthcheckerProps {\n    api: AIBrushApi;\n}\n\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\n    // automatically check health every 5 seconds\n    const [healthCheck, setHealthCheck] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [api]);\n\n    // only display bootstrap danger alert if healthcheck failed\n    // \"service is unavailable\"\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\n            <strong>Service is unavailable</strong>\n        </div>\n    );\n}\n\n","import React, { FC, useEffect, useState } from \"react\";\nimport { saveAs } from \"file-saver\";\n\nimport { AIBrushApi, CreateServiceAccountInputTypeEnum } from \"../client/api\";\n\ninterface Props {\n    api: AIBrushApi;\n}\n\nexport const WorkerConfigPage: FC<Props> = ({ api }) => {\n\n    const [type, setType] = useState<CreateServiceAccountInputTypeEnum>(CreateServiceAccountInputTypeEnum.Private);\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n\n    // show some information about what a worker is and does\n    // * a worker processes requests to create images with AIBrush\n    const info = (): JSX.Element => {\n        return (\n            <>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h2>Worker Config</h2>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>\n                            This page allows you to download a worker config file needed to access the AIBrush api.\n                            This file can be used to run a worker on a local or cloud machine, or a Colab notebook.\n                            Images worker requires an NVidia GPU with at least 12GB of VRAM, but at least 16GB is recommended.\n                            Suggestions worker requires an NVidia GPU with at least 16GB of VRAM.\n\n                            See the <a href=\"https://github.com/wolfgangmeyers/aibrush-2/tree/main/worker#readme\" target=\"_blank\">worker readme</a> for details on how to set up a worker process.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-6 offset-lg-3\">\n                        <hr/>\n                        <p>\n                            Here is a link to a Google Colab notebook that can be used as a worker node:\n                        </p>\n                        {/* Link to google colab notebook at https://colab.research.google.com/drive/1cW3vVjdeI19o7a9miMu47J5EDyHfZT20#scrollTo=Ed1iT6_JK0Mo */}\n                        <a className=\"btn btn-primary top-button\" href=\"https://colab.research.google.com/drive/1cW3vVjdeI19o7a9miMu47J5EDyHfZT20#scrollTo=Ed1iT6_JK0Mo\" target=\"_blank\">\n                            {/* font awesome google colab icon */}\n                            <i className=\"fab fa-google\"></i>&nbsp;\n                            Google Colab Notebook\n                        </a>\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    const download = async () => {\n        const creds = await api.createServiceAccount({\n            type: type\n        })\n        const blob = new Blob([JSON.stringify(creds.data)], { type: \"application/json\" });\n        saveAs(blob, \"credentials.json\");\n    }\n\n    // public / private dropdown\n    // download button\n    const form = (): JSX.Element => {\n        return (\n            <div className=\"row\">\n                {/* lg-6 with lg-3 offset */}\n                <div className=\"col-lg-6 offset-lg-3\">\n                    <form>\n                        {isAdmin && <div className=\"form-group\">\n                            <label htmlFor=\"type\">Type</label>\n                            <select className=\"form-control\" id=\"type\" value={type} onChange={(e) => setType(e.target.value as CreateServiceAccountInputTypeEnum)}>\n                                <option value=\"public\">Public</option>\n                                <option value=\"private\">Private</option>\n                            </select>\n                        </div>}\n                        <button type=\"submit\" className=\"btn btn-primary\" onClick={() => download()}>Download</button>\n                    </form>\n                </div>\n\n            </div>\n        )\n    }\n\n    useEffect(() => {\n        api.isAdmin().then(isAdmin => setIsAdmin(!!isAdmin.data.is_admin));\n    }, [])\n\n    return (\n        <>\n            {info()}\n            {form()}\n        </>\n    )\n}","import React, { FC, useState, useEffect, useRef } from 'react';\nimport { AIBrushApi,  } from \"../client/api\"\n\n\ninterface Props {\n    api: AIBrushApi\n}\n\nexport const Admin: FC<Props> = ({api}) => {\n\n    const [links, setLinks] = useState<string[]>([]);\n\n    const onGenerateLink = async () => {\n        const inviteCode = await api.createInviteCode();\n        setLinks([...links, `/?invite_code=${inviteCode.data.id}`]);\n    }\n\n    return (<>\n        {/* Header: Create new image */}\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <h1>Admin features</h1>\n            </div>\n        </div>\n        {/* 50px vertical spacer */}\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <div className=\"spacer\" />\n            </div>\n        </div>\n        {\n            links.length > 0 && <div className=\"row\">\n                <div className=\"col-12\">\n                    <p>\n                        Right click to copy invite links\n                    </p>\n                </div>\n            </div>\n        }\n        <div className=\"row\">\n            <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                {/* show a list of hyperlinks */}\n                <div className=\"btn-group-vertical\">\n                    {links.map((link, i) => <a key={i} href={link} className=\"btn btn-primary\">\n                        <i className=\"fas fa-link\" />&nbsp;\n                        Invite Link\n                    </a>)}\n                </div>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <div className=\"spacer\" />\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-12\">\n                {/* button to generate links */}\n                <button className=\"btn btn-primary\" onClick={onGenerateLink}>Generate Link</button>\n            </div>\n        </div>\n    </>)\n}","import React, { FC, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Image, ImageStatusEnum } from \"../client/api\";\n\ninterface Props {\n    assetsUrl: string;\n    image: Image;\n    onClick?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<Props> = ({ assetsUrl, image, onClick }) => {\n    const src = `${assetsUrl}/${image.id}.thumbnail.jpg?updated_at=${image.updated_at}`;\n    const [retry, setRetry] = useState(\"\");\n    const [hover, setHover] = useState(false);\n\n    // on mouse in/out, set hover state\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n\n    useEffect(() => {\n\n        // This is to help deal with eventual consistency from S3.\n        // if image.updated_at (unix timestamp in milliseconds) is less than a minute ago, try to reload the image\n        if (moment().diff(moment(image.updated_at), \"minutes\") < 1) {\n            setRetry(\"\");\n            const t = setTimeout(() => {\n                setRetry(\"&retry\")\n            }, 3000);\n            return () => clearTimeout(t);\n        }\n    }, [image.id, image.updated_at])\n\n    let label = image.label;\n    if (image.label === \"\") {\n        label = image.phrases[0];\n    }\n    \n\n    return (\n        <div\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            style={{\n                backgroundImage: `url(${src}${retry}), url(/images/default.jpg)`,\n                backgroundSize: \"contain\",\n                width: \"128px\",\n                height: \"128px\",\n                margin: \"8px\",\n                float: \"left\",\n                cursor: \"pointer\",\n                filter: image.nsfw ? \"blur(8px)\" : undefined,\n            }}\n            onClick={() => onClick && onClick(image)}\n        >\n            {hover && <div style={{\n                background: \"rgba(255, 255, 255, 0.5)\",\n                color: \"black\",\n                width: \"100%\",\n                height: \"100%\",\n                lineHeight: \"1\"\n            }}>\n                {label}\n            </div>}\n            {!hover && image.status === ImageStatusEnum.Pending && <div style={{\n                background: \"rgba(255, 255, 255, 0.3)\",\n                color: \"#555\",\n                width: \"100%\",\n                height: \"100%\",\n                fontSize: \"80px\"\n            }}>\n                {/* pending / wait symbol */}\n                <i style={{marginTop: \"20px\"}} className=\"fa fa-hourglass-half\"></i>\n            </div>}\n            {\n                !hover && image.status === ImageStatusEnum.Processing && <div style={{\n                    background: \"rgba(255, 255, 255, 0.3)\",\n                    color: \"#555\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    fontSize: \"80px\"\n                }}>\n                    <i style={{marginTop: \"20px\"}} className=\"fa fa-cog fa-spin\"></i>\n                </div>\n            }\n        </div>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { CreateImageInput, Image, ImageStatusEnum } from \"../client/api\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\n\ninterface ImagePopupProps {\n    assetsUrl: string;\n    image: Image;\n    onClose: () => void;\n    onDelete?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n    onEdit?: (image: Image) => void;\n    onUpscale?: (image: Image) => void;\n    onNSFW?: (image: Image, nsfw: boolean) => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({\n    assetsUrl,\n    image,\n    onClose,\n    onDelete,\n    onFork,\n    onEdit,\n    onUpscale,\n    onNSFW,\n}) => {\n    const img = useRef<HTMLImageElement>(null);\n    const src = `${assetsUrl}/${image.id}.image.jpg?updated_at=${image.updated_at}`;\n    let score = image.score;\n    if (\n        image.negative_phrases.join(\"\").trim() !== \"\" &&\n        image.negative_score != 0\n    ) {\n        score -= image.negative_score;\n    }\n    const [showNSFW, setShowNSFW] = useState(false);\n\n    const statusBadge = (status: string) => {\n        const displayStatus = status.charAt(0).toUpperCase() + status.slice(1);\n        let icon = \"fa fa-question-circle\";\n        switch (status) {\n            case ImageStatusEnum.Pending:\n                icon = \"fas fa-hourglass-half\";\n                break;\n            case ImageStatusEnum.Processing:\n                icon = \"fas fa-cog fa-spin\";\n                break;\n            case ImageStatusEnum.Completed:\n                icon = \"fas fa-check\";\n                break;\n            case ImageStatusEnum.Error:\n                icon = \"fas fa-exclamation-circle\";\n                break;\n        }\n        return (\n            <>\n                <span style={{ fontSize: \"24px\" }}>\n                    <i\n                        className={`${icon} status-badge status-badge-${status}`}\n                        style={{ fontSize: \"10px\", position: \"relative\", top: \"-1px\" }}\n                    ></i>\n                    &nbsp;{displayStatus}\n                </span>\n            </>\n        );\n    };\n\n    useEffect(() => {\n        if (!img.current) {\n            return;\n        }\n        img.current.onerror = () => {\n            if (!img.current) {\n                return;\n            }\n            img.current.src = \"/images/default.jpg\";\n        };\n    }, [img]);\n\n    let title = image.label;\n    if (!title) {\n        title = image.phrases[0];\n    }\n\n    const upscaleLevel = getUpscaleLevel(image.width!, image.height!);\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"xl\">\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img\n                    ref={img}\n                    style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"1024px\",\n                        display: \"block\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        filter: image.nsfw && !showNSFW ? \"blur(30px)\" : \"\",\n                    }}\n                    id={`image-popup-${image.id}`}\n                    src={src}\n                    alt={image.label}\n                />\n                {/* List these fields: status, iterations, phrases */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\"></div>\n                </div>\n                {/* controls */}\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"40px\" }}\n                        >\n                            {statusBadge(image.status)}\n                            <div style={{ float: \"right\" }}>\n                                {onFork &&\n                                    (image.status === ImageStatusEnum.Saved ||\n                                        image.status ===\n                                            ImageStatusEnum.Completed) && (\n                                        <button\n                                            className=\"btn btn-secondary btn-sm image-popup-button\"\n                                            onClick={() => onFork(image)}\n                                            style={{ marginRight: \"5px\" }}\n                                        >\n                                            <i className=\"fas fa-code-branch\"></i>\n                                            &nbsp;VARIATIONS\n                                        </button>\n                                    )}\n                                {onDelete && (\n                                    <button\n                                        className=\"btn btn-danger btn-sm image-popup-delete-button\"\n                                        onClick={() =>\n                                            onDelete && onDelete(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-trash-alt\"></i>\n                                        &nbsp;DELETE\n                                    </button>\n                                )}\n                                {onEdit && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() =>\n                                            onEdit && onEdit(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-edit\"></i>\n                                        &nbsp;EDIT\n                                    </button>\n                                )}\n                                {onUpscale && upscaleLevel < 2 && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() =>\n                                            onUpscale && onUpscale(image)\n                                        }\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-search-plus\"></i>\n                                        &nbsp;UPSCALE\n                                    </button>\n                                )}\n                                {image.nsfw && (\n                                    <button\n                                        className=\"btn btn-primary btn-sm image-popup-button\"\n                                        onClick={() => setShowNSFW(!showNSFW)}\n                                        style={{ marginRight: \"5px\" }}\n                                    >\n                                        <i className=\"fas fa-eye\"></i>\n                                        &nbsp;{showNSFW ? \"HIDE\" : \"SHOW\"}\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                        <div\n                            className=\"image-popup-controls\"\n                            style={{ marginTop: \"28px\", marginBottom: \"85px\" }}\n                        >\n                            <div>\n                                Similarity to prompt: {(score * 200).toFixed(2)}%\n                            </div>\n                            <div>\n                                Image dimensions: {image.width} x {image.height}\n                            </div>\n                            {onNSFW && <div>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={image.nsfw}\n                                    onChange={() => onNSFW(image, !image.nsfw)}\n                                />\n                                &nbsp;{image.nsfw ? \"Contains NSFW content\" : \"No NSFW content\"}\n                            </div>}\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n","// V2 page\nimport React, { FC, useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\nimport ScrollToTop from \"react-scroll-to-top\";\nimport { AIBrushApi } from \"../client\";\nimport { CreateImageInput, Image, ImageStatusEnum } from \"../client/api\";\nimport { ImageThumbnail } from \"../components/ImageThumbnailV2\";\nimport { ImagePrompt, defaultArgs } from \"../components/ImagePrompt\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ImagePopup } from \"../components/ImagePopupV2\";\n\ninterface Props {\n    api: AIBrushApi;\n    assetsUrl: string;\n}\n\nexport const Homepage: FC<Props> = ({ api, assetsUrl }) => {\n    const [creating, setCreating] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\n    const [parentImage, setParentImage] = useState<Image | null>(null);\n\n    const [images, setImages] = useState<Array<Image>>([]);\n    const [err, setErr] = useState<string | null>(null);\n    const [hasMore, setHasMore] = useState<boolean>(true);\n    const { id } = useParams<{ id?: string }>();\n    const history = useHistory();\n\n    useEffect(() => {\n        if (id) {\n            // check if the image is already loaded\n            const image = images.find((image) => image.id === id);\n            if (image) {\n                setSelectedImage(image);\n            }\n            // refresh\n            api.getImage(id).then((image) => {\n                setSelectedImage(image.data);\n            });\n        } else {\n            setSelectedImage(null);\n        }\n    }, [id]);\n\n    const onSubmit = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const newImages = await api.createImage(input);\n            setImages((images) => {\n                // there is a race condition where poll images can fire before this callback\n                // so double-check to avoid duplicates\n                const imagesToAdd = (newImages.data.images || []).filter(\n                    (image) => {\n                        return !images.find((i) => i.id === image.id);\n                    }\n                );\n                return [...imagesToAdd, ...images].sort(sortImages);\n            });\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onEditNewImage = async (input: CreateImageInput) => {\n        setCreating(true);\n        setParentImage(null);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const newImages = await api.createImage(input);\n            if (newImages.data.images) {\n                const image = newImages.data.images![0];\n                history.push(`/image-editor/${image.id}`);\n            }\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    };\n\n    const onNSFW = (image: Image, nsfw: boolean) => {\n        api.updateImage(image.id, { nsfw }).then((res) => {\n            setImages((images) => {\n                return images.map((i) => {\n                    if (i.id === image.id) {\n                        return res.data;\n                    }\n                    return i;\n                });\n            });\n            setSelectedImage(res.data)\n        });\n    };\n\n    const onUpscale = async (image: Image) => {\n        setCreating(true);\n        setErr(null);\n        window.scrollTo(0, 0);\n        try {\n            const imageInput = defaultArgs();\n            imageInput.parent = image.id;\n            imageInput.label = image.label;\n            imageInput.phrases = image.phrases;\n            imageInput.negative_phrases = image.negative_phrases;\n            imageInput.width = image.width! * 2;\n            imageInput.height = image.height! * 2;\n            imageInput.model = \"swinir\";\n            imageInput.count = 1;\n\n            const newImages = await api.createImage(imageInput);\n            setImages((images) => {\n                // there is a race condition where poll images can fire before this callback\n                // so double-check to avoid duplicates\n                const imagesToAdd = (newImages.data.images || []).filter(\n                    (image) => {\n                        return !images.find((i) => i.id === image.id);\n                    }\n                );\n                return [...imagesToAdd, ...images].sort(sortImages);\n            });\n            history.push(\"/\")\n        } catch (e: any) {\n            console.error(e);\n            setErr(\"Error creating image\");\n        } finally {\n            setCreating(false);\n        }\n    }\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n        const loadImages = async () => {\n            // clear error\n            setErr(null);\n            try {\n                const cursor = moment().add(1, \"minutes\").valueOf();\n                const resp = await api.listImages(cursor, 100, \"desc\");\n                if (resp.data.images) {\n                    setImages(resp.data.images.sort(sortImages));\n                }\n                return 0;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n        loadImages();\n    }, [api]);\n\n    useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        const pollImages = async (images: Array<Image>) => {\n            // clear error\n            setErr(null);\n            // set cursor to max updated_at from images\n            const cursor = images.reduce((max, image) => {\n                return Math.max(max, image.updated_at);\n            }, 0);\n\n            try {\n                const resp = await api.listImages(cursor + 1, 100, \"asc\");\n                if (resp.data.images) {\n                    // split resp.data.images into \"new\" and \"updated\" lists\n                    // image is \"new\" if it's not in images\n                    const newImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) < 0;\n                    });\n                    const updatedImages = resp.data.images.filter((image) => {\n                        return images.findIndex((i) => i.id === image.id) >= 0;\n                    });\n                    setImages((images) =>\n                        [\n                            ...images.map((image) => {\n                                const updatedImage = updatedImages.find(\n                                    (i) => i.id === image.id\n                                );\n                                if (updatedImage) {\n                                    return updatedImage;\n                                }\n                                return image;\n                            }),\n                            ...newImages,\n                        ].sort(sortImages)\n                    );\n                }\n                return images;\n            } catch (err) {\n                setErr(\"Could not load images\");\n                console.error(err);\n            }\n        };\n\n        const timerHandle = setInterval(() => {\n            pollImages(images);\n        }, 5000);\n        return () => {\n            clearInterval(timerHandle);\n        };\n    }, [api, images]);\n\n    useEffect(() => {\n        // de-duplicate images by id\n        // first check if there are any duplicates\n        // I know, I should figure out where the duplicates are coming from,\n        // but I'm lazy.\n        const ids = images.map((image) => image.id);\n        const uniqueIds = new Set(ids);\n        if (ids.length !== uniqueIds.size) {\n            setImages((images) => {\n                // there are duplicates\n                const uniqueImages = images.filter((image, index) => {\n                    return ids.indexOf(image.id) === index;\n                });\n                return uniqueImages.sort(sortImages);\n            });\n        }\n    }, [images]);\n\n    const isPendingOrProcessing = (image: Image) => {\n        return (\n            image.status === ImageStatusEnum.Pending ||\n            image.status === ImageStatusEnum.Processing\n        );\n    };\n\n    const sortImages = (a: Image, b: Image) => {\n        // pending and processing images always come first\n        if (isPendingOrProcessing(a) && !isPendingOrProcessing(b)) {\n            return -1;\n        } else if (!isPendingOrProcessing(a) && isPendingOrProcessing(b)) {\n            return 1;\n        }\n        // if the parent is the same, sort by score descending\n        // otherwise, sort by updated_at\n        if (\n            a.parent === b.parent &&\n            a.phrases.join(\"|\") == b.phrases.join(\"|\") &&\n            a.status !== ImageStatusEnum.Pending &&\n            b.status !== ImageStatusEnum.Pending\n        ) {\n            // if the score is the same, sort by updated_at\n            let aScore = a.score;\n            let bScore = b.score;\n            // working around a bug where negative score was assigned\n            // for an empty negative prompt.\n            if (a.phrases.join(\"\").trim() !== \"\") {\n                aScore = aScore - a.negative_score;\n            }\n            if (b.phrases.join(\"\").trim() !== \"\") {\n                bScore = bScore - b.negative_score;\n            }\n            if (aScore == bScore) {\n                return b.updated_at - a.updated_at;\n            }\n            return bScore - aScore;\n        }\n\n        return b.updated_at - a.updated_at;\n    };\n\n    const onLoadMore = async () => {\n        // get the minimum updated_at from images\n        let minUpdatedAt = moment().valueOf();\n        images.forEach((image) => {\n            minUpdatedAt = Math.min(minUpdatedAt, image.updated_at);\n        });\n        // load images in descending order from updated_at\n        const resp = await api.listImages(minUpdatedAt - 1, 100, \"desc\");\n        if (resp.data.images && resp.data.images.length > 0) {\n            // combine images with new images and sort by updated_at descending\n            setImages((images) =>\n                [...images, ...(resp.data.images || [])].sort(sortImages)\n            );\n        } else {\n            setHasMore(false);\n        }\n    };\n\n    const onDelete = async (image: Image) => {\n        try {\n            await api.deleteImage(image.id);\n        } catch (e) {\n            console.error(e);\n            setErr(\"Error deleting image\");\n        }\n    };\n\n    const onFork = async (image: Image) => {\n        setParentImage(image);\n        // setSelectedImage(null);\n        history.push(\"/\")\n        window.scrollTo(0, 0);\n    };\n\n    const onEdit = async (image: Image) => {\n        history.push(`/image-editor/${image.id}`);\n    };\n\n    const onThumbnailClicked = (image: Image) => {\n        // setSelectedImage(image);\n        history.push(`/images/${image.id}`)\n    };\n\n    const handleCancelFork = () => {\n        setParentImage(null);\n        window.scrollTo(0, 0);\n    };\n\n    return (\n        <>\n            <h1 style={{ fontSize: \"40px\", textAlign: \"left\" }}>\n                Welcome to AiBrush\n            </h1>\n\n            <ImagePrompt\n                assetsUrl={assetsUrl}\n                creating={creating}\n                onSubmit={onSubmit}\n                onEdit={onEditNewImage}\n                parent={parentImage}\n                onCancel={() => handleCancelFork()}\n            />\n            <div className=\"homepage-images\" style={{ marginTop: \"48px\" }}>\n                <InfiniteScroll\n                    dataLength={images.length}\n                    next={onLoadMore}\n                    hasMore={hasMore}\n                    loader={<h4>Loading...</h4>}\n                >\n                    {images.map((image) => (\n                        <ImageThumbnail\n                            key={image.id}\n                            image={image}\n                            assetsUrl={assetsUrl}\n                            onClick={onThumbnailClicked}\n                        />\n                    ))}\n                </InfiniteScroll>\n            </div>\n\n            {selectedImage && (\n                <ImagePopup\n                    assetsUrl={assetsUrl}\n                    image={selectedImage}\n                    onClose={() => history.push(\"/\")}\n                    onDelete={(image) => {\n                        onDelete(image);\n                        setImages(images.filter((i) => i.id !== image.id));\n                        history.push(\"/\");\n                    }}\n                    onFork={(image) => {\n                        onFork(image);\n                        history.push(\"/\");\n                    }}\n                    onEdit={(image) => {\n                        onEdit(image);\n                    }}\n                    onUpscale={(image) => {\n                        onUpscale(image);\n                    }}\n                    onNSFW={onNSFW}\n                />\n            )}\n            <ScrollToTop />\n        </>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult, FeatureList } from \"./client/api\";\nimport { getConfig } from \"./config\";\nimport { Login } from \"./pages/Login\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from \"./components/Healthchecker\";\nimport { WorkerConfigPage } from \"./pages/WorkerConfig\";\nimport { Admin } from \"./pages/Admin\";\nimport { ImageEditor } from \"./pages/image-editor/ImageEditor\";\n\n// V2 UI\nimport { Homepage } from \"./pages/Homepage\";\n\nconst config = getConfig();\nconst httpClient = axios.default;\nconst client = new AIBrushApi(\n  undefined,\n  localStorage.getItem(\"apiUrl\") || config.apiUrl,\n  httpClient\n);\n\nfunction updateHttpClient(loginResult: LoginResult) {\n  if (loginResult.accessToken) {\n    httpClient.defaults.headers.common[\n      \"Authorization\"\n    ] = `Bearer ${loginResult.accessToken}`;\n  }\n}\n\nfunction App() {\n  const [credentials, setCredentials] = useState<LoginResult | null>(null);\n  const [assetsUrl, setAssetsUrl] = useState<string>(\"/api/images\");\n  const [isAdmin, setIsAdmin] = useState<boolean>(false);\n  const [features, setFeatures] = useState<FeatureList | null>(null);\n\n  const onLogout = () => {\n    setCredentials(null);\n    localStorage.removeItem(\"credentials\");\n    httpClient.defaults.headers.common[\"Authorization\"] = undefined;\n  };\n\n  const init = async () => {\n    console.log(\"App.init\");\n    client\n      .getAssetsUrl()\n      .then((result) => setAssetsUrl(result.data.assets_url));\n    client.getFeatures().then((result) => setFeatures(result.data));\n    const storedCredentials = localStorage.getItem(\"credentials\");\n    if (storedCredentials) {\n      // attempt to refresh token\n      try {\n        const credentials = JSON.parse(storedCredentials) as LoginResult;\n        const result = await client.refresh({\n          refreshToken: credentials.refreshToken,\n        });\n        setCredentials(result.data);\n        // save to storage\n        localStorage.setItem(\"credentials\", JSON.stringify(result.data));\n        updateHttpClient(result.data);\n        const isAdmin = await client.isAdmin();\n        setIsAdmin(!!isAdmin.data.is_admin);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  const onLogin = async (credentials: LoginResult) => {\n    localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n    setCredentials(credentials);\n    updateHttpClient(credentials);\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <TokenRefresher\n        api={client}\n        credentials={credentials as LoginResult}\n        onCredentialsRefreshed={onLogin}\n      />\n      <Healthchecker api={client} />\n\n      <BrowserRouter>\n        {/* if credentials are not set, show Login component */}\n        {!credentials && (\n          <Login httpClient={httpClient} client={client} onLogin={onLogin} />\n        )}\n        {credentials && <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n              {credentials && (\n                <>\n                  <button\n                    className=\"btn btn-primary top-button\"\n                    onClick={() => onLogout()}\n                  >\n                    {/* font awesome logout icon */}\n                    <i className=\"fas fa-sign-out-alt\"></i>\n                  </button>\n                  {/* home button */}\n                  <Link className=\"btn btn-primary top-button\" to=\"/\">\n                    {/* font awesome home icon */}\n                    <i className=\"fas fa-home\"></i>\n                  </Link>\n                  {/* Link to github project at https://github.com/wolfgangmeyers/aibrush-2 */}\n                  <a\n                    className=\"btn btn-primary top-button\"\n                    href=\"https://github.com/wolfgangmeyers/aibrush-2\"\n                    target=\"_blank\"\n                  >\n                    {/* font awesome github icon */}\n                    <i className=\"fab fa-github\"></i>\n                  </a>\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* if credentials are set, show the rest of the app */}\n          \n          <Switch>\n            <Route path=\"/\" exact={true}>\n              {/* <MainMenu isAdmin={isAdmin} /> */}\n              <Homepage api={client} assetsUrl={assetsUrl} />\n            </Route>\n            <Route path=\"/images/:id\">\n              <Homepage api={client} assetsUrl={assetsUrl} />\n            </Route>\n            <Route path=\"/image-editor/:id\">\n              <ImageEditor api={client} assetsUrl={assetsUrl} />\n            </Route>\n            <Route path=\"/worker-config\">\n              <WorkerConfigPage api={client} />\n            </Route>\n            {isAdmin && (\n              <>\n                <Route path=\"/admin\">\n                  <Admin api={client} />\n                </Route>\n              </>\n            )}\n          </Switch>\n          <div className=\"row\" style={{ marginTop: \"100px\", padding: \"50px\" }}>\n            <div className=\"col-lg-12\">\n              {/* show external popout pages to terms and privacy policy, if they are present in the features */}\n              {features && features.privacy_uri && (\n                <a href={features.privacy_uri} target=\"_blank\">\n                  Privacy Policy\n                </a>\n              )}\n              {features && features.terms_uri && (\n                <a\n                  href={features.terms_uri}\n                  target=\"_blank\"\n                  style={{ marginLeft: \"20px\" }}\n                >\n                  Terms of Service\n                </a>\n              )}\n            </div>\n          </div>\n        </div>}\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    // if (process.env.REACT_APP_ENV === \"prod\") {\n    //     return {\n    //         apiUrl: \"https://aibrush.ngrok.io\"\n    //     };\n    // } else if (process.env.REACT_APP_ENV === \"alt\") {\n    //     return {\n    //         apiUrl: \"\"\n    //     };\n    // } else {\n    //     return {\n    //         apiUrl: \"http://localhost:3000\"\n    //     };\n    // }\n    return {\n        apiUrl: \"\"\n    };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Renderer } from \"./renderer\";\n\nexport class ZoomHelper {\n\n    constructor(private renderer: Renderer) {}\n\n    onWheel(event: WheelEvent) {\n        const originalZoom = this.renderer.getZoom();\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        let canvasPoint = this.translateMouseToCanvasCoordinates(\n            event.offsetX,\n            event.offsetY\n        );\n        // console.log(\"x: \" + x + \", y: \" + y);\n        \n        if (event.deltaY < 0) {\n            zoom += 0.1 * zoom;\n        } else {\n            zoom -= 0.1 * zoom;\n        }\n        zoom = Math.max(0.1, Math.min(zoom, 8.0));\n\n        let xDiff = canvasPoint.x - -offsetX;\n        let yDiff = canvasPoint.y - -offsetY;\n\n        // offsetX = canvasPoint.x - xDiff * (zoom / originalZoom);\n        // offsetY = canvasPoint.y - yDiff * (zoom / originalZoom);\n        offsetX -= xDiff * (zoom / originalZoom) - xDiff;\n        offsetY -= yDiff * (zoom / originalZoom) - yDiff;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    onPan(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        let movementX = event.movementX;\n        let movementY = event.movementY;\n        // translate offset to canvas coordinates\n        let rect = (\n            event.target as HTMLCanvasElement\n        ).getBoundingClientRect();\n        movementX = (movementX / rect.width) * this.renderer.getWidth();\n        movementY = (movementY / rect.height) * this.renderer.getHeight();\n\n        let zoom = this.renderer.getZoom();\n        let offsetX = this.renderer.getOffsetX();\n        let offsetY = this.renderer.getOffsetY();\n\n        offsetX += movementX / zoom;\n        offsetY += movementY / zoom;\n\n        this.renderer.updateZoomAndOffset(zoom, offsetX, offsetY);\n    }\n\n    translateMouseToCanvasCoordinates(mouseX: number, mouseY: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        let x = mouseX;\n        let y = mouseY;\n        // adjust for zoom\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x / zoom;\n        y = y / zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n\n        x = (x / rect.width) * this.renderer.getWidth();\n        y = (y / rect.height) * this.renderer.getHeight();\n\n        x = x - offsetX;\n        y = y - offsetY;\n\n        return { x: x, y: y };\n    }\n\n    translateCanvasToMouseCoordinates(x: number, y: number, zoom?: number, offsetX?: number, offsetY?: number) {\n        zoom = zoom || this.renderer.getZoom();\n        offsetX = offsetX || this.renderer.getOffsetX();\n        offsetY = offsetY || this.renderer.getOffsetY();\n        x = x + offsetX;\n        y = y + offsetY;\n        x = x * zoom;\n        y = y * zoom;\n\n        // translate offset to canvas coordinates\n        let rect = this.renderer.getCanvas().getBoundingClientRect();\n        x = (x / this.renderer.getWidth()) * rect.width;\n        y = (y / this.renderer.getHeight()) * rect.height;\n\n        return { x: x, y: y };\n    }\n}","import { aspectRatios } from \"./aspecRatios\";\n\nexport function getUpscaleLevel(width: number, height: number): number {\n    let upscaleLevel = 0;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width === aspectRatio.width && height === aspectRatio.height) {\n            return upscaleLevel;\n        }\n    }\n    width /= 2;\n    height /= 2;\n    upscaleLevel++;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width === aspectRatio.width && height === aspectRatio.height) {\n            return upscaleLevel;\n        }\n    }\n    width /= 2;\n    height /= 2;\n    upscaleLevel++;\n    for (let i = 0; i < aspectRatios.length; i++) {\n        const aspectRatio = aspectRatios[i];\n        if (width === aspectRatio.width && height === aspectRatio.height) {\n            return upscaleLevel;\n        }\n    }\n    return -1;\n}\n","import React, { FC, useEffect, useState } from \"react\";\nimport { CreateImageInput, CreateImageInputStatusEnum, Image } from \"../client\";\nimport {\n    aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio, upscale, compareSize, AspectRatio\n} from \"../lib/aspecRatios\";\nimport loadImage from \"blueimp-load-image\";\nimport { AspectRatioSelector } from \"./AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../lib/upscale\";\n\ninterface Props {\n    parent: Image | null;\n    creating: boolean;\n    assetsUrl: string;\n    onSubmit: (input: CreateImageInput) => void;\n    // go straight to editor without variations\n    onEdit: (input: CreateImageInput) => void;\n    onCancel: () => void;\n}\n\nexport function defaultArgs(): CreateImageInput {\n    return {\n        phrases: [\"a painting of a happy corgi wearing sunglasses\"],\n        negative_phrases: [],\n        label: \"\",\n        iterations: 50,\n        encoded_image: \"\",\n        encoded_npy: \"\",\n        encoded_mask: \"\",\n        enable_video: false,\n        enable_zoom: false,\n        zoom_frequency: 10,\n        zoom_scale: 0.99,\n        zoom_shift_x: 0,\n        zoom_shift_y: 0,\n        model: \"stable_diffusion_text2im\",\n        glid_3_xl_clip_guidance: false,\n        glid_3_xl_clip_guidance_scale: 150,\n        glid_3_xl_skip_iterations: 0,\n        width: 512,\n        height: 512,\n        stable_diffusion_strength: 0.75,\n        count: 4,\n    };\n}\n\nexport const ImagePrompt: FC<Props> = ({\n    parent,\n    creating,\n    assetsUrl,\n    onSubmit,\n    onCancel,\n    onEdit,\n}) => {\n    const [prompt, setPrompt] = useState<string>(\"\");\n    const [negativePrompt, setNegativePrompt] = useState<string>(\"\");\n    const [count, setCount] = useState<number>(4);\n    const [variationStrength, setVariationStrength] = useState<number>(0.75);\n    const [aspectRatio, setAspectRatio] =\n        useState<number>(DEFAULT_ASPECT_RATIO);\n    const [parentId, setParentId] = useState<string | null>(null);\n    const [advancedView, setAdvancedView] = useState<boolean>(false);\n    const [encodedImage, setEncodedImage] = useState<string>(\"\");\n    const defaultAspectRatio = aspectRatios[DEFAULT_ASPECT_RATIO];\n    \n    const [aspectRatioDetails, setAspectRatioDetails] = useState<AspectRatio>(aspectRatios[DEFAULT_ASPECT_RATIO]);\n\n    // const aspectRatioDetails = aspectRatios[aspectRatio];\n\n    const resetState = () => {\n        setPrompt(\"\");\n        setNegativePrompt(\"\");\n        setCount(4);\n        setAdvancedView(false);\n        setParentId(null);\n        setVariationStrength(0.75);\n        setAspectRatio(DEFAULT_ASPECT_RATIO);\n        setAspectRatioDetails(aspectRatios[DEFAULT_ASPECT_RATIO]);\n        setEncodedImage(\"\");\n    };\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const args = defaultArgs();\n        args.phrases = [prompt || \"\"];\n        args.negative_phrases = [negativePrompt || \"\"];\n        args.count = count;\n        args.parent = parentId || undefined;\n        args.stable_diffusion_strength = variationStrength;\n        if (parent) {\n            const bestMatch = getClosestAspectRatio(parent.width!, parent.height!);\n            args.width = bestMatch.width;\n            args.height = bestMatch.height;\n        } else {\n            const bestMatch = getClosestAspectRatio(aspectRatioDetails.width, aspectRatioDetails.height);\n            args.width = bestMatch.width;\n            args.height = bestMatch.height;\n        }\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onSubmit(args);\n    };\n\n    const handleEdit = () => {\n        if (!encodedImage) {\n            console.error(\"Cannot edit without existing image\")\n        }\n        const args = defaultArgs();\n        args.phrases = [prompt || \"\"];\n        args.negative_phrases = [negativePrompt || \"\"];\n        args.count = 1;\n        args.parent = parentId || undefined;\n        args.stable_diffusion_strength = variationStrength;\n        args.status = CreateImageInputStatusEnum.Completed;\n        args.width = aspectRatioDetails.width;\n        args.height = aspectRatioDetails.height;\n        if (encodedImage) {\n            args.encoded_image = encodedImage;\n        }\n\n        resetState();\n        onEdit(args);\n    }\n\n    const handleCancel = () => {\n        resetState();\n        onCancel();\n    };\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) {\n            return;\n        }\n        loadImage(\n            file,\n            (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n                if (!(img instanceof HTMLCanvasElement)) {\n                    return;\n                }\n                // try to match width and height to a supported aspect ratio\n                const width = img.width;\n                const height = img.height;\n                let bestMatch = getClosestAspectRatio(width, height);\n                while (compareSize(upscale(bestMatch), width, height) <= 0) {\n                    bestMatch = upscale(bestMatch);\n                    if (getUpscaleLevel(bestMatch.width, bestMatch.height) >= 2) {\n                        break;\n                    }\n                }\n                console.log(\"best match\", bestMatch);\n\n\n                const canvas = document.createElement(\"canvas\");\n                canvas.width = bestMatch.width;\n                canvas.height = bestMatch.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    return;\n                }\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                // convert image to base64\n                // const canvas = img as HTMLCanvasElement\n                const dataUrl = canvas.toDataURL(\"image/jpeg\");\n                const base64 = dataUrl.split(\",\")[1];\n                setEncodedImage(base64);\n                // get the index of the best match\n                setAspectRatio(\n                    aspectRatios.findIndex(\n                        (a) => a.id === bestMatch.id\n                    )\n                );\n                setAspectRatioDetails(bestMatch);\n                // remove canvas\n                canvas.remove();\n            },\n            {\n                maxWidth: 4096,\n                maxHeight: 4096,\n                canvas: true,\n            }\n        );\n    };\n\n    useEffect(() => {\n        if (parent) {\n            setPrompt(parent.phrases.join(\", \"));\n            setNegativePrompt(parent.negative_phrases.join(\", \"));\n            setCount(4);\n            setParentId(parent.id);\n            setAdvancedView(true);\n            setVariationStrength(parent.stable_diffusion_strength);\n            setEncodedImage(\"\");\n        } else {\n            resetState();\n        }\n    }, [parent]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"homepage-prompt\">\n                <div className=\"input-group\">\n                    <input\n                        className=\"form-control\"\n                        placeholder=\"What would you like to create?\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n\n                    <div className=\"input-group-append\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-secondary light-button\"\n                            style={{ marginLeft: \"8px\" }}\n                            disabled={!prompt || creating}\n                        >\n                            {/* paintbrush button */}\n                            {!creating && (\n                                <i className=\"fas fa-paint-brush\"></i>\n                            )}\n                            {/* spinner button */}\n                            {creating && (\n                                <i className=\"fas fa-spinner fa-spin\"></i>\n                            )}\n                        </button>\n                    </div>\n                </div>\n                <div\n                    style={{\n                        marginTop: \"24px\",\n                    }}\n                >\n                    <a\n                        href=\"javascript:void(0)\"\n                        onClick={() => setAdvancedView(!advancedView)}\n                        style={{\n                            color: \"white\",\n                            textDecoration: \"underline\",\n                        }}\n                    >\n                        Advanced\n                    </a>\n                    &nbsp;\n                    {advancedView ? (\n                        <i className=\"fas fa-chevron-up\"></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-down\"></i>\n                    )}\n                </div>\n                {advancedView && (\n                    <div className=\"homepage-prompt-advanced\">\n                        {parent && !encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Parent Image</label>\n                                {/* ${assetsUrl}/${image.id}.image.jpg?updated_at=${image.updated_at} */}\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`${assetsUrl}/${parentId}.image.jpg?updated_at=${parent.updated_at}`}\n                                />\n                            </div>\n                        )}\n                        {encodedImage && (\n                            <div className=\"form-group\">\n                                <label>Init Image</label>\n                                <img\n                                    style={{\n                                        display: \"block\",\n                                        marginLeft: \"auto\",\n                                        marginRight: \"auto\",\n                                        maxWidth: \"100%\",\n                                    }}\n                                    src={`data:image/jpeg;base64,${encodedImage}`}\n                                />\n                            </div>\n                        )}\n                        {!parent && !encodedImage && (\n                            <AspectRatioSelector\n                                aspectRatio={aspectRatio}\n                                onChange={aspectRatioId => {\n                                    setAspectRatio(aspectRatioId);\n                                    setAspectRatioDetails(\n                                        aspectRatios[aspectRatioId]\n                                    );\n                                }}\n                            />\n                        )}\n                        <div className=\"form-group\">\n                            <div\n                                style={{\n                                    display: \"block\",\n                                    maxWidth: encodedImage ? \"350px\" : \"180px\",\n                                    marginTop: \"40px\",\n                                    marginRight: \"auto\",\n                                    marginLeft: \"auto\",\n                                }}\n                            >\n                                <label\n                                    id=\"loadimage-wrapper\"\n                                    className={`btn btn-primary `}\n                                    style={{ display: \"inline\" }}\n                                >\n                                    {/* upload image */}\n                                    <i className=\"fas fa-upload\"></i>&nbsp;\n                                    {encodedImage || parent\n                                        ? \"Replace Image\"\n                                        : \"Upload Image\"}\n                                    <input\n                                        id=\"loadimage\"\n                                        type=\"file\"\n                                        style={{ display: \"none\" }}\n                                        onChange={onImageSelected}\n                                    />\n                                </label>\n                                {encodedImage && (\n                                    <label\n                                        className=\"btn btn-secondary\"\n                                        onClick={() => setEncodedImage(\"\")}\n                                        style={{ display: \"inline\" }}\n                                    >\n                                        {/* remove image */}\n                                        <i className=\"fas fa-trash\"></i>&nbsp;\n                                        Remove Image\n                                    </label>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            {/* negative prompt */}\n                            <label htmlFor=\"negativePrompt\">\n                                Negative Prompt\n                            </label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"negativePrompt\"\n                                placeholder=\"What would you like to avoid?\"\n                                value={negativePrompt}\n                                onChange={(e) =>\n                                    setNegativePrompt(e.target.value)\n                                }\n                            />\n                            <span className=\"helptext\">\n                                Try descriptive words like \"blurry\" or\n                                \"distorted\"\n                            </span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"count\">Count: {count}</label>\n                            {/* range slider from 1 to 20 */}\n                            <input\n                                type=\"range\"\n                                className=\"form-control-range\"\n                                id=\"count\"\n                                min=\"1\"\n                                max=\"20\"\n                                value={count}\n                                onChange={(e) =>\n                                    setCount(parseInt(e.target.value))\n                                }\n                            />\n                            <span className=\"helptext\">\n                                This is how many images you want to generate\n                            </span>\n                        </div>\n                        {(parentId || encodedImage) && (\n                            <div className=\"form-group\">\n                                {/* variation strength */}\n                                <label htmlFor=\"variationStrength\">\n                                    Variation Strength:&nbsp;\n                                    {(variationStrength * 100).toFixed(0)}%\n                                </label>\n                                <input\n                                    type=\"range\"\n                                    className=\"form-control-range\"\n                                    id=\"variationStrength\"\n                                    min=\"0.05\"\n                                    max=\"0.95\"\n                                    step=\"0.05\"\n                                    value={variationStrength}\n                                    onChange={(e) =>\n                                        setVariationStrength(\n                                            parseFloat(e.target.value)\n                                        )\n                                    }\n                                />\n                                <span className=\"helptext\">\n                                    This is how much variation you want to see\n                                    from the parent image\n                                </span>\n                            </div>\n                        )}\n                        {advancedView && (\n                            <div\n                                className=\"form-group\"\n                                style={{ minHeight: \"20px\" }}\n                            >\n                                <div className=\"float-right\">\n                                    {parent && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleCancel}\n                                        >\n                                            <i className=\"fas fa-times\"></i>\n                                            &nbsp;CANCEL\n                                        </button>\n                                    )}\n                                    <button\n                                        type=\"submit\"\n                                        className=\"btn btn-primary\"\n                                        style={{ marginLeft: \"8px\" }}\n                                        disabled={!prompt || creating}\n                                    >\n                                        {/* paintbrush button */}\n                                        {!creating && (\n                                            <i className=\"fas fa-paint-brush\"></i>\n                                        )}\n                                        {/* spinner button */}\n                                        {creating && (\n                                            <i className=\"fas fa-spinner fa-spin\"></i>\n                                        )}\n                                        &nbsp;PAINT\n                                    </button>\n                                    {encodedImage && (\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary light-button\"\n                                            onClick={handleEdit}\n                                            style={{ marginLeft: \"8px\" }}\n                                            disabled={!prompt || creating}\n                                        >\n                                            <i className=\"fas fa-edit\"></i>\n                                            &nbsp;EDIT\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </form>\n    );\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { aspectRatios, DEFAULT_ASPECT_RATIO, getClosestAspectRatio } from \"../lib/aspecRatios\";\n\ninterface Props {\n    aspectRatio: number;\n    onChange: (aspectRatio: number) => void;\n    disabled?: boolean;\n}\n\nexport const AspectRatioSelector: FC<Props> = ({ aspectRatio, onChange, disabled }) => {\n    const aspectRatioDetails = aspectRatios[aspectRatio];\n    return (\n        <div className=\"form-group\">\n            <div\n                style={{\n                    minHeight: \"140px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                }}\n            >\n                {/* aspect ratio slider, goes from 0 -> aspectRatios.length - 1 */}\n                <div\n                    style={{\n                        width: aspectRatioDetails.width / 8,\n                        height: aspectRatioDetails.height / 8,\n                        // dotted line options: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden\n                        border: \"1px dashed white\",\n                        margin: \"auto\",\n                    }}\n                ></div>\n            </div>\n            <label>Aspect Ratio: {aspectRatioDetails.displayName}</label>\n            <input\n                type=\"range\"\n                disabled={disabled}\n                className=\"form-control-range\"\n                min={0}\n                max={aspectRatios.length - 1}\n                value={aspectRatio}\n                onChange={(e) => {\n                    onChange(parseInt(e.target.value));\n                }}\n            />\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Cursor, Rect, Renderer } from \"./renderer\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { AspectRatioSelector } from \"../../components/AspectRatioSelector\";\nimport { getUpscaleLevel } from \"../../lib/upscale\";\nimport {\n    DEFAULT_ASPECT_RATIO,\n    aspectRatios,\n    getClosestAspectRatio,\n} from \"../../lib/aspecRatios\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SelectionTool extends BaseTool implements Tool {\n    private renderer: Renderer;\n    private zoomHelper: ZoomHelper;\n    private selectionOverlay: Rect | undefined;\n    private selectionOverlayPreview: Rect | undefined;\n\n    private selectionWidth: number = 512;\n    private selectionHeight: number = 512;\n\n    private panning = false;\n\n    constructor(renderer: Renderer) {\n        super(\"select\");\n        this.renderer = renderer;\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    // TODO: smaller/larger, aspect ratios?\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.selectionWidth = args.selectionWidth || 512;\n        this.selectionHeight = args.selectionHeight || 512;\n        this.selectionOverlay = {\n            x: 0,\n            y: 0,\n            width: this.selectionWidth,\n            height: this.selectionHeight,\n        };\n        this.sync();\n    }\n\n    private sync(): void {\n        this.renderer.setSelectionOverlay(this.selectionOverlay);\n        this.renderer.setSelectionOverlayPreview(this.selectionOverlayPreview);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.selectionOverlayPreview && event.button === 0) {\n            this.selectionOverlay = this.selectionOverlayPreview;\n            this.selectionOverlayPreview = undefined;\n            this.sync();\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        const imageWidth = this.renderer.getWidth();\n        const imageHeight = this.renderer.getHeight();\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let {x, y} = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY,\n            )\n\n            // round to the nearest 64 pixels\n            x = Math.round(x / 64) * 64;\n            y = Math.round(y / 64) * 64;\n            // offset by -256 to center the rect\n            x -= 256;\n            y -= 256;\n            // clamp to the canvas\n            x = Math.max(0, Math.min(x, imageWidth - this.selectionWidth));\n            y = Math.max(0, Math.min(y, imageHeight - this.selectionHeight));\n            x = Math.min(x, imageWidth - this.selectionWidth);\n            y = Math.min(y, imageHeight - this.selectionHeight);\n\n            this.selectionOverlayPreview = {\n                x: x,\n                y: y,\n                width: this.selectionWidth,\n                height: this.selectionHeight,\n            };\n            this.sync();\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.panning = false;\n    }\n\n    onMouseLeave(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.selectionOverlayPreview = undefined;\n        this.panning = false;\n        this.sync();\n    }\n\n    // onKeyDown(event: KeyboardEvent) {\n    //     // TODO\n    // }\n\n    // onKeyUp(event: KeyboardEvent) {\n    //     // TODO\n    // }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    destroy() {\n        // this.renderer.setSelectionOverlay(undefined);\n        this.renderer.setSelectionOverlayPreview(undefined);\n        return true;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: Tool;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({ renderer, tool }) => {\n    const upscaleLevel = getUpscaleLevel(\n        renderer.getWidth(),\n        renderer.getHeight()\n    );\n    const [aspectRatio, setAspectRatio] = useState(DEFAULT_ASPECT_RATIO);\n    useEffect(() => {\n        const upscaleLevel = getUpscaleLevel(\n            renderer.getWidth(),\n            renderer.getHeight()\n        );\n        // lock aspect ratio to image\n        if (upscaleLevel === 0) {\n            const aspectRatio = getClosestAspectRatio(\n                renderer.getWidth(),\n                renderer.getHeight()\n            );\n            setAspectRatio(aspectRatio.id);\n            tool.updateArgs({\n                selectionWidth: aspectRatio.width,\n                selectionHeight: aspectRatio.height,\n            });\n        } else {\n            const args = tool.getArgs();\n            if (args.selectionWidth && args.selectionHeight) {\n                // restore args\n                const aspectRatio = getClosestAspectRatio(\n                    args.selectionWidth,\n                    args.selectionHeight\n                );\n                setAspectRatio(aspectRatio.id);\n                tool.updateArgs(args)\n            } else {\n                // set default args\n                args.selectionWidth = aspectRatios[aspectRatio].width;\n                args.selectionHeight = aspectRatios[aspectRatio].height;\n                tool.updateArgs(args);\n            }\n        }\n    }, [tool]);\n    return (\n        <>\n            {upscaleLevel > 0 && (\n                <AspectRatioSelector\n                    aspectRatio={aspectRatio}\n                    onChange={(aspectRatioId) => {\n                        const aspectRatio = aspectRatios[aspectRatioId];\n                        tool.updateArgs({\n                            selectionWidth: aspectRatio.width,\n                            selectionHeight: aspectRatio.height,\n                        });\n                        setAspectRatio(aspectRatioId);\n                    }}\n                />\n            )}\n        </>\n    );\n};\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport { loadImageAsync } from \"../../lib/loadImage\";\n\nimport { sleep } from \"../../lib/sleep\";\nimport { defaultArgs } from \"../../components/ImagePrompt\";\nimport { Tool, BaseTool } from \"./tool\";\nimport { Cursor, Rect, Renderer } from \"./renderer\";\nimport {\n    AIBrushApi,\n    CreateImageInput,\n    Image as APIImage,\n    ImageStatusEnum,\n} from \"../../client\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\ntype EnhanceToolState = \"default\" | \"busy\" | \"confirm\";\n\nexport class EnhanceTool extends BaseTool implements Tool {\n    private renderer: Renderer;\n    private zoomHelper: ZoomHelper;\n\n    private prompt: string = \"\";\n    private count: number = 4;\n    private variationStrength: number = 0.35;\n\n    private _state: EnhanceToolState = \"default\";\n    private stateHandler: (state: EnhanceToolState) => void = () => {};\n    private selectionControlsListener: (show: boolean) => void = () => {};\n\n    private imageData: Array<ImageData> = [];\n    private selectedImageDataIndex: number = -1;\n    private panning = false;\n\n    get state(): EnhanceToolState {\n        return this._state;\n    }\n\n    private set state(state: EnhanceToolState) {\n        this._state = state;\n        this.stateHandler(state);\n        if (state == \"confirm\") {\n            this.selectionControlsListener(true);\n        } else {\n            this.selectionControlsListener(false);\n        }\n    }\n\n    constructor(renderer: Renderer) {\n        super(\"enhance\");\n        this.renderer = renderer;\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 1) {\n            this.panning = true;\n        }\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        }\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        this.panning = false;\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n    }\n\n    updateArgs(args: any) {\n        this.prompt = args.prompt || \"\";\n        this.count = args.count || 4;\n        this.variationStrength = args.variationStrength || 0.75;\n    }\n\n    onChangeState(handler: (state: EnhanceToolState) => void) {\n        this.stateHandler = handler;\n    }\n\n    onShowSelectionControls(listener: (show: boolean) => void): void {\n        this.selectionControlsListener = listener;\n    }\n\n    private featherEdges(selectionOverlay: Rect, imageWidth: number, imageHeight: number, imageData: ImageData) {\n        const featherLeftEdge = selectionOverlay.x != 0;\n        const featherRightEdge = selectionOverlay.x + selectionOverlay.width != imageWidth;\n        const featherTopEdge = selectionOverlay.y != 0;\n        const featherBottomEdge = selectionOverlay.y + selectionOverlay.height != imageHeight;\n\n        const baseWidth = Math.min(selectionOverlay.width, selectionOverlay.height);\n        const featherWidth = Math.floor(baseWidth / 8);\n\n        if (featherTopEdge) {\n            for (let y = 0; y < featherWidth; y++) {\n                for (let x = 0; x < selectionOverlay.width; x++) {\n                    const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                    const alpha = (y / featherWidth) * 255;\n                    const existingAlpha = imageData.data[pixelIndex + 3];\n                    imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n                }\n            }\n        }\n        if (featherBottomEdge) {\n            for (let y = selectionOverlay.height - featherWidth; y < selectionOverlay.height; y++) {\n                for (let x = 0; x < selectionOverlay.width; x++) {\n                    const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                    const alpha = ((selectionOverlay.height - y) / featherWidth) * 255;\n                    const existingAlpha = imageData.data[pixelIndex + 3];\n                    imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n                }\n            }\n        }\n        if (featherLeftEdge) {\n            for (let x = 0; x < featherWidth; x++) {\n                for (let y = 0; y < selectionOverlay.height; y++) {\n                    const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                    const alpha = (x / featherWidth) * 255;\n                    const existingAlpha = imageData.data[pixelIndex + 3];\n                    imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n                }\n            }\n        }\n        if (featherRightEdge) {\n            for (let x = selectionOverlay.width - featherWidth; x < selectionOverlay.width; x++) {\n                for (let y = 0; y < selectionOverlay.height; y++) {\n                    const pixelIndex = (y * selectionOverlay.width + x) * 4;\n                    const alpha = ((selectionOverlay.width - x) / featherWidth) * 255;\n                    const existingAlpha = imageData.data[pixelIndex + 3];\n                    imageData.data[pixelIndex + 3] = Math.min(alpha, existingAlpha);\n                }\n            }\n        }\n    }\n\n    // TODO: refactor to use api.getImageData along with image editor :(\n    // avoids \"The canvas has been tainted by cross-origin data.\" error\n    private loadImageData(api: AIBrushApi, imageId: string, baseImage: APIImage, selectionOverlay: Rect): Promise<ImageData> {\n        return new Promise((resolve, reject) => {\n            api.getImageData(imageId, {\n                responseType: \"arraybuffer\"\n            }).then((resp) => {\n                const binaryImageData = Buffer.from(resp.data, \"binary\");\n                const base64ImageData = binaryImageData.toString(\"base64\");\n                const src = `data:image/jpeg;base64,${base64ImageData}`;\n                const imageElement = new Image();\n                imageElement.src = src;\n                imageElement.onload = () => {\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = imageElement.width;\n                    canvas.height = imageElement.height;\n                    const ctx = canvas.getContext(\"2d\");\n                    if (!ctx) {\n                        reject(new Error(\"Failed to get canvas context\"));\n                        return;\n                    }\n                    ctx.drawImage(imageElement, 0, 0);\n                    const imageData = ctx.getImageData(\n                        0,\n                        0,\n                        imageElement.width,\n                        imageElement.height\n                    );\n                    this.featherEdges(selectionOverlay, baseImage.width!, baseImage.height!, imageData);\n                    \n                    resolve(imageData);\n                    // remove canvas\n                    canvas.remove();\n                };\n            });\n        });\n    }\n\n    cancel() {\n        this.state = \"default\";\n        this.imageData = [];\n        this.renderer.setEditImage(null);\n    }\n\n    async submit(api: AIBrushApi, image: APIImage) {\n        const selectionOverlay = this.renderer.getSelectionOverlay();\n        const encodedImage = this.renderer.getEncodedImage(selectionOverlay!);\n        if (!encodedImage) {\n            console.error(\"No selection\");\n            return;\n        }\n        const input: CreateImageInput = defaultArgs();\n        input.label = \"\";\n        input.encoded_image = encodedImage;\n        input.parent = image.id;\n        input.phrases = [this.prompt || image.phrases[0]];\n        input.negative_phrases = image.negative_phrases;\n        input.stable_diffusion_strength = this.variationStrength;\n        input.count = this.count;\n        input.width = selectionOverlay!.width;\n        input.height = selectionOverlay!.height;\n\n        this.state = \"busy\";\n        let resp = await api.createImage(input);\n        let newImages = resp.data.images;\n        if (!newImages || newImages.length === 0) {\n            this.state = \"default\";\n            throw new Error(\"No images returned\");\n        }\n        let completed = false;\n\n        while (!completed) {\n            let completeCount = 0;\n            await sleep(1000);\n            // poll for completion\n            for (let i = 0; i < newImages!.length; i++) {\n                if (newImages![i].status === ImageStatusEnum.Completed) {\n                    completeCount++;\n                    continue;\n                }\n                const imageResp = await api.getImage(newImages![i].id);\n                if (imageResp.data.status === ImageStatusEnum.Completed) {\n                    newImages![i] = imageResp.data;\n                    completeCount++;\n                }\n            }\n            if (completeCount === newImages!.length) {\n                completed = true;\n            }\n        }\n        // sort images by score descending\n        newImages!.sort((a, b) => {\n            return b.score - a.score;\n        });\n\n        this.imageData = [];\n        for (let i = 0; i < newImages!.length; i++) {\n            this.imageData.push(\n                await this.loadImageData(api, newImages[i].id, image, selectionOverlay!)\n            );\n        }\n        // cleanup\n        for (let i = 0; i < newImages!.length; i++) {\n            await api.deleteImage(newImages![i].id);\n        }\n        this.renderer.setEditImage(this.imageData[0]);\n        this.selectedImageDataIndex = 0;\n        this.state = \"confirm\";\n    }\n\n    select(direction: \"left\" | \"right\") {\n        if (direction == \"left\") {\n            this.selectedImageDataIndex--;\n            if (this.selectedImageDataIndex < -1) {\n                this.selectedImageDataIndex = this.imageData.length - 1;\n            }\n        }\n        if (direction == \"right\") {\n            this.selectedImageDataIndex++;\n            if (this.selectedImageDataIndex >= this.imageData.length) {\n                this.selectedImageDataIndex = -1;\n            }\n        }\n        if (this.selectedImageDataIndex === -1) {\n            this.renderer.setEditImage(null);\n        } else {\n            this.renderer.setEditImage(this.imageData[this.selectedImageDataIndex]);\n        }\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        this.state = \"default\";\n        this.imageData = [];\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n    }\n}\n\ninterface ControlsProps {\n    api: AIBrushApi;\n    image: APIImage;\n    renderer: Renderer;\n    tool: EnhanceTool;\n}\n\nexport const EnhanceControls: FC<ControlsProps> = ({\n    api,\n    image,\n    renderer,\n    tool,\n}) => {\n    const [count, setCount] = useState(4);\n    const [variationStrength, setVariationStrength] = useState(0.35);\n    const [prompt, setPrompt] = useState(image.phrases[0]);\n    const [state, setState] = useState<EnhanceToolState>(tool.state);\n\n    tool.onChangeState(setState);\n\n    if (state == \"busy\") {\n        return <div style={{marginTop: \"16px\"}}>\n            <i className=\"fa fa-spinner fa-spin\"></i>&nbsp;\n            Enhancing...\n        </div>;\n    }\n    if (state == \"confirm\") {\n        return <div style={{marginTop: \"16px\"}}>\n            <button\n                className=\"btn btn-primary\"\n                onClick={() => {\n                    tool.cancel();\n                }}\n            >\n                Revert\n            </button>\n            <button\n                className=\"btn btn-primary\"\n                onClick={() => tool.confirm()}\n                style={{marginLeft: \"8px\"}}\n            >\n                Save\n            </button>\n        </div>;\n    }\n    return (\n        <div style={{marginTop: \"16px\"}}>\n            {/* prompt */}\n            <div className=\"form-group\">\n                <label htmlFor=\"prompt\">Prompt</label>\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"prompt\"\n                    value={prompt}\n                    onChange={(e) => {\n                        setPrompt(e.target.value);\n                    }}\n                />\n                <small className=\"form-text text-muted\">\n                    Customize the text prompt here\n                </small>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"count\">Count: {count}</label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"count\"\n                    min=\"1\"\n                    max=\"10\"\n                    step=\"1\"\n                    value={count}\n                    onChange={(e) => {\n                        setCount(parseInt(e.target.value));\n                    }\n                }\n                />\n                <small className=\"form-text text-muted\">\n                    Number of enhancement options\n                </small>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"variation-strength\">Variation Strength: {Math.round(variationStrength * 100)}%</label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    id=\"variation-strength\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.05\"\n                    value={variationStrength}\n                    onChange={(e) => {\n                        setVariationStrength(parseFloat(e.target.value));\n                    }\n                }\n                />\n                <small className=\"form-text text-muted\">\n                    How much variation to use\n                </small>\n            </div>\n            <div className=\"form-group\">\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        tool.updateArgs({\n                            count,\n                            variationStrength,\n                            prompt,\n                        })\n                        tool.submit(api, image);\n                    }}\n                >\n                    Enhance\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\n\nexport class SmudgeTool extends BaseTool implements Tool {\n    private renderer: Renderer;\n    private zoomHelper: ZoomHelper;\n\n    private brushSize = 10;\n    private brushOpacity = 0.2;\n\n    private lastX = 0;\n    private lastY = 0;\n    private panning = false;\n    private smudging = false;\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n    private dirtyListener?: (dirty: boolean) => void;\n\n    constructor(renderer: Renderer) {\n        super(\"smudge\");\n        this.renderer = renderer;\n        this.zoomHelper = new ZoomHelper(renderer);\n        this.renderer.copyEditImageFromBaseImage();\n    }\n\n    private sync() {\n        this.renderer.setCursor({\n            type: \"circle\",\n            color: \"white\",\n            radius: this.brushSize / 2,\n            x: this.lastX,\n            y: this.lastY,\n        });\n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushOpacity = args.brushOpacity || 0.2;\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n\n        if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else if (this.smudging) {\n            this.renderer.smudgeLine(\n                this.lastX,\n                this.lastY,\n                x,\n                y,\n                this.brushSize,\n                this.brushOpacity,\n            );\n            this.dirty = true;\n        }\n\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (event.button === 0) {\n            this.smudging = false;\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.copyEditImageFromBaseImage();\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    destroy(): boolean {\n        if (\n            !this.dirty ||\n            window.confirm(\"Are you sure you want to discard your changes?\")\n        ) {\n            this.renderer.setCursor(undefined);\n            this.renderer.setEditImage(null);\n            return true;\n        }\n        return false;\n    }\n}\n\ninterface Props {\n    renderer: Renderer;\n    tool: SmudgeTool;\n}\n\nexport const SmudgeControls: FC<Props> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushOpacity, setBrushOpacity] = useState(0.2);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushOpacity,\n        });\n    }, [brushSize, brushOpacity]);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush size\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label style={{ width: \"100%\" }}>\n                    Brush opacity\n                    <small\n                        className=\"form-text text-muted\"\n                        style={{ float: \"right\" }}\n                    >\n                        {Math.round(brushOpacity * 100)}%\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={brushOpacity}\n                    onChange={(e) => setBrushOpacity(parseFloat(e.target.value))}\n                />\n            </div>\n            {dirty && (\n                <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                    <button\n                        className=\"btn btn-secondary\"\n                        onClick={() => tool.cancel()}\n                    >\n                        Revert\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginLeft: \"8px\" }}\n                    >\n                        Save\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\n\ninterface Props {\n    selectedColor: string;\n    color: string;\n    onClick: (color: string) => void;\n}\n\nexport const PaletteButton: FC<Props> = ({ selectedColor, color, onClick }) => {\n    let className = \"palette-button\";\n    if (selectedColor === color) {\n        className += \" selected\";\n    } else if (color == \"#000000\") {\n        className += \" black\";\n    }\n    return (\n        <div\n            className={className}\n            style={{ backgroundColor: color }}\n            onClick={() => onClick(color)}\n        ></div>\n    );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\n// class ButtonExample extends React.Component {\n//   state = {\n//     displayColorPicker: false,\n//   };\n\n//   handleClick = () => {\n//     this.setState({ displayColorPicker: !this.state.displayColorPicker })\n//   };\n\n//   handleClose = () => {\n//     this.setState({ displayColorPicker: false })\n//   };\n\n//   render() {\n//     const popover = {\n//       position: 'absolute',\n//       zIndex: '2',\n//     }\n//     const cover = {\n//       position: 'fixed',\n//       top: '0px',\n//       right: '0px',\n//       bottom: '0px',\n//       left: '0px',\n//     }\n//     return (\n//       <div>\n//         <button onClick={ this.handleClick }>Pick Color</button>\n//         { this.state.displayColorPicker ? <div style={ popover }>\n//           <div style={ cover } onClick={ this.handleClose }/>\n//           <ChromePicker />\n//         </div> : null }\n//       </div>\n//     )\n//   }\n// }\n\ninterface Props {\n    color: string;\n    onColorSelected: (color: string) => void;\n}\n\nexport const ColorPicker: FC<Props> = ({ color, onColorSelected }) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n    const [tmpColor, setTmpColor] = useState(color);\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n        if (displayColorPicker) {\n            onColorSelected(tmpColor);\n        }\n    };\n\n    const popover: React.CSSProperties = {\n        position: \"absolute\",\n        zIndex: 2,\n    };\n    const cover: React.CSSProperties = {\n        position: \"fixed\",\n        top: \"0px\",\n        right: \"0px\",\n        bottom: \"0px\",\n        left: \"0px\",\n    };\n\n    return (\n        <>\n            <button className=\"color-picker\" onClick={handleClick}>\n                <i className=\"fas fa-plus\" />\n            </button>\n            {displayColorPicker ? (\n                <div style={popover}>\n                    <div style={cover} onClick={handleClose} />\n                    <ChromePicker\n                        color={tmpColor}\n                        onChange={(color) => setTmpColor(color.hex)}\n                        onChangeComplete={(color) => setTmpColor(color.hex)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\n\nimport { Renderer } from \"./renderer\";\nimport { BaseTool, Tool } from \"./tool\";\nimport { ZoomHelper } from \"./zoomHelper\";\nimport { PaletteButton } from \"./PaletteButton\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nconst defaultColors = [\n    \"#FFFFFF\",\n    \"#5A2C02\",\n    \"#386EB6\",\n    \"#6B31A1\",\n    \"#CB2C26\",\n    \"#000000\",\n    \"#888888\",\n    \"#50B050\",\n    \"#FBDB37\",\n    \"#E88D2D\",\n];\n\nexport class PencilTool extends BaseTool implements Tool {\n    private renderer: Renderer;\n    private zoomHelper: ZoomHelper;\n\n    private brushSize = 10;\n    private brushColor = defaultColors[0];\n    private palette: string[] = [...defaultColors];\n\n    private panning = false;\n    private isDrawing = false;\n    private lastX = 0;\n    private lastY = 0;\n    private colorPicking = false;\n    private lastPickedColor = \"#000000\";\n    private _dirty = false;\n\n    set dirty(dirty: boolean) {\n        this._dirty = dirty;\n        if (this.dirtyListener) {\n            this.dirtyListener(dirty);\n        }\n    }\n\n    get dirty() {\n        return this._dirty;\n    }\n\n\n    private dirtyListener?: (dirty: boolean) => void;\n    private colorPickedListener?: (color: string) => void;\n\n    constructor(renderer: Renderer) {\n        super(\"pencil\");\n        this.renderer = renderer;\n        this.zoomHelper = new ZoomHelper(renderer);\n    }\n\n    private sync() {\n        if (this.colorPicking) {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.renderer.getWidth() / 20,\n                color: this.lastPickedColor,\n                type: \"colorpicker\",\n            })\n        } else {\n            this.renderer.setCursor({\n                x: this.lastX,\n                y: this.lastY,\n                radius: this.brushSize / 2,\n                color: this.brushColor,\n                type: \"circle-fill\",\n            });\n        }\n        \n    }\n\n    updateArgs(args: any) {\n        super.updateArgs(args);\n        this.brushSize = args.brushSize || 10;\n        this.brushColor = args.brushColor || defaultColors[0];\n        this.palette = args.palette || [...defaultColors];\n        this.sync();\n    }\n\n    onMouseDown(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) {\n        if (this.colorPicking) {\n            return;\n        }\n        if (event.button === 0) {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            this.renderer.drawPoint(x, y, this.brushSize, this.brushColor);\n            this.isDrawing = true;\n            this.lastX = x;\n            this.lastY = y;\n            this.dirty = true;\n        } else if (event.button === 1) {\n            this.panning = true;\n        }\n        this.sync();\n    }\n\n    onMouseMove(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n            event.nativeEvent.offsetX,\n            event.nativeEvent.offsetY\n        );\n        if (this.colorPicking) {\n            this.lastPickedColor = this.renderer.getPixel(x, y);\n        } else if (this.panning) {\n            this.zoomHelper.onPan(event);\n        } else {\n            let { x, y } = this.zoomHelper.translateMouseToCanvasCoordinates(\n                event.nativeEvent.offsetX,\n                event.nativeEvent.offsetY\n            );\n            if (this.isDrawing) {\n                this.renderer.drawLine(\n                    this.lastX,\n                    this.lastY,\n                    x,\n                    y,\n                    this.brushSize,\n                    this.brushColor\n                );\n                this.dirty = true;\n            }\n        }\n        this.lastX = x;\n        this.lastY = y;\n        this.sync();\n    }\n\n    onMouseUp(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n        if (event.button === 0) {\n            this.isDrawing = false;\n            if (this.colorPicking) {\n                this.colorPicking = false;\n                this.brushColor = this.lastPickedColor;\n                if (this.colorPickedListener) {\n                    this.colorPickedListener(this.lastPickedColor);\n                }\n            }\n        } else if (event.button === 1) {\n            this.panning = false;\n        }\n        this.sync();\n    }\n\n    onWheel(event: WheelEvent) {\n        this.zoomHelper.onWheel(event);\n        this.sync();\n    }\n\n    cancel() {\n        // kind of a hack, clears the selection layer\n        this.renderer.setEditImage(null);\n        this.dirty = false;\n    }\n\n    confirm() {\n        this.renderer.commitSelection();\n        const encodedImage = this.renderer.getEncodedImage(null);\n        if (encodedImage && this.saveListener) {\n            this.saveListener(encodedImage);\n        }\n        this.dirty = false;\n    }\n\n    onSaveImage(listener: (encodedImage: string) => void): void {\n        this.saveListener = listener;\n    }\n\n    onDirty(listener: (dirty: boolean) => void): void {\n        this.dirtyListener = listener;\n    }\n\n    destroy(): boolean {\n        if (!this.dirty || window.confirm(\"Are you sure you want to discard your changes?\")) {\n            this.renderer.setCursor(undefined);\n            this.renderer.setEditImage(null);\n            return true;\n        }\n        return false;\n    }\n\n    beginColorpicker(): void {\n        this.colorPicking = true;\n        this.sync();\n    }\n\n    onColorPicked(listener: (color: string) => void): void {\n        this.colorPickedListener = listener;\n    }\n}\n\ninterface ControlsProps {\n    renderer: Renderer;\n    tool: PencilTool;\n}\n\nconst MAX_PALETTE_SIZE = 30;\n\nfunction addToPalette(palette: string[], color: string): string[] {\n    if (palette.indexOf(color) === -1) {\n        // insert at the beginning\n        palette = [color, ...palette];\n    }\n    if (palette.length > MAX_PALETTE_SIZE) {\n        palette = palette.slice(0, MAX_PALETTE_SIZE);\n    }\n    return palette;\n}\n\nexport const Controls: FC<ControlsProps> = ({ renderer, tool }) => {\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState(defaultColors[0]);\n    const [palette, setPalette] = useState(defaultColors);\n    const [dirty, setDirty] = useState(false);\n\n    tool.onDirty(setDirty);\n\n    useEffect(() => {\n        tool.updateArgs({\n            brushSize,\n            brushColor,\n            palette,\n        });\n    }, [brushSize, brushColor, palette]);\n\n    const onColorSelected = (color: string) => {\n        setBrushColor(color);\n        setPalette(addToPalette(palette, color));\n    };\n\n    tool.onColorPicked(onColorSelected);\n\n    return (\n        <div style={{ marginTop: \"16px\" }}>\n            <div className=\"form-group\">\n                <label style={{width: \"100%\"}}>\n                    Brush size\n                    <small className=\"form-text text-muted\" style={{float: \"right\"}}>\n                        {brushSize}px\n                    </small>\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-control-range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={brushSize}\n                    onChange={(e) => setBrushSize(parseInt(e.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                }}\n            >\n                {palette.map((color, i) => (\n                    <PaletteButton\n                        key={i}\n                        selectedColor={brushColor}\n                        color={color}\n                        onClick={(color) => setBrushColor(color)}\n                    />\n                ))}\n                {/* <div\n                    className=\"color-picker\"\n                    style={{ textAlign: \"center\", backgroundColor: \"#ccc\" }}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </div> */}\n                <button\n                    className=\"color-picker\"\n                    onClick={() => tool.beginColorpicker()}\n                >\n                    <i className=\"fas fa-eye-dropper\" />\n                </button>\n                <ColorPicker\n                    color={brushColor}\n                    onColorSelected={(color) => onColorSelected(color)}\n                />\n            </div>\n            {dirty && (\n                <div className=\"form-group\" style={{ marginTop: \"16px\" }}>\n                    <button\n                        className=\"btn btn-secondary\"\n                        onClick={() => tool.cancel()}\n                    >\n                        Revert\n                    </button>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => tool.confirm()}\n                        style={{ marginLeft: \"8px\" }}\n                    >\n                        Save\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\n// TODO list:\n// reset to initial colors\n// color picker\n// eyedropper\n// color history\n\n// zoom/pan\n// actual drawing\n// undo/redo\n// save\n// revert\n"],"sourceRoot":""}
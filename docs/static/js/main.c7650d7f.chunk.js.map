{"version":3,"sources":["pages/Login.tsx","pages/MainMenu.tsx","components/ImageThumbnail.tsx","components/ImagePopup.tsx","pages/Images.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","client/api.ts","client/base.ts","client/common.ts","lib/designer.ts","components/ImageEditor.tsx","lib/iconhelper.ts","pages/CreateImage.tsx","pages/InteractiveDesigner.tsx"],"names":["Login","props","useState","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","err","setErr","onLogin","a","match","client","login","onVerify","verify","result","data","console","error","className","htmlFor","type","id","placeholder","value","onChange","e","target","onClick","preventDefault","aria-describedby","MainMenu","to","ImageThumbnail","apiUrl","image","onDelete","onSave","onFork","onDesign","src","updated_at","useEffect","img","document","getElementById","onerror","style","padding","width","margin","cursor","alt","label","imageStatusToIconClass","status","role","current_iterations","iterations","marginRight","enable_video","window","open","marginTop","ImagePopup","onClose","Modal","show","onHide","size","Header","closeButton","Title","Body","score","phrases","join","ImagesPage","api","history","useHistory","images","setImages","selectedImage","setSelectedImage","onForkImage","push","loadImages","moment","add","valueOf","listImages","resp","pollImages","reduce","max","Math","newImages","filter","findIndex","i","updatedImages","map","updatedImage","find","sort","b","timerHandle","setInterval","clearInterval","onDeleteImage","deleteImage","onSaveImage","updateImage","UpdateImageInputStatusEnum","Saved","onDesignImage","setDesignerCurrentImageId","TokenRefresher","onCredentialsRefreshed","credentials","interval","refreshToken","refresh","then","loginResult","Healthchecker","healthCheck","setHealthCheck","healthcheck","catch","display","config","httpClient","axios","AIBrushApi","undefined","localStorage","getItem","updateHttpClient","accessToken","defaults","headers","common","App","setCredentials","init","log","storedCredentials","JSON","parse","setItem","stringify","prompt","location","reload","path","exact","CreateImage","InteractiveDesigner","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","HealthcheckStatusEnum","ImageStatusEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","globalAxios","this","RequiredError","field","msg","name","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","createImage","createImageInput","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","localVarPath","encodeURIComponent","String","getImage","download","getImageData","getThumbnailData","getVideoData","limit","direction","loginInput","processImage","refreshLoginInput","updateImageInput","updateVideoData","body","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","getDesignerCurrentImageId","removeItem","ImageEditor","encodedImage","onCancel","canvas","setCanvas","ctx","setCtx","brushSize","setBrushSize","brushColor","setBrushColor","isDrawing","setIsDrawing","lastX","setLastX","lastY","setLastY","c","getContext","Image","onload","drawImage","fillStyle","fillRect","height","getMousePos","rect","getBoundingClientRect","scaleX","scaleY","x","clientX","left","y","clientY","top","handleCancel","onMouseDown","mousePos","onMouseMove","beginPath","moveTo","lineTo","strokeStyle","lineWidth","lineCap","stroke","onMouseUp","min","parseFloat","Footer","toDataURL","Pending","Processing","Completed","qs","substring","encoded_image","input","setInput","editingImage","setEditingImage","count","setCount","onSubmit","onImageSelected","file","files","loadImage","HTMLCanvasElement","base64","split","maxWidth","maxHeight","crop","loadParent","parentId","responseType","binaryImageData","Buffer","from","base64ImageData","parent","parseInt","checked","createElement","length","goBack","imageUri","setImage","currentImageId","setCurrentImageId","loadImageData","fetchImage","onPlay","timer","inprogress","disabled","playButton","renderPlayButton"],"mappings":"mSAWaA,EAAwB,SAAAC,GAAS,MAEhBC,mBAAS,IAFO,mBAEnCC,EAFmC,KAE5BC,EAF4B,OAGEF,oBAAS,GAHX,mBAGnCG,EAHmC,KAGnBC,EAHmB,OAIlBJ,mBAAS,IAJS,mBAInCK,EAJmC,KAI7BC,EAJ6B,OAKpBN,mBAAS,IALW,mBAKnCO,EALmC,KAK9BC,EAL8B,KAOpCC,EAAO,uCAAG,sBAAAC,EAAA,yDAEZF,EAAO,IAEFP,EAAMU,MAAM,wBAJL,uBAKRH,EAAO,yBALC,0CAQNT,EAAMa,OAAOC,MAAM,CACrBZ,UATQ,OAWZG,GAAkB,GAXN,2CAAH,qDAcPU,EAAQ,uCAAG,4BAAAJ,EAAA,6DAEbF,EAAO,IAFM,kBAKYT,EAAMa,OAAOG,OAAO,CACrCd,QACAI,SAPK,OAKHW,EALG,OASTjB,EAAMU,QAAQO,EAAOC,MATZ,gDAWTC,QAAQC,MAAR,MACAX,EAAO,yBAZE,yDAAH,qDAiBd,OACI,qBAAKY,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,uBAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,mBAGCb,GAAO,mBAAGa,UAAU,cAAb,SAA4Bb,IAGnCJ,GAAkB,gCACX,sBAAKiB,UAAU,aAAf,UACI,uBAAOC,QAAQ,aAAf,yBACA,uBAAOC,KAAK,OAAOF,UAAU,eAAeG,GAAG,aAAaC,YAAY,oBAAoBC,MAAOpB,EAAMqB,SAAU,SAACC,GAAD,OAAOrB,EAAQqB,EAAEC,OAAOH,aAG/I,wBAAQL,UAAU,oBAAoBS,QAAS,kBAAMzB,GAAkB,IAAvE,oBANW,OAQX,wBAAQkB,KAAK,SAASF,UAAU,kBAAkBS,QAAS,SAACF,GACxDA,EAAEG,iBACFhB,KAFJ,wBAONX,GAAkB,gCAChB,sBAAKiB,UAAU,aAAf,UACI,uBAAOC,QAAQ,QAAf,2BACA,uBAAOC,KAAK,QAAQF,UAAU,eAAeG,GAAG,QAAQQ,mBAAiB,YAAYP,YAAY,cAAcC,MAAOxB,EAAOyB,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOH,UAChK,uBAAOF,GAAG,YAAYH,UAAU,uBAAhC,+DAEJ,wBAAQE,KAAK,SAASF,UAAU,kBAAkBS,QAAS,SAACF,GACxDA,EAAEG,iBACFrB,KAFJ,kCC3EnBuB,EAAe,WACxB,OACI,sBAAKZ,UAAU,YAAf,UAEI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,yDAIR,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,eAGvB,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,eAAC,IAAD,CAAMa,GAAG,gBAAgBb,UAAU,kBAAnC,UAEI,mBAAGA,UAAU,iBAFjB,6BAKA,eAAC,IAAD,CAAMa,GAAG,UAAUb,UAAU,kBAA7B,UAEI,mBAAGA,UAAU,uBAFjB,oBAKA,eAAC,IAAD,CAAMa,GAAG,YAAYb,UAAU,kBAA/B,UAEI,mBAAGA,UAAU,sBAFjB,0C,yCCpBXc,EAA0C,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,MAAOP,EAAkD,EAAlDA,QAASQ,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAElGC,EAAG,UAAMN,EAAN,mBAAuBC,EAAMb,GAA7B,qCAA4Da,EAAMM,YAS3E,OAPAC,qBAAU,WACN,IAAMC,EAAMC,SAASC,eAAT,gBAAiCV,EAAMb,KACnDqB,EAAIG,QAAU,WACVH,EAAIH,IAAM,0BAKd,sBAAKrB,UAAU,OAAO4B,MAAO,CAAEC,QAAS,OAAQC,MAAO,QAASC,OAAQ,QAAxE,UACI,qBACIH,MAAO,CAAEI,OAAQ,WACjB7B,GAAE,gBAAWa,EAAMb,IACnBH,UAAU,eACVqB,IAAKA,EACLY,IAAKjB,EAAMkB,MAAOzB,QAAS,kBAAMA,EAAQO,MAC7C,sBAAKhB,UAAU,YAAf,UACI,gCACI,oBAAIA,UAAU,aAAd,SACKgB,EAAMkB,QAEX,oBAAGlC,UAAU,YAAb,UAEI,mBAAGA,UAAWmC,YAAuBnB,EAAMoB,UAF/C,OAGKpB,EAAMoB,UAGO,eAAjBpB,EAAMoB,QAA2B,qBAAKpC,UAAU,WAAf,SAC9B,qBAAKA,UAAU,eAAeqC,KAAK,cAAcT,MAAO,CAAEE,MAAM,GAAD,OAAiC,EAA3Bd,EAAMsB,mBAA4BtB,EAAMuB,WAAa,IAA3D,aAKvE,uBACCrB,GAA2B,cAAjBF,EAAMoB,QAA0B,wBAAQpC,UAAU,yBAAyBS,QAAS,kBAAMS,EAAOF,IAAQY,MAAO,CAACY,YAAa,OAA9F,SAEvC,mBAAGxC,UAAU,kBAEhBiB,GAAY,wBAAQjB,UAAU,wBAAwBS,QAAS,kBAAMQ,GAAYA,EAASD,IAAQY,MAAO,CAACY,YAAa,OAA3G,SACT,mBAAGxC,UAAU,uBAEhBmB,GAA2B,UAAjBH,EAAMoB,QAAsB,wBAAQpC,UAAU,2BAA2BS,QAAS,kBAAMU,GAAUA,EAAOH,IAAQY,MAAO,CAACY,YAAa,OAA1G,SACnC,mBAAGxC,UAAU,yBAGhBoB,GAAY,wBAAQpB,UAAU,2BAA2BS,QAAS,kBAAMW,GAAYA,EAASJ,IAAQY,MAAO,CAACY,YAAa,OAA9G,SACT,mBAAGxC,UAAU,yBAEE,cAAjBgB,EAAMoB,QAA2C,UAAjBpB,EAAMoB,SAAuBpB,EAAMyB,cAAgB,wBAAQzC,UAAU,2BAA2BS,QAAS,kBAAMiC,OAAOC,KAAP,UAAe5B,EAAf,mBAAgCC,EAAMb,GAAtC,gBAAuDyB,MAAO,CAACY,YAAa,MAAOI,UAAW,OAA1J,SACjF,mBAAG5C,UAAU,0B,QCzDpB6C,EAAkC,SAAC,GAA8B,IAA7B9B,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,MAAO8B,EAAa,EAAbA,QAEtDzB,EAAG,UAAMN,EAAN,mBAAuBC,EAAMb,GAA7B,iCAAwDa,EAAMM,YAUvE,OARAC,qBAAU,WACN,IAAMC,EAAMC,SAASC,eAAT,sBAAuCV,EAAMb,KACzDqB,EAAIG,QAAU,WACVH,EAAIH,IAAM,0BAMd,eAAC0B,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAAQH,EAASI,KAAK,KAAzC,UACI,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACL,EAAA,EAAMM,MAAP,UAAcrC,EAAMkB,UAExB,eAACa,EAAA,EAAMO,KAAP,WACI,qBAAK1B,MAAO,CAACE,MAAO,QAAS3B,GAAE,sBAAiBa,EAAMb,IAAMkB,IAAKA,EAAKY,IAAKjB,EAAMkB,QAEjF,gCACI,yCAAYlB,EAAMoB,UAClB,6CAAgBpB,EAAMuB,cACtB,qDAAwBvB,EAAMsB,sBAC9B,wCAAWtB,EAAMuC,SACjB,0CAAavC,EAAMwC,QAAQC,KAAK,SAEhC,+CAAkBzC,EAAMyB,aAAe,MAAQ,kB,QCrBtDiB,EAAwB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,IAAK5C,EAAa,EAAbA,OACnC6C,EAAUC,cADsC,EAE1BjF,mBAAuB,IAFG,mBAE/CkF,EAF+C,KAEvCC,EAFuC,OAGhCnF,mBAAwB,MAHQ,mBAG/CO,EAH+C,KAG1CC,EAH0C,OAIZR,mBAAuB,MAJX,mBAI/CoF,EAJ+C,KAIhCC,EAJgC,KAMhDC,EAAW,uCAAG,WAAOlD,GAAP,SAAA1B,EAAA,sDAEhBsE,EAAQO,KAAR,+BAAqCnD,EAAMb,KAF3B,2CAAH,sDAKXiE,EAAU,uCAAG,8BAAA9E,EAAA,6DAEfF,EAAO,MAFQ,SAIL4C,EAASqC,MAASC,IAAI,EAAG,WAAWC,UAJ/B,SAKQZ,EAAIa,WAAWxC,EAAQ,IAAK,QALpC,cAKLyC,EALK,QAMF5E,KAAKiE,QACVC,EAAUU,EAAK5E,KAAKiE,QAPb,kBASJ,GATI,kCAWX1E,EAAO,yBACPU,QAAQC,MAAR,MAZW,0DAAH,qDAgBV2E,EAAU,uCAAG,WAAOZ,GAAP,qBAAAxE,EAAA,6DAEfF,EAAO,MAED4C,EAAS8B,EAAOa,QAAO,SAACC,EAAK5D,GAC/B,OAAO6D,KAAKD,IAAIA,EAAK5D,EAAMM,cAC5B,GANY,kBASQqC,EAAIa,WAAWxC,EAAS,EAAG,IAAK,OATxC,cASLyC,EATK,QAUF5E,KAAKiE,SAGJgB,EAAYL,EAAK5E,KAAKiE,OAAOiB,QAAO,SAAA/D,GACtC,OAAO8C,EAAOkB,WAAU,SAAAC,GAAC,OAAIA,EAAE9E,KAAOa,EAAMb,MAAM,KAEhD+E,EAAgBT,EAAK5E,KAAKiE,OAAOiB,QAAO,SAAA/D,GAC1C,OAAO8C,EAAOkB,WAAU,SAAAC,GAAC,OAAIA,EAAE9E,KAAOa,EAAMb,OAAO,KAEvD4D,EAAU,sBACHD,EAAOqB,KAAI,SAAAnE,GACV,IAAMoE,EAAeF,EAAcG,MAAK,SAAAJ,GAAC,OAAIA,EAAE9E,KAAOa,EAAMb,MAC5D,OAAIiF,GAGGpE,MANL,YAQH8D,IACLQ,MAAK,SAAChG,EAAGiG,GACP,OAAOA,EAAEjE,WAAahC,EAAEgC,gBA7BrB,kBAgCJwC,GAhCI,kCAkCX1E,EAAO,yBACPU,QAAQC,MAAR,MAnCW,0DAAH,sDAuChBwB,qBAAU,WACDoC,GAGLS,MACD,CAACT,IAEJpC,qBAAU,WACN,GAAKoC,EAAL,CAIA,IAAM6B,EAAcC,aAAY,WAC5Bf,EAAWZ,KACZ,KACH,OAAO,WACH4B,cAAcF,OAGnB,CAAC7B,EAAKG,IAET,IAAM6B,EAAa,uCAAG,WAAO3E,GAAP,SAAA1B,EAAA,6DAElBF,EAAO,IAFW,kBAKRuE,EAAIiC,YAAY5E,EAAMb,IALd,OAOd4D,EAAUD,EAAOiB,QAAO,SAAAE,GAAC,OAAIA,EAAE9E,KAAOa,EAAMb,OAP9B,gDASdL,QAAQC,MAAR,MACAX,EAAO,0BAVO,yDAAH,sDAcbyG,EAAW,uCAAG,WAAO7E,GAAP,eAAA1B,EAAA,+EAGOqE,EAAImC,YAAY9E,EAAMb,GAAc,CAAEiC,OAAQ2D,IAA2BC,QAHhF,OAGNvB,EAHM,OAKZV,EAAUD,EAAOqB,KAAI,SAAAF,GAAC,OAAIA,EAAE9E,KAAOa,EAAMb,GAAKsE,EAAK5E,KAAOoF,MAL9C,gDAOZnF,QAAQC,MAAR,MACAX,EAAO,wBARK,yDAAH,sDAYX6G,EAAa,uCAAG,WAAOjF,GAAP,SAAA1B,EAAA,sDAClB4G,YAA0BlF,EAAMb,IAChCyD,EAAQO,KAAK,aAFK,2CAAH,sDAKnB,OACI,sBAAKnE,UAAU,YAAf,UACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SACI,4CAIPb,GAAO,qBAAKa,UAAU,MAAf,SACJ,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,qBAAqBqC,KAAK,QAAzC,SACKlD,QAKb,qBAAKa,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,eAAC,IAAD,CAAMa,GAAG,gBAAgBb,UAAU,kBAAnC,UACI,mBAAGA,UAAU,gBADjB,2BAMR,uBACA,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACK8D,EAAOqB,KAAI,SAAAnE,GAAK,OACb,cAAC,EAAD,CACIE,OAAQ2E,EACR5E,SAAU0E,EACVxE,OAAQ+C,EACRzD,QAASwD,EACT7C,SAAU6E,EACVlF,OAAQA,EAERC,MAAOA,GADFA,EAAMb,aAO9B6D,GAAiB,cAAC,EAAD,CAAYjD,OAAQA,EAAQC,MAAOgD,EAAwBlB,QAAS,kBAAMmB,EAAiB,aCrK5GkC,EAA2C,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,uBAAwBzC,EAAuB,EAAvBA,IAAK0C,EAAkB,EAAlBA,YAcpF,OAbA9E,qBAAU,WACN,IAAM+E,EAAWb,aAAY,WACrBY,GAAeA,EAAYE,cAC3B5C,EAAI6C,QAAQ,CAACD,aAAcF,EAAYE,eAAeE,MAAK,SAAAC,GACvDN,EAAuBM,EAAY7G,WAI5C,KACH,OAAO,WACH6F,cAAcY,MAEnB,CAACD,GAAeA,EAAYE,eACxB,yBCnBEI,EAAwC,SAAC,GAAa,IAAXhD,EAAU,EAAVA,IAAU,EAExB/E,oBAAS,GAFe,mBAEvDgI,EAFuD,KAE1CC,EAF0C,KAc9D,OAVAtF,qBAAU,WACN,IAAM+E,EAAWb,aAAY,WACzB9B,EAAImD,cAAcL,MAAK,kBAAMI,GAAe,MAAOE,OAAM,kBAAMF,GAAe,QAC/E,KAEH,OAAO,kBAAMnB,cAAcY,MAC5B,CAAC3C,IAKA,qBAAK3D,UAAU,qBAAqBqC,KAAK,QAAQT,MAAO,CAAEoF,QAASJ,EAAc,OAAS,SAA1F,SACI,+D,QCRNK,ECTS,CACHlG,OAAQ,4BDSdmG,EAAaC,IACb3H,EAAS,IAAI4H,SAAWC,EAAWC,aAAaC,QAAQ,WAAaN,EAAOlG,OAAQmG,GAE1F,SAASM,EAAiBd,GACpBA,EAAYe,cACdP,EAAWQ,SAASC,QAAQC,OAA5B,+BAAgElB,EAAYe,cAkGjEI,MA9Ff,WAAgB,IAAD,EAEyBjJ,mBAA6B,MAFtD,mBAENyH,EAFM,KAEOyB,EAFP,KAIPC,EAAI,uCAAG,gCAAAzI,EAAA,yDACXQ,QAAQkI,IAAI,cACNC,EAAoBX,aAAaC,QAAQ,gBAFpC,iCAMDlB,EAAc6B,KAAKC,MAAMF,GANxB,SAOczI,EAAOgH,QAAQ,CAClCD,aAAcF,EAAYE,eARrB,OAOD3G,EAPC,OAUPkI,EAAelI,EAAOC,MAEtByH,aAAac,QAAQ,cAAeF,KAAKG,UAAUzI,EAAOC,OAC1D2H,EAAiB5H,EAAOC,MAbjB,kDAePC,QAAQkI,IAAR,MAfO,0DAAH,qDAoBJ3I,EAAO,uCAAG,WAAOgH,GAAP,SAAA/G,EAAA,sDACdgI,aAAac,QAAQ,cAAeF,KAAKG,UAAUhC,IACnDyB,EAAezB,GACfmB,EAAiBnB,GAHH,2CAAH,sDAqBb,OAJA9E,qBAAU,WACRwG,MACC,IAGD,sBAAK/H,UAAU,MAAf,UACE,cAAC,EAAD,CAAgB2D,IAAKnE,EAAQ6G,YAAaA,EAA4BD,uBAAwB/G,IAC9F,cAAC,EAAD,CAAesE,IAAKnE,IAEpB,yBAAQQ,UAAU,6BAA6BS,QApB5B,WACrB,IAAIM,EAASuG,aAAaC,QAAQ,WAAaN,EAAOlG,OAChD0D,EAAO6D,OAAO,wBAAyBvH,GACzC0D,IACF1D,EAAS0D,EACT6C,aAAac,QAAQ,SAAUrH,GAE/B2B,OAAO6F,SAASC,WAahB,UAEE,mBAAGxI,UAAU,eAFf,mBAKA,eAAC,IAAD,YAEIqG,GAAe,cAAC,EAAD,CAAOa,WAAYA,EAAY1H,OAAQA,EAAQH,QAASA,IAExEgH,GAAe,qCACd,yBAAQrG,UAAU,6BAA6BS,QAAS,kBAAMqH,EAAe,OAA7E,UAEE,mBAAG9H,UAAU,wBAFf,iBAMA,eAAC,IAAD,CAAMA,UAAU,6BAA6Ba,GAAG,IAAhD,UAEE,mBAAGb,UAAU,gBAFf,kBAQDqG,GAAe,eAAC,IAAD,WACd,cAAC,IAAD,CAAOoC,KAAK,IAAIC,OAAO,EAAvB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,gBAAZ,SACE,cAACE,EAAA,EAAD,CAAahF,IAAKnE,EAAQuB,OAAQkG,EAAOlG,WAE3C,cAAC,IAAD,CAAO0H,KAAK,UAAZ,SACE,cAAC,EAAD,CAAY1H,OAAQkG,EAAOlG,OAAQ4C,IAAKnE,MAG1C,cAAC,IAAD,CAAOiJ,KAAK,YAAZ,SACE,cAACG,EAAA,EAAD,CAAqBjF,IAAKnE,EAAQuB,OAAQkG,EAAOlG,qBEjG9C8H,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9H,SAASC,eAAe,SAM1BmH,K,0ICoEYW,EAwFAC,EA2GA1D,E,+FCnQC2D,EAAY,2BAA2BC,QAAQ,OAAQ,IA4BvDC,EAGT,WAAYC,GAAsH,IAA7EC,EAA4E,uDAAzDJ,EAAqBvC,EAAoC,uDAAb4C,IAAa,yBAA5ED,WAA4E,KAApC3C,QAAoC,KAFvH0C,mBAEuH,EACzHA,IACAG,KAAKH,cAAgBA,EACrBG,KAAKF,SAAWD,EAAcC,UAAYE,KAAKF,WAW9CG,EAAb,kDAEI,WAAmBC,EAAeC,GAAe,IAAD,8BAC5C,cAAMA,IADSD,QAA6B,EADhDE,KAAwB,gBACwB,EAFpD,sBAAmCC,QC1CtBC,EAAiB,sBAOjBC,EAAoB,SAAUC,EAAsBC,EAAmBC,GAChF,GAAmB,OAAfA,QAAsCrD,IAAfqD,EACvB,MAAM,IAAIT,EAAcQ,EAAlB,6BAAmDA,EAAnD,+CAAmGD,EAAnG,OAyDDG,EAAkB,SAAUC,GAA6B,IAClE,IAAMC,EAAe,IAAIC,gBAAgBF,EAAIG,QADqB,mBAAhBC,EAAgB,iCAAhBA,EAAgB,kBAElE,cAAqBA,EAArB,eAA8B,CAAzB,IAAMC,EAAM,KACb,IAAK,IAAMC,KAAOD,EACd,GAAIE,MAAMC,QAAQH,EAAOC,IAAO,CAC5BL,EAAaQ,OAAOH,GADQ,oBAETD,EAAOC,IAFE,IAE5B,2BAAgC,CAAC,IAAtBI,EAAqB,QAC5BT,EAAaU,OAAOL,EAAKI,IAHD,oCAM5BT,EAAaW,IAAIN,EAAKD,EAAOC,IAIzCN,EAAIG,OAASF,EAAaY,YAOjBC,EAAwB,SAAUrL,EAAYsL,EAAqB9B,GAC5E,IAAM+B,EAA6B,kBAAVvL,EAIzB,OAH2BuL,GAAa/B,GAAiBA,EAAcgC,WACjEhC,EAAcgC,WAAWF,EAAehE,QAAQ,iBAChDiE,GAEA1D,KAAKG,eAAoBhB,IAAVhH,EAAsBA,EAAQ,IAC5CA,GAAS,IAOPyL,EAAe,SAAUlB,GAClC,OAAOA,EAAImB,SAAWnB,EAAIG,OAASH,EAAIoB,MAO9BC,EAAwB,SAAUC,EAAwBnC,EAA4BL,EAAmBG,GAClH,OAAO,WAAuE,IAAtE1C,EAAqE,uDAA9C4C,EAAaD,EAAiC,uDAAdJ,EACrDyC,EAAgB,2BAAOD,EAAUE,SAAjB,IAA0BxB,MAAmB,OAAbf,QAAa,IAAbA,OAAA,EAAAA,EAAeC,WAAYA,GAAYoC,EAAUtB,MACvG,OAAOzD,EAAMkF,QAAQF,M,SFnDjB3C,K,SAAAA,M,cAwFAC,K,kBAAAA,E,wBAAAA,E,sBAAAA,E,eAAAA,M,cA2GA1D,K,kBAAAA,E,wBAAAA,E,sBAAAA,E,eAAAA,M,KA+BL,IAueMuG,EAAe,SAASzC,GACjC,IAAM0C,EAxeiC,SAAU1C,GACjD,MAAO,CAOH2C,YAAY,WAAD,4BAAE,WAAOC,GAAP,uCAAAnN,EAAA,6DAA4C8M,EAA5C,+BAA2D,GAG9DM,EAAiB,IAAIC,IAHlB,UAGoCrC,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EATG,yBASwBC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CrC,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SACpGkF,EAAuBhN,KAAO6L,EAAsBe,EAAkBI,EAAwBhD,GApBrF,kBAsBF,CACHe,IAAKkB,EAAaY,GAClBN,QAASS,IAxBJ,4CAAF,mDAAC,GAiCZjH,YAAY,WAAD,4BAAE,WAAOzF,GAAP,uCAAAb,EAAA,6DAAmB8M,EAAnB,+BAAkC,GAE3C7B,EAAkB,cAAe,KAAMpK,GACjCgN,EAAe,eAChBxD,QADgB,WACJ,KADI,KACKyD,mBAAmBC,OAAOlN,KAE9CuM,EAAiB,IAAIC,IAAIQ,EAAc7C,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EAZG,yBAYwBC,OAAQ,UAAaF,GAAgBR,GAChEY,EAA0B,GAKhCrC,EAAgB+B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SApB3F,kBAsBF,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IAxBJ,4CAAF,mDAAC,GAkCZS,SAAS,WAAD,4BAAE,WAAOnN,EAAYoN,GAAnB,yCAAAjO,EAAA,6DAAqD8M,EAArD,+BAAoE,GAE1E7B,EAAkB,WAAY,KAAMpK,GAC9BgN,EAAe,eAChBxD,QADgB,WACJ,KADI,KACKyD,mBAAmBC,OAAOlN,KAE9CuM,EAAiB,IAAIC,IAAIQ,EAAc7C,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EAZA,yBAY2BC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAC1BD,EAAyB,QAEd1F,IAAbkG,IACAR,EAAsB,SAAeQ,GAKzC5C,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SAxB9F,kBA0BC,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IA5BP,4CAAF,qDAAC,GAqCTW,aAAa,WAAD,4BAAE,WAAOrN,GAAP,uCAAAb,EAAA,6DAAmB8M,EAAnB,+BAAkC,GAE5C7B,EAAkB,eAAgB,KAAMpK,GAClCgN,EAAe,yBAChBxD,QADgB,WACJ,KADI,KACKyD,mBAAmBC,OAAOlN,KAE9CuM,EAAiB,IAAIC,IAAIQ,EAAc7C,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EAZI,yBAYuBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCrC,EAAgB+B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SApB1F,kBAsBH,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IAxBH,4CAAF,mDAAC,GAiCbY,iBAAiB,WAAD,4BAAE,WAAOtN,GAAP,uCAAAb,EAAA,6DAAmB8M,EAAnB,+BAAkC,GAEhD7B,EAAkB,mBAAoB,KAAMpK,GACtCgN,EAAe,6BAChBxD,QADgB,WACJ,KADI,KACKyD,mBAAmBC,OAAOlN,KAE9CuM,EAAiB,IAAIC,IAAIQ,EAAc7C,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EAZQ,yBAYmBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCrC,EAAgB+B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SApBtF,kBAsBP,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IAxBC,4CAAF,mDAAC,GAiCjBa,aAAa,WAAD,4BAAE,WAAOvN,GAAP,uCAAAb,EAAA,6DAAmB8M,EAAnB,+BAAkC,GAE5C7B,EAAkB,eAAgB,KAAMpK,GAClCgN,EAAe,yBAChBxD,QADgB,WACJ,KADI,KACKyD,mBAAmBC,OAAOlN,KAE9CuM,EAAiB,IAAIC,IAAIQ,EAAc7C,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EAZI,yBAYuBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCrC,EAAgB+B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SApB1F,kBAsBH,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IAxBH,4CAAF,mDAAC,GAgCb/F,YAAY,WAAD,4BAAE,kDAAAxH,EAAA,6DAAO8M,EAAP,+BAAsB,GAGzBM,EAAiB,IAAIC,IAHlB,eAGoCrC,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EATG,yBASwBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCrC,EAAgB+B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SAjB3F,kBAmBF,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IArBJ,4CAAF,kDAAC,GAgCZrI,WAAW,WAAD,4BAAE,WAAOxC,EAAiB2L,EAAgBC,GAAxC,uCAAAtO,EAAA,6DAAoE8M,EAApE,+BAAmF,GAGrFM,EAAiB,IAAIC,IAHnB,UAGqCrC,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EATE,yBASyBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAC1BD,EAAyB,QAEhB1F,IAAXrF,IACA+K,EAAsB,OAAa/K,QAGzBqF,IAAVsG,IACAZ,EAAsB,MAAYY,QAGpBtG,IAAduG,IACAb,EAAsB,UAAgBa,GAK1CjD,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SA7B5F,kBA+BD,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IAjCL,4CAAF,uDAAC,GA0CXpN,MAAM,WAAD,4BAAE,WAAOoO,GAAP,uCAAAvO,EAAA,6DAAgC8M,EAAhC,+BAA+C,GAG5CM,EAAiB,IAAIC,IAHxB,cAG0CrC,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EATH,yBAS8BC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CrC,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SACpGkF,EAAuBhN,KAAO6L,EAAsBmC,EAAYhB,EAAwBhD,GApBrF,kBAsBI,CACHe,IAAKkB,EAAaY,GAClBN,QAASS,IAxBV,4CAAF,mDAAC,GAgCNiB,aAAa,WAAD,4BAAE,kDAAAxO,EAAA,6DAAO8M,EAAP,+BAAsB,GAG1BM,EAAiB,IAAIC,IAHjB,iBAGmCrC,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EATI,yBASuBC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCrC,EAAgB+B,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SAjB1F,kBAmBH,CACHiD,IAAKkB,EAAaY,GAClBN,QAASS,IArBH,4CAAF,kDAAC,GA8BbrG,QAAQ,WAAD,4BAAE,WAAOuH,GAAP,uCAAAzO,EAAA,6DAA8C8M,EAA9C,+BAA6D,GAG5DM,EAAiB,IAAIC,IAHtB,gBAGwCrC,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EATD,yBAS4BC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CrC,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SACpGkF,EAAuBhN,KAAO6L,EAAsBqC,EAAmBlB,EAAwBhD,GApB1F,kBAsBE,CACHe,IAAKkB,EAAaY,GAClBN,QAASS,IAxBR,4CAAF,mDAAC,GAkCR/G,YAAY,WAAD,4BAAE,WAAO3F,EAAY6N,GAAnB,yCAAA1O,EAAA,6DAAwD8M,EAAxD,+BAAuE,GAEhF7B,EAAkB,cAAe,KAAMpK,GACjCgN,EAAe,eAChBxD,QADgB,WACJ,KADI,KACKyD,mBAAmBC,OAAOlN,KAE9CuM,EAAiB,IAAIC,IAAIQ,EAAc7C,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EAZG,yBAYwBC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CrC,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SACpGkF,EAAuBhN,KAAO6L,EAAsBsC,EAAkBnB,EAAwBhD,GAvBrF,kBAyBF,CACHe,IAAKkB,EAAaY,GAClBN,QAASS,IA3BJ,4CAAF,qDAAC,GAqCZoB,gBAAgB,WAAD,4BAAE,WAAO9N,EAAY+N,GAAnB,yCAAA5O,EAAA,6DAA+B8M,EAA/B,+BAA8C,GAE3D7B,EAAkB,kBAAmB,KAAMpK,GACrCgN,EAAe,yBAChBxD,QADgB,WACJ,KADI,KACKyD,mBAAmBC,OAAOlN,KAE9CuM,EAAiB,IAAIC,IAAIQ,EAAc7C,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EAZO,yBAYoBC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,YAE1CrC,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SACpGkF,EAAuBhN,KAAO6L,EAAsBwC,EAAMrB,EAAwBhD,GAvBrE,kBAyBN,CACHe,IAAKkB,EAAaY,GAClBN,QAASS,IA3BA,4CAAF,qDAAC,GAoChBlN,OAAO,WAAD,4BAAE,WAAOwO,GAAP,uCAAA7O,EAAA,6DAA4C8M,EAA5C,+BAA2D,GAGzDM,EAAiB,IAAIC,IAHvB,eAGyCrC,GAEzCT,IACA+C,EAAc/C,EAAc+C,aAG1BC,EATF,yBAS6BC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,IADzBC,EAA0B,IAKR,gBAAkB,mBAE1CrC,EAAgB+B,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYjF,QAAUiF,EAAYjF,QAAU,GACxFkF,EAAuBlF,QAAvB,uCAAqCqF,GAA4BE,GAA2Bd,EAAQzE,SACpGkF,EAAuBhN,KAAO6L,EAAsByC,EAAkBtB,EAAwBhD,GApB1F,kBAsBG,CACHe,IAAKkB,EAAaY,GAClBN,QAASS,IAxBT,4CAAF,mDAAC,IAmCuBuB,CAA4BvE,GAC9D,MAAO,CAOG2C,YAPH,SAOeC,EAAqCL,GAA4F,OAAD,0HAC9GG,EAA0BC,YAAYC,EAAkBL,GADsD,cACxIiC,EADwI,yBAEvIpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFsE,8CAU5IjE,YAjBH,SAiBezF,EAAYiM,GAA2F,OAAD,0HACpFG,EAA0B3G,YAAYzF,EAAIiM,GAD0C,cAC9GiC,EAD8G,yBAE7GpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAF4C,8CAWlHyD,SA5BH,SA4BYnN,EAAYoN,EAAkCnB,GAA4F,OAAD,0HACpHG,EAA0Be,SAASnN,EAAIoN,EAAUnB,GADmE,cAC9IiC,EAD8I,yBAE7IpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAF4E,8CAUlJ2D,aAtCH,SAsCgBrN,EAAYiM,GAA0F,OAAD,0HACpFG,EAA0BiB,aAAarN,EAAIiM,GADyC,cAC9GiC,EAD8G,yBAE7GpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAF4C,8CAUlH4D,iBAhDH,SAgDoBtN,EAAYiM,GAA0F,OAAD,0HACxFG,EAA0BkB,iBAAiBtN,EAAIiM,GADyC,cAClHiC,EADkH,yBAEjHpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFgD,8CAUtH6D,aA1DH,SA0DgBvN,EAAYiM,GAA0F,OAAD,0HACpFG,EAA0BmB,aAAavN,EAAIiM,GADyC,cAC9GiC,EAD8G,yBAE7GpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAF4C,8CASlH/C,YAnEH,SAmEesF,GAAkG,OAAD,0HAC/EG,EAA0BzF,YAAYsF,GADyC,cACzGiC,EADyG,yBAExGpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFuC,8CAY7GrF,WA/EH,SA+EcxC,EAAiB2L,EAAgBC,EAA4BxB,GAAgG,OAAD,0HACzIG,EAA0B/H,WAAWxC,EAAQ2L,EAAOC,EAAWxB,GAD0E,cACnKiC,EADmK,yBAElKpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFiG,8CAUvKpK,MAzFH,SAyFSoO,EAAyBzB,GAA2F,OAAD,0HAC3FG,EAA0B9M,MAAMoO,EAAYzB,GAD+C,cACrHiC,EADqH,yBAEpHpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFmD,8CASzHiE,aAlGH,SAkGgB1B,GAA4F,OAAD,0HAC1EG,EAA0BuB,aAAa1B,GADmC,cACpGiC,EADoG,yBAEnGpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFkC,8CAUxGrD,QA5GH,SA4GWuH,EAAuC3B,GAAkG,OAAD,0HAClHG,EAA0B/F,QAAQuH,EAAmB3B,GAD6D,cAC5IiC,EAD4I,yBAE3IpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAF0E,8CAWhJ/D,YAvHH,SAuHe3F,EAAY6N,EAAqC5B,GAA4F,OAAD,0HAC1HG,EAA0BzG,YAAY3F,EAAI6N,EAAkB5B,GAD8D,cACpJiC,EADoJ,yBAEnJpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFkF,8CAWxJoE,gBAlIH,SAkImB9N,EAAY+N,EAAY9B,GAA2F,OAAD,0HACpGG,EAA0B0B,gBAAgB9N,EAAI+N,EAAM9B,GADgD,cAC9HiC,EAD8H,yBAE7HpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAF4D,8CAUlIlK,OA5IH,SA4IUwO,EAAqC/B,GAAkG,OAAD,0HAC/GG,EAA0B5M,OAAOwO,EAAkB/B,GAD4D,cACzIiC,EADyI,yBAExIpC,EAAsBoC,EAAmBtE,IAAaL,EAAWG,IAFuE,gDAwJ9IzC,EAAb,iKAQI,SAAmBqF,EAAqCL,GAAgB,IAAD,OACnE,OAAOE,EAAatC,KAAKH,eAAe2C,YAAYC,EAAkBL,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eATlI,yBAmBI,SAAmB3J,EAAYiM,GAAgB,IAAD,OAC1C,OAAOE,EAAatC,KAAKH,eAAejE,YAAYzF,EAAIiM,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eApBpH,sBA+BI,SAAgB3J,EAAYoN,EAAkCnB,GAAgB,IAAD,OACzE,OAAOE,EAAatC,KAAKH,eAAeyD,SAASnN,EAAIoN,EAAUnB,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eAhC3H,0BA0CI,SAAoB3J,EAAYiM,GAAgB,IAAD,OAC3C,OAAOE,EAAatC,KAAKH,eAAe2D,aAAarN,EAAIiM,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eA3CrH,8BAqDI,SAAwB3J,EAAYiM,GAAgB,IAAD,OAC/C,OAAOE,EAAatC,KAAKH,eAAe4D,iBAAiBtN,EAAIiM,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eAtDzH,0BAgEI,SAAoB3J,EAAYiM,GAAgB,IAAD,OAC3C,OAAOE,EAAatC,KAAKH,eAAe6D,aAAavN,EAAIiM,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eAjErH,yBA0EI,SAAmBsC,GAAgB,IAAD,OAC9B,OAAOE,EAAatC,KAAKH,eAAe/C,YAAYsF,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eA3EhH,wBAuFI,SAAkB9H,EAAiB2L,EAAgBC,EAA4BxB,GAAgB,IAAD,OAC1F,OAAOE,EAAatC,KAAKH,eAAerF,WAAWxC,EAAQ2L,EAAOC,EAAWxB,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eAxFzI,mBAkGI,SAAa+D,EAAyBzB,GAAgB,IAAD,OACjD,OAAOE,EAAatC,KAAKH,eAAepK,MAAMoO,EAAYzB,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eAnGtH,0BA4GI,SAAoBsC,GAAgB,IAAD,OAC/B,OAAOE,EAAatC,KAAKH,eAAeiE,aAAa1B,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eA7GjH,qBAuHI,SAAeiE,EAAuC3B,GAAgB,IAAD,OACjE,OAAOE,EAAatC,KAAKH,eAAerD,QAAQuH,EAAmB3B,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eAxH/H,yBAmII,SAAmB3J,EAAY6N,EAAqC5B,GAAgB,IAAD,OAC/E,OAAOE,EAAatC,KAAKH,eAAe/D,YAAY3F,EAAI6N,EAAkB5B,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eApItI,6BA+II,SAAuB3J,EAAY+N,EAAY9B,GAAgB,IAAD,OAC1D,OAAOE,EAAatC,KAAKH,eAAeoE,gBAAgB9N,EAAI+N,EAAM9B,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,eAhJ9H,oBA0JI,SAAcqE,EAAqC/B,GAAgB,IAAD,OAC9D,OAAOE,EAAatC,KAAKH,eAAelK,OAAOwO,EAAkB/B,GAAS3F,MAAK,SAAC4F,GAAD,OAAaA,EAAQ,EAAKlF,MAAO,EAAK2C,iBA3J7H,GAAgCF,I,gCGhkCzB,SAAS0E,IACZ,OAAOhH,aAAaC,QAAQ,0BAGzB,SAASrB,EAA0B/F,GAClCA,EACAmH,aAAac,QAAQ,yBAA0BjI,GAE/CmH,aAAaiH,WAAW,0BAXhC,qE,mGCaaC,EAAoC,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,aAAcvN,EAAuB,EAAvBA,OAAQwN,EAAe,EAAfA,SAAe,EACzD9P,mBAAmC,MADsB,mBAC9E+P,EAD8E,KACtEC,EADsE,OAE/DhQ,mBAA0C,MAFqB,mBAE9EiQ,EAF8E,KAEzEC,EAFyE,OAGnDlQ,mBAAS,IAH0C,mBAG9EmQ,EAH8E,KAGnEC,EAHmE,OAIjDpQ,mBAAS,WAJwC,mBAI9EqQ,EAJ8E,KAIlEC,EAJkE,OAKnDtQ,oBAAS,GAL0C,mBAK9EuQ,EAL8E,KAKnEC,EALmE,OAM3DxQ,mBAAS,GANkD,mBAM9EyQ,EAN8E,KAMvEC,EANuE,OAO3D1Q,mBAAS,GAPkD,mBAO9E2Q,EAP8E,KAOvEC,EAPuE,KASrFjO,qBAAU,WACN,IAAMkO,EAAIhO,SAASC,eAAe,UAC9B+N,IACAb,EAAUa,GACVX,EAAOW,EAAEC,WAAW,UAEzB,CAACf,IAEJpN,qBAAU,WACN,GAAIsN,GAAOF,EAEP,GAAIF,EAAc,CACd,IAAMjN,EAAM,IAAImO,MAChBnO,EAAIH,IAAMoN,EACVjN,EAAIoO,OAAS,WACTf,EAAIgB,UAAUrO,EAAK,EAAG,SAG1BqN,EAAIiB,UAAY,UAChBjB,EAAIkB,SAAS,EAAG,EAAGpB,EAAO7M,MAAO6M,EAAOqB,UAGjD,CAACnB,EAAKF,EAAQF,IAEjB,IAAMwB,EAAc,SAAC1P,GACjB,IAAKoO,EACD,MAAMtE,MAAM,aAEhB,IAAM6F,EAAOvB,EAAOwB,wBACdC,EAASzB,EAAO7M,MAAQoO,EAAKpO,MAC7BuO,EAAS1B,EAAOqB,OAASE,EAAKF,OACpC,MAAO,CACHM,GAAI/P,EAAEgQ,QAAUL,EAAKM,MAAQJ,EAC7BK,GAAIlQ,EAAEmQ,QAAUR,EAAKS,KAAON,IAyD9BO,EAAe,WACjBlC,KAGJ,OACI,eAAC,IAAD,CAAO1L,MAAM,EAAMC,OAAQ2N,EAAc1N,KAAK,KAA9C,UACI,cAAC,IAAMC,OAAP,CAAcC,aAAW,EAAzB,SACI,cAAC,IAAMC,MAAP,6BAEJ,eAAC,IAAMC,KAAP,WACI,wBACI1B,MAAO,CAAEE,MAAO,QAChB3B,GAAG,SAAS2B,MAAM,MAAMkO,OAAO,MAAMa,YAjE7B,SAACtQ,GACrB,GAAKoO,EAAL,CAGAS,GAAa,GACb,IAAM0B,EAAWb,EAAY1P,GAC7B+O,EAASwB,EAASR,GAClBd,EAASsB,EAASL,KA0D6DM,YAvD3D,SAACxQ,GACrB,GAAK4O,GAAcN,GAAQF,EAA3B,CAMA,IAAMmC,EAAWb,EAAY1P,GACvB+P,EAAIQ,EAASR,EACbG,EAAIK,EAASL,EAEnB5B,EAAImC,YACJnC,EAAIoC,OAAO5B,EAAOE,GAClBV,EAAIqC,OAAOZ,EAAGG,GACd5B,EAAIsC,YAAclC,EAClBJ,EAAIuC,UAAYrC,EAEhBF,EAAIwC,QAAU,QACdxC,EAAIyC,SAEJhC,EAASgB,GACTd,EAASiB,KAkCoGc,UA/B3F,SAAChR,GACnB6O,GAAa,MA+BL,sBAAKpP,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,aAAf,UACI,uBAAOC,QAAQ,YAAf,wBACA,uBAAOC,KAAK,QAAQF,UAAU,eAAeG,GAAG,YAAYqR,IAAI,IAAI5M,IAAI,MAAMvE,MAAO0O,EAAWzO,SAhC1F,SAACC,GAC3ByO,EAAayC,WAAWlR,EAAEC,OAAOH,gBAmCrB,qBAAKL,UAAU,WAAf,SACI,sBAAKA,UAAU,aAAf,UACI,uBAAOC,QAAQ,aAAf,yBACA,uBAAOC,KAAK,QAAQF,UAAU,eAAeG,GAAG,aAAaE,MAAO4O,EAAY3O,SAnCzE,SAACC,GAC5B2O,EAAc3O,EAAEC,OAAOH,qBAuCnB,eAAC,IAAMqR,OAAP,WACI,wBAAQ1R,UAAU,kBAAkBS,QArC7B,WACf,GAAIkO,GAAUE,EAAK,CACf,IAAMhP,EAAO8O,EAAOgD,UAAU,aAC9BzQ,EAAOrB,KAkCH,kBACA,wBAAQG,UAAU,oBAAoBS,QAASmQ,EAA/C,4B,gCC/IhB,8CAIazO,EAAyB,SAACC,GACnC,OAAQA,GACJ,KAAKqH,IAAgBmI,QACjB,MAAO,yBACX,KAAKnI,IAAgBoI,WACjB,MAAO,qBACX,KAAKpI,IAAgBqI,UACjB,MAAO,eACX,KAAKrI,IAAgBzD,MACjB,MAAO,cACX,QACI,MAAO,M,uLCHN2C,EAAoC,SAAChK,GAAW,IAAD,EAClDkM,EAAekH,IAAG5J,MAAMzF,OAAO6F,SAASwC,OAAOiH,UAAU,IAEzDpO,EAAUC,cAHwC,EAI9BjF,mBAA2B,CACjD4E,QAAS,GACTtB,MAAO,GACPK,WAAY,IACZ0P,cAAe,GACfxP,cAAc,IATsC,mBAIjDyP,EAJiD,KAI1CC,EAJ0C,OAWhBvT,mBAAwB,MAXR,mBAWjDwT,EAXiD,KAWnCC,EAXmC,OAY9BzT,mBAAS,GAZqB,mBAYjD0T,EAZiD,KAY1CC,EAZ0C,KAclDC,EAAQ,uCAAG,WAAOjS,GAAP,eAAAjB,EAAA,sDACbiB,EAAEG,iBACOuE,EAAI,EAFA,YAEGA,EAAIqN,GAFP,gCAGH3T,EAAMgF,IAAI6I,YAAY0F,GAHnB,OAEcjN,IAFd,sBAObrB,EAAQO,KAAK,WAPA,2CAAH,sDAoBRsO,EAAe,uCAAG,WAAOlS,GAAP,eAAAjB,EAAA,yDACdoT,EAAOnS,EAAEC,OAAOmS,OAASpS,EAAEC,OAAOmS,MAAM,GAD1B,iDAKpBC,IAAUF,GAAM,SAAClR,GACb,GAAMA,aAAeqR,kBAArB,CAIA,IAEMC,EAFStR,EACQmQ,UAAU,cACVoB,MAAM,KAAK,GAClCZ,EAAS,2BACFD,GADC,IAEJD,cAAea,QAEpB,CACCE,SAAU,IACVC,UAAW,IACXC,MAAM,EACNvE,QAAQ,IArBQ,2CAAH,sDAyBfwE,EAAU,uCAAG,WAAOC,GAAP,qBAAA9T,EAAA,sEACKX,EAAMgF,IAAI2J,SAAS8F,GADxB,cACTpS,EADS,gBAGIrC,EAAMgF,IAAI6J,aAAaxM,EAAMnB,KAAKM,GAAI,CACrDkT,aAAc,gBAJH,OAGT5O,EAHS,OAMT6O,EAAkBC,EAAOC,KAAK/O,EAAK5E,KAAM,UAEzC4T,EAAkBH,EAAgB7H,SAAS,UACjD0G,EAAS,2BACFD,GADC,IAEJhQ,MAAOlB,EAAMnB,KAAKqC,MAClBsB,QAASxC,EAAMnB,KAAK2D,QACpBjB,WAAYvB,EAAMnB,KAAK0C,WACvBmR,OAAQN,EACRnB,cAAewB,EACfhR,eAAgBzB,EAAMnB,KAAK4C,gBAhBhB,2CAAH,sDAwDhB,OANAlB,qBAAU,WACFsJ,EAAa6I,QACbP,EAAWtI,EAAa6I,UAE7B,CAAC7I,EAAa6I,SAGb,qCACI,qBAAK1T,UAAU,YAAf,SAEI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,wDAKZ,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,eAGvB,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,iCAAf,SACI,uBAAMwS,SAAUA,EAAhB,UACI,sBAAKxS,UAAU,aAAf,UACI,4CACA,uBACIA,UAAU,eACVE,KAAK,OACLG,MAAK,UAAE6R,EAAM1O,eAAR,aAAE,EAAeC,KAAK,KAC3BnD,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAa1O,QAASjD,EAAEC,OAAOH,MAAM0S,MAAM,SACpE3S,YAAY,sCAEpB,sBAAKJ,UAAU,aAAf,UACI,0CACA,uBACIA,UAAU,eACVE,KAAK,OACLG,MAAO6R,EAAMhQ,MACb5B,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAahQ,MAAO3B,EAAEC,OAAOH,UACtDD,YAAY,aAEpB,sBAAKJ,UAAU,aAAf,UACI,+CACA,uBAAOwR,IAAK,EAAG5M,IAAK,IAAM5E,UAAU,eAAeE,KAAK,SAASG,MAAO6R,EAAM3P,WAAYjC,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAa3P,WAAYoR,SAASpT,EAAEC,OAAOH,gBAGlK,sBAAKL,UAAU,aAAf,UACI,0CACA,uBAAOA,UAAU,eAAeE,KAAK,SAAS0E,IAAK,GAAI4M,IAAK,EAAGnR,MAAOiS,EAAOhS,SAAU,SAACC,GAAD,OAAOgS,EAASoB,SAASpT,EAAEC,OAAOH,cAG7H,sBAAKL,UAAU,aAAf,UACI,uBAAO4B,MAAO,CAACY,YAAa,QAA5B,0BACA,qBAAKxC,UAAU,aAAf,SACI,uBAAOA,UAAU,mBAAmBE,KAAK,WAAW0T,QAAS1B,EAAMzP,aAAcnC,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAazP,aAAclC,EAAEC,OAAOoT,mBAKrJ1B,EAAMD,eAAiB,sBAAKjS,UAAU,aAAf,UACpB,+CACA,qBAAKqB,IAAG,iCAA4B6Q,EAAMD,eAAiBrQ,MAAO,CAAEoR,SAAU,aAGlF,sBAAKhT,UAAU,aAAf,UACI,wBACIG,GAAG,oBACHH,UAAS,kCACT4B,MAAO,CAAEgB,UAAW,MAAOJ,YAAa,OAH5C,UAKK0P,EAAMD,cAAgB,gBAAkB,eACzC,uBACI9R,GAAG,YACHD,KAAK,OACL0B,MAAO,CAAEoF,QAAS,QAClB1G,SAAU,SAAAC,GAAC,OAAIkS,EAAgBlS,SAGvC,wBAAQL,KAAK,SAASF,UAAU,yBAAyBS,QA9G7D,WAChB,IAAIe,EAAM0Q,EAAMD,cAChB,IAAKzQ,EAAK,CAGN,IAAMmN,EAASlN,SAASoS,cAAc,UACtClF,EAAO7M,MAAQ,IACf6M,EAAOqB,OAAS,IAChB,IAAMnB,EAAMF,EAAOe,WAAW,MAC1Bb,IACAA,EAAIiB,UAAY,QAChBjB,EAAIkB,SAAS,EAAG,EAAG,IAAK,KACxBvO,EAAMmN,EAAOgD,UAAU,cAAcoB,MAAM,KAAK,IAGpDvR,GACA6Q,EAAgB,0BAAD,OAA2B7Q,KA8F1B,2BAGJ,sBAAKxB,UAAU,aAAf,UAEI,wBAAQS,QA1Kf,WAGTmD,EAAQkQ,OAAS,EACjBlQ,EAAQmQ,SAERnQ,EAAQO,KAAK,MAoK8BjE,KAAK,SAASF,UAAU,oBAAnD,oBAFJ,OAII,wBAAQE,KAAK,SAASF,UAAU,kBAAhC,8BAMfoS,GACG,cAAC,IAAD,CACI3D,aAAY,UAAK2D,GACjB1D,SAAU,kBAAM2D,EAAgB,OAChCnR,OA3GM,SAAC8S,GAEnB,IAAMlB,EAASkB,EAASjB,MAAM,KAAK,GACnCZ,EAAS,2BACFD,GADC,IAEJD,cAAea,KAEnBT,EAAgB,e,wMCzGXzJ,EAAoD,SAAC,GAAa,IAAD,EAAVjF,EAAU,EAAVA,IAAU,EAEhD/E,mBAAuB,MAFyB,mBAEnEoC,EAFmE,KAE5DiT,EAF4D,OAGhDrV,mBAA2B,CACjD4E,QAAS,GACTtB,MAAO,GACPK,WAAY,IACZ0P,cAAe,GACfxP,cAAc,IARwD,mBAGnEyP,EAHmE,KAG5DC,EAH4D,OAU9BvT,mBAAwB0P,eAVM,mBAUnE4F,EAVmE,KAUnDC,EAVmD,OAWlCvV,mBAAwB,MAXU,mBAWnEwT,EAXmE,KAWrDC,EAXqD,KAapE+B,EAAa,uCAAG,WAAOjU,GAAP,mBAAAb,EAAA,+EAEKqE,EAAI6J,aAAarN,EAAI,CACpCkT,aAAc,gBAHJ,OAER5O,EAFQ,OAKR6O,EAAkBC,EAAOC,KAAK/O,EAAK5E,KAAM,UAEzC4T,EAAkBH,EAAgB7H,SAAS,UACjD0G,GAAS,SAAAD,GAAK,kCACPA,GADO,IAEVD,cAAewB,OAVL,gDAad3T,QAAQC,MAAR,MAbc,yDAAH,sDAiBbsU,EAAU,uCAAG,4BAAA/U,EAAA,yDACV4U,EADU,0EAKQvQ,EAAI2J,SAAS4G,GALrB,OAKLzP,EALK,OAMXwP,GAAS,SAAAjT,GACL,OAAIyD,EAAK5E,MAEAmB,GAASA,EAAMM,aAAemD,EAAK5E,KAAKyB,WAY1CN,GAXCoT,EAAcF,GACd/B,GAAS,SAAAD,GAAK,kCACPA,GADO,IAEV1O,QAASiB,EAAK5E,KAAK2D,QACnBtB,MAAOuC,EAAK5E,KAAKqC,MACjBK,WAAYkC,EAAK5E,KAAK0C,WACtBE,aAAcgC,EAAK5E,KAAK4C,kBAErBgC,EAAK5E,SAlBb,gDAwBXC,QAAQC,MAAR,MAEAoU,EAAkB,MAElBjO,YAA0B,MA5Bf,yDAAH,qDAgCVuM,EAAe,uCAAG,WAAOlS,GAAP,eAAAjB,EAAA,yDACdoT,EAAOnS,EAAEC,OAAOmS,OAASpS,EAAEC,OAAOmS,MAAM,GAD1B,iDAKpBC,IAAUF,GAAM,SAAClR,GACb,GAAMA,aAAeqR,kBAArB,CAIA,IAEMC,EAFStR,EACQmQ,UAAU,cACVoB,MAAM,KAAK,GAClCZ,EAAS,2BACFD,GADC,IAEJD,cAAea,QAEpB,CACCE,SAAU,IACVC,UAAW,IACXC,MAAM,EACNvE,QAAQ,IArBQ,2CAAH,sDAyBf2F,EAAM,uCAAG,4BAAAhV,EAAA,sEACQqE,EAAI6I,YAAJ,2BACZ0F,GADY,IAEfwB,OAAQQ,QAAkB7M,KAHnB,QACL5C,EADK,QAKF5E,OACLqG,YAA0BzB,EAAK5E,KAAKM,IACpCgU,EAAkB1P,EAAK5E,KAAKM,IAC5B8T,EAASxP,EAAK5E,OARP,2CAAH,qDAyDZ0B,qBAAU,WACN8S,IACA,IAAME,EAAQ9O,YAAY4O,EAAY,KACtC,OAAO,kBAAM3O,cAAc6O,MAC5B,CAACL,IAEJ,IAAMM,EAAcxT,IAA2B,YAAjBA,EAAMoB,QAAwC,cAAhBpB,EAAMoB,UAA4B,EAE9F,OACI,sBAAKpC,UAAU,YAAf,UACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,0DAGR,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,eAGvB,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,iCAAf,SACI,uBAAMwS,SAAU,SAAAjS,GAAC,OAAIA,EAAEG,kBAAvB,UACI,sBAAKV,UAAU,aAAf,UACI,4CACA,uBACIyU,SAAUD,EACVxU,UAAU,eACVE,KAAK,OACLG,MAAK,UAAE6R,EAAM1O,eAAR,aAAE,EAAeC,KAAK,KAC3BnD,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAa1O,QAASjD,EAAEC,OAAOH,MAAM0S,MAAM,SACpE3S,YAAY,sCAEpB,sBAAKJ,UAAU,aAAf,UACI,0CACA,uBACIyU,SAAUD,EACVxU,UAAU,eACVE,KAAK,OACLG,MAAO6R,EAAMhQ,MACb5B,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAahQ,MAAO3B,EAAEC,OAAOH,UACtDD,YAAY,aAEpB,sBAAKJ,UAAU,aAAf,UACI,+CACA,uBAAOyU,SAAUD,EAAYhD,IAAK,EAAG5M,IAAK,IAAM5E,UAAU,eAAeE,KAAK,SAASG,MAAO6R,EAAM3P,WAAYjC,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAa3P,WAAYoR,SAASpT,EAAEC,OAAOH,gBAExL,sBAAKL,UAAU,aAAf,UACI,uBAAO4B,MAAO,CAAEY,YAAa,QAA7B,0BACA,qBAAKxC,UAAU,aAAf,SACI,uBAAOA,UAAU,mBAAmBE,KAAK,WAAW0T,QAAS1B,EAAMzP,aAAcnC,SAAU,SAACC,GAAD,OAAO4R,EAAS,2BAAKD,GAAN,IAAazP,aAAclC,EAAEC,OAAOoT,mBAKrJ1B,EAAMD,eAAiB,sBAAKjS,UAAU,aAAf,UACpB,uCACA,qBAAKqB,IAAG,iCAA4B6Q,EAAMD,eAAiBrQ,MAAO,CAAEoR,SAAU,aAElF,qBAAKhT,UAAU,aAAf,SACKgB,GAA0B,eAAjBA,EAAMoB,QAA2B,qBAAKpC,UAAU,WAAf,SACvC,qBAAKA,UAAU,eAAeqC,KAAK,cAAcT,MAAO,CAAEE,MAAM,GAAD,OAAiC,EAA3Bd,EAAMsB,mBAA4BtB,EAAMuB,WAAa,IAA3D,YAKvE,sBAAKvC,UAAU,aAAf,UACI,wBACIG,GAAG,oBACHH,UAAS,2BACT4B,MAAO,CAAEgB,UAAW,OAHxB,UAMI,mBAAG5C,UAAU,kBAEb,uBACIyU,SAAUD,EACVrU,GAAG,YACHD,KAAK,OACL0B,MAAO,CAAEoF,QAAS,QAClB1G,SAAU,SAAAC,GAAC,OAAIkS,EAAgBlS,SAd3C,OA/GK,WACrB,IAAMmU,EAAa,wBAAQxU,KAAK,SAASF,UAAU,kBAAkBS,QAAS6T,EAA3D,SAEf,mBAAGtU,UAAU,kBAEjB,OAAKgB,GAA0B,cAAjBA,EAAMoB,QAA2C,UAAjBpB,EAAMoB,OAIhD,yBAAQlC,KAAK,SAASF,UAAU,kBAAkByU,UAAU,EAA5D,UACI,mBAAGzU,UAAWmC,YAAuBnB,EAAMoB,UAD/C,UAHOsS,EA0HUC,GAjBL,OAkBI,wBAAQF,SAAUD,EAAYtU,KAAK,SAASF,UAAU,kBAAkBS,QAlH5E,WAChB,IAAIe,EAAM0Q,EAAMD,cAChB,IAAKzQ,EAAK,CAGN,IAAMmN,EAASlN,SAASoS,cAAc,UACtClF,EAAO7M,MAAQ,IACf6M,EAAOqB,OAAS,IAChB,IAAMnB,EAAMF,EAAOe,WAAW,MAC1Bb,IACAA,EAAIiB,UAAY,QAChBjB,EAAIkB,SAAS,EAAG,EAAG,IAAK,KACxBvO,EAAMmN,EAAOgD,UAAU,cAAcoB,MAAM,KAAK,IAGpDvR,GACA6Q,EAAgB,0BAAD,OAA2B7Q,KAkG1B,SAEI,mBAAGxB,UAAU,4BAQhCoS,GACG,cAAC,IAAD,CACI3D,aAAY,UAAK2D,GACjB1D,SAAU,kBAAM2D,EAAgB,OAChCnR,OA5GM,SAAC8S,GAEnB,IAAMlB,EAASkB,EAASjB,MAAM,KAAK,GACnCZ,EAAS,2BACFD,GADC,IAEJD,cAAea,KAEnBT,EAAgB,e","file":"static/js/main.c7650d7f.chunk.js","sourcesContent":["// Login react component with hooks\nimport React, { useState, useEffect, FC } from 'react';\nimport * as axios from \"axios\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\ninterface LoginProps {\n    httpClient: axios.AxiosInstance;\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = props => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n        await props.client.login({\n            email\n        })\n        setEmailSubmitted(true);\n    }\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err)\n            setErr(\"Failed to verify code\");\n        }\n    }\n\n    // bootstrap login form\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">Login</h5>\n                            {/* Display error if one is set */}\n                            {/* Use <p class=\"text-danger\" */}\n                            {err && <p className=\"text-danger\">{err}</p>}\n\n                            {/* If email submitted, show verify code form*/}\n                            {emailSubmitted && <div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"verifyCode\">Verify Code</label>\n                                        <input type=\"text\" className=\"form-control\" id=\"verifyCode\" placeholder=\"Verification Code\" value={code} onChange={(e) => setCode(e.target.value)} />\n                                    </div>\n                                    {/* Cancel verification and go back to email */}\n                                    <button className=\"btn btn-secondary\" onClick={() => setEmailSubmitted(false)}>Cancel</button>&nbsp;\n                                    {/* Verify code */}\n                                    <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}>Verify</button>\n                                </div>\n                            }\n                            {/* Else, show login form */}\n                            {!emailSubmitted && <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n                                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                                </div>\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                    e.preventDefault();\n                                    onLogin();\n                                }}>Login</button>\n                            </div>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","// MainMenu react component with a list of buttons aligned verically\n// Buttons are \"Create a new image\", \"Upload an image\", and \"My Stuff\"\n// use bootstrap classes\n\nimport React, { FC } from 'react';\nimport { Link } from \"react-router-dom\"\n\nexport const MainMenu: FC = () => {\n    return (\n        <div className=\"container\">\n            {/* Header: Welcome to AIBrush! */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Welcome to AIBrush!</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className=\"btn-group-vertical\">\n                        <Link to=\"/create-image\" className=\"btn btn-primary\">\n                            {/* font awesome image icon */}\n                            <i className=\"fas fa-image\" />&nbsp;\n                            Create a new image\n                        </Link>\n                        <Link to=\"/images\" className=\"btn btn-primary\">\n                            {/* my items */}\n                            <i className=\"fas fa-folder-open\" />&nbsp;\n                            My Images\n                        </Link>\n                        <Link to=\"/designer\" className=\"btn btn-primary\">\n                            {/* font awesome pencil icon */}\n                            <i className=\"fas fa-pencil-alt\" />&nbsp;\n                            Interactive Designer\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","// Image Thumnail Component\nimport React, { FC, useEffect } from \"react\";\nimport { Image, ImageStatusEnum } from \"../client/api\";\nimport { imageStatusToIconClass } from \"../lib/iconhelper\";\n\ninterface ImageThumbnailProps {\n    apiUrl: string;\n    image: Image;\n    onClick: (image: Image) => void;\n    onDelete?: (image: Image) => void;\n    onSave?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n    onDesign?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<ImageThumbnailProps> = ({ apiUrl, image, onClick, onDelete, onSave, onFork, onDesign }) => {\n\n    const src = `${apiUrl}/images/${image.id}/thumbnail.jpg?updated_at=${image.updated_at}`;\n\n    useEffect(() => {\n        const img = document.getElementById(`image-${image.id}`) as HTMLImageElement;\n        img.onerror = () => {\n            img.src = \"/images/default.jpg\";\n        }\n    })\n\n    return (\n        <div className=\"card\" style={{ padding: \"10px\", width: \"200px\", margin: \"10px\" }}>\n            <img\n                style={{ cursor: \"pointer\" }}\n                id={`image-${image.id}`}\n                className=\"card-img-top\"\n                src={src}\n                alt={image.label} onClick={() => onClick(image)} />\n            <div className=\"card-body\">\n                <div>\n                    <h5 className=\"card-title\">\n                        {image.label}\n                    </h5>\n                    <p className=\"card-text\">\n                        {/* icon for image status */}\n                        <i className={imageStatusToIconClass(image.status as ImageStatusEnum)}></i>&nbsp;\n                        {image.status}\n                    </p>\n                    {/* if status is \"processing\" then show bootstrap progress bar for image.current_iterations / image.iterations */}\n                    {image.status === \"processing\" && <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: `${(image.current_iterations * 1.0) / image.iterations * 100}%` }}>\n                        </div>\n                    </div>}\n                </div>\n\n                <hr />\n                {onSave && image.status === \"completed\" && <button className=\"btn btn-primary btn-sm\" onClick={() => onSave(image)} style={{marginRight: \"5px\"}}>\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>\n                </button>}\n                {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => onDelete && onDelete(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-trash-alt\"></i>\n                </button>}\n                {onFork && image.status === \"saved\" && <button className=\"btn btn-secondary btn-sm\" onClick={() => onFork && onFork(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-code-branch\"></i>\n                </button>}\n                {/*  interactive designer */}\n                {onDesign && <button className=\"btn btn-secondary btn-sm\" onClick={() => onDesign && onDesign(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-pencil-alt\"></i>\n                </button>}\n                {(image.status === \"completed\" || image.status === \"saved\") && image.enable_video && <button className=\"btn btn-secondary btn-sm\" onClick={() => window.open(`${apiUrl}/images/${image.id}/video.mp4`)} style={{marginRight: \"5px\", marginTop: \"5px\"}}>\n                    <i className=\"fas fa-video\"></i>\n                </button>}\n            </div>\n        </div>\n    );\n}","import React, {FC, useEffect} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface ImagePopupProps {\n    apiUrl: string;\n    image: Image;\n    onClose: () => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({apiUrl, image, onClose}) => {\n\n    const src = `${apiUrl}/images/${image.id}/image.jpg?updated_at=${image.updated_at}`;\n\n    useEffect(() => {\n        const img = document.getElementById(`image-popup-${image.id}`) as HTMLImageElement;\n        img.onerror = () => {\n            img.src = \"/images/default.jpg\"\n        }\n    })\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>{image.label}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img style={{width: \"100%\"}} id={`image-popup-${image.id}`} src={src} alt={image.label} />\n                {/* List these fields: status, iterations, phrases */}\n                <div>\n                    <p>Status: {image.status}</p>\n                    <p>Iterations: {image.iterations}</p>\n                    <p>Current iterations: {image.current_iterations}</p>\n                    <p>Score: {image.score}</p>\n                    <p>Phrases: {image.phrases.join(\", \")}</p>\n                    {/* enable_video */}\n                    <p>Enable Video: {image.enable_video ? \"Yes\" : \"No\"}</p>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n\n}","// React page to show all images\r\n// use bootstrap\r\nimport React, { FC, useState, useEffect } from 'react';\r\nimport moment from \"moment\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\r\nimport { AIBrushApi, Image, UpdateImageInputStatusEnum } from \"../client/api\";\r\nimport { ImagePopup } from \"../components/ImagePopup\";\r\nimport { getDesignerCurrentImageId, setDesignerCurrentImageId } from \"../lib/designer\";\r\n\r\n\r\ninterface Props {\r\n    api: AIBrushApi;\r\n    apiUrl: string;\r\n}\r\n\r\nexport const ImagesPage: FC<Props> = ({ api, apiUrl }) => {\r\n    const history = useHistory();\r\n    const [images, setImages] = useState<Array<Image>>([]);\r\n    const [err, setErr] = useState<string | null>(null);\r\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\r\n\r\n    const onForkImage = async (image: Image) => {\r\n        // navigate to /create-image with ?parent=image.id\r\n        history.push(`/create-image?parent=${image.id}`)\r\n    }\r\n\r\n    const loadImages = async () => {\r\n        // clear error\r\n        setErr(null);\r\n        try {\r\n            const cursor = moment().add(1, \"minutes\").valueOf()\r\n            const resp = await api.listImages(cursor, 100, \"desc\")\r\n            if (resp.data.images) {\r\n                setImages(resp.data.images)\r\n            }\r\n            return 0\r\n        } catch (err) {\r\n            setErr(\"Could not load images\")\r\n            console.error(err)\r\n        }\r\n    };\r\n\r\n    const pollImages = async (images: Array<Image>) => {\r\n        // clear error\r\n        setErr(null);\r\n        // set cursor to max updated_at from images\r\n        const cursor = images.reduce((max, image) => {\r\n            return Math.max(max, image.updated_at)\r\n        }, 0)\r\n\r\n        try {\r\n            const resp = await api.listImages(cursor + 1, 100, \"asc\")\r\n            if (resp.data.images) {\r\n                // split resp.data.images into \"new\" and \"updated\" lists\r\n                // image is \"new\" if it's not in images\r\n                const newImages = resp.data.images.filter(image => {\r\n                    return images.findIndex(i => i.id === image.id) < 0\r\n                })\r\n                const updatedImages = resp.data.images.filter(image => {\r\n                    return images.findIndex(i => i.id === image.id) >= 0\r\n                })\r\n                setImages([\r\n                    ...images.map(image => {\r\n                        const updatedImage = updatedImages.find(i => i.id === image.id)\r\n                        if (updatedImage) {\r\n                            return updatedImage\r\n                        }\r\n                        return image\r\n                    }),\r\n                    ...newImages\r\n                ].sort((a, b) => {\r\n                    return b.updated_at - a.updated_at\r\n                }))\r\n            }\r\n            return images;\r\n        } catch (err) {\r\n            setErr(\"Could not load images\")\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!api) {\r\n            return\r\n        }\r\n        loadImages()\r\n    }, [api])\r\n\r\n    useEffect(() => {\r\n        if (!api) {\r\n            return\r\n        }\r\n\r\n        const timerHandle = setInterval(() => {\r\n            pollImages(images)\r\n        }, 5000)\r\n        return () => {\r\n            clearInterval(timerHandle)\r\n        }\r\n\r\n    }, [api, images])\r\n\r\n    const onDeleteImage = async (image: Image) => {\r\n        // clear error\r\n        setErr(\"\")\r\n        // attempt to delete image\r\n        try {\r\n            await api.deleteImage(image.id as string)\r\n            // remove image from list\r\n            setImages(images.filter(i => i.id !== image.id));\r\n        } catch (err) {\r\n            console.error(err)\r\n            setErr(\"Could not delete image\")\r\n        }\r\n    }\r\n\r\n    const onSaveImage = async (image: Image) => {\r\n        // patch image with status=saved\r\n        try {\r\n            const resp = await api.updateImage(image.id as string, { status: UpdateImageInputStatusEnum.Saved })\r\n            // update image in list\r\n            setImages(images.map(i => i.id === image.id ? resp.data : i))\r\n        } catch (err) {\r\n            console.error(err)\r\n            setErr(\"Could not save image\")\r\n        }\r\n    }\r\n\r\n    const onDesignImage = async (image: Image) => {\r\n        setDesignerCurrentImageId(image.id)\r\n        history.push(\"/designer\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <h1>Images</h1>\r\n                </div>\r\n            </div>\r\n            {/* display error message if one is set */}\r\n            {err && <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        {err}\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n            {/* Link to navigate to CreateImage */}\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <Link to=\"/create-image\" className=\"btn btn-primary\">\r\n                        <i className=\"fas fa-plus\"></i>&nbsp;\r\n                        Create Image\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"row\">\r\n                        {images.map(image => (\r\n                            <ImageThumbnail\r\n                                onSave={onSaveImage}\r\n                                onDelete={onDeleteImage}\r\n                                onFork={onForkImage}\r\n                                onClick={setSelectedImage}\r\n                                onDesign={onDesignImage}\r\n                                apiUrl={apiUrl}\r\n                                key={image.id}\r\n                                image={image} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* show ImagePopup if selectedImage is set */}\r\n            {selectedImage && <ImagePopup apiUrl={apiUrl} image={selectedImage as Image} onClose={() => setSelectedImage(null)} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials && credentials.refreshToken]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\r\nimport { AIBrushApi } from \"../client/api\";\r\n\r\ninterface HealthcheckerProps {\r\n    api: AIBrushApi;\r\n}\r\n\r\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\r\n    // automatically check health every 5 seconds\r\n    const [healthCheck, setHealthCheck] = useState(true);\r\n    \r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\r\n        }, 5000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [api]);\r\n\r\n    // only display bootstrap danger alert if healthcheck failed\r\n    // \"service is unavailable\"\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\r\n            <strong>Service is unavailable</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\"\nimport './App.css';\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult } from \"./client/api\";\nimport { getConfig } from './config';\nimport { Login } from \"./pages/Login\"\nimport { MainMenu } from './pages/MainMenu';\nimport { CreateImage } from \"./pages/CreateImage\"\nimport { ImagesPage } from \"./pages/Images\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from './components/Healthchecker';\nimport { InteractiveDesigner } from \"./pages/InteractiveDesigner\";\n\nconst config = getConfig()\nconst httpClient = axios.default;\nconst client = new AIBrushApi(undefined, localStorage.getItem(\"apiUrl\") || config.apiUrl, httpClient);\n\nfunction updateHttpClient(loginResult: LoginResult) {\n  if (loginResult.accessToken) {\n    httpClient.defaults.headers.common['Authorization'] = `Bearer ${loginResult.accessToken}`;\n  }\n}\n\nfunction App() {\n\n  const [credentials, setCredentials] = useState<LoginResult | null>(null);\n\n  const init = async () => {\n    console.log(\"App.init\")\n    const storedCredentials = localStorage.getItem(\"credentials\");\n    if (storedCredentials) {\n      // attempt to refresh token\n      try {\n        const credentials = JSON.parse(storedCredentials) as LoginResult;\n        const result = await client.refresh({\n          refreshToken: credentials.refreshToken\n        });\n        setCredentials(result.data);\n        // save to storage\n        localStorage.setItem(\"credentials\", JSON.stringify(result.data));\n        updateHttpClient(result.data);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  const onLogin = async (credentials: LoginResult) => {\n    localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n    setCredentials(credentials);\n    updateHttpClient(credentials);\n  };\n\n  const onUpdateAPIUrl = () => {\n    let apiUrl = localStorage.getItem(\"apiUrl\") || config.apiUrl;\n    const resp = prompt(\"Configure backend url\", apiUrl)\n    if (resp) {\n      apiUrl = resp;\n      localStorage.setItem(\"apiUrl\", apiUrl);\n      // reload page\n      window.location.reload();\n    }\n  }\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <TokenRefresher api={client} credentials={credentials as LoginResult} onCredentialsRefreshed={onLogin} />\n      <Healthchecker api={client} />\n      {/* settings button */}\n      <button className=\"btn btn-primary top-button\" onClick={onUpdateAPIUrl}>\n        {/* font awesome settings icon */}\n        <i className=\"fas fa-cog\"></i>&nbsp;\n        Settings\n      </button>\n      <BrowserRouter>\n        {/* if credentials are not set, show Login component */}\n        {!credentials && <Login httpClient={httpClient} client={client} onLogin={onLogin} />}\n        {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n        {credentials && <>\n          <button className=\"btn btn-primary top-button\" onClick={() => setCredentials(null)}>\n            {/* font awesome logout icon */}\n            <i className=\"fas fa-sign-out-alt\"></i>&nbsp;\n            Logout\n          </button>\n          {/* home button */}\n          <Link className=\"btn btn-primary top-button\" to=\"/\">\n            {/* font awesome home icon */}\n            <i className=\"fas fa-home\"></i>&nbsp;\n            Home\n          </Link>\n\n        </>}\n        {/* if credentials are set, show the rest of the app */}\n        {credentials && <Switch>\n          <Route path=\"/\" exact={true}>\n            <MainMenu />\n          </Route>\n          <Route path=\"/create-image\">\n            <CreateImage api={client} apiUrl={config.apiUrl} />\n          </Route>\n          <Route path=\"/images\">\n            <ImagesPage apiUrl={config.apiUrl} api={client} />\n          </Route>\n          {/* /designer route */}\n          <Route path=\"/designer\">\n            <InteractiveDesigner api={client} apiUrl={config.apiUrl} />\n          </Route>\n        </Switch>}\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    if (process.env.REACT_APP_ENV == \"prod\") {\n        return {\n            apiUrl: \"https://aibrush.ngrok.io\"\n        };\n    } else {\n        return {\n            apiUrl: \"http://localhost:3000\"\n        };\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateImageInput\n     */\n    enable_video?: boolean;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    phrases: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    current_iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    status: ImageStatusEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Image\n     */\n    enable_video: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    current_iterations?: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    status?: UpdateImageInputStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, download?: 'thumbnail' | 'image', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (download !== undefined) {\n                localVarQueryParameter['download'] = download;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/images/{id}/image.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/images/{id}/thumbnail.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getVideoData', 'id', id)\n            const localVarPath = `/images/{id}/video.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, limit?: number, direction?: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (direction !== undefined) {\n                localVarQueryParameter['direction'] = direction;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/process-image`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData: async (id: string, body?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateVideoData', 'id', id)\n            const localVarPath = `/images/{id}/video.mp4`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'video/mp4';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, download?: 'thumbnail' | 'image', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, download, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getVideoData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, limit, direction, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processImage(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processImage(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateVideoData(id: string, body?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideoData(id, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, download?: 'thumbnail' | 'image', options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, download, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary video data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getVideoData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getVideoData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {number} [limit] \n         * @param {'asc' | 'desc'} [direction] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, limit, direction, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage(options?: any): AxiosPromise<Image> {\n            return localVarFp.processImage(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the video data\n         * @param {string} id \n         * @param {any} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVideoData(id: string, body?: any, options?: any): AxiosPromise<void> {\n            return localVarFp.updateVideoData(id, body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {'thumbnail' | 'image'} [download] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, download?: 'thumbnail' | 'image', options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, download, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary video data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getVideoData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getVideoData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {number} [limit] \n     * @param {'asc' | 'desc'} [direction] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, limit?: number, direction?: 'asc' | 'desc', options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, limit, direction, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending image and set its status to processing.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processImage(options?: any) {\n        return AIBrushApiFp(this.configuration).processImage(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the video data\n     * @param {string} id \n     * @param {any} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateVideoData(id: string, body?: any, options?: any) {\n        return AIBrushApiFp(this.configuration).updateVideoData(id, body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://aibrush.ngrok.io\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","// export functions to get and set designer current image id\r\n// using local storage\r\n\r\nexport function getDesignerCurrentImageId(): string | null {\r\n    return localStorage.getItem('designerCurrentImageId');\r\n}\r\n\r\nexport function setDesignerCurrentImageId(id: string | null): void {\r\n    if (id) {\r\n        localStorage.setItem('designerCurrentImageId', id);\r\n    } else {\r\n        localStorage.removeItem('designerCurrentImageId');\r\n    }\r\n}\r\n","// react bootstrap large modal with a canvas for image editing.\n// Brush size, brush size preview, color selector, color picker\n// Save and cancel buttons\n\nimport React, { FC, useState, useEffect } from 'react';\nimport { Modal } from \"react-bootstrap\";\n\ninterface ImageEditorProps {\n    encodedImage: string | null;\n    onSave: (image: string) => void;\n    onCancel: () => void;\n}\n\nexport const ImageEditor: FC<ImageEditorProps> = ({ encodedImage, onSave, onCancel }) => {\n    const [canvas, setCanvas] = useState<HTMLCanvasElement | null>(null);\n    const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState('#000000');\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [lastX, setLastX] = useState(0);\n    const [lastY, setLastY] = useState(0);\n\n    useEffect(() => {\n        const c = document.getElementById('canvas') as HTMLCanvasElement;\n        if (c) {\n            setCanvas(c);\n            setCtx(c.getContext('2d'));\n        }\n    }, [canvas]);\n\n    useEffect(() => {\n        if (ctx && canvas) {\n            // if image is not null, draw it on the canvas\n            if (encodedImage) {\n                const img = new Image();\n                img.src = encodedImage;\n                img.onload = () => {\n                    ctx.drawImage(img, 0, 0);\n                }\n            } else {\n                ctx.fillStyle = '#ffffff';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n        }\n    }, [ctx, canvas, encodedImage])\n\n    const getMousePos = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvas) {\n            throw Error(\"No canvas\")\n        }\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        return {\n            x: (e.clientX - rect.left) * scaleX,\n            y: (e.clientY - rect.top) * scaleY\n        }\n    }\n\n    const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvas) {\n            return;\n        }\n        setIsDrawing(true);\n        const mousePos = getMousePos(e);\n        setLastX(mousePos.x);\n        setLastY(mousePos.y);\n    };\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!isDrawing || !ctx || !canvas) {\n            return;\n        }\n\n\n        // get x and y relative to the canvas\n        const mousePos = getMousePos(e);\n        const x = mousePos.x;\n        const y = mousePos.y;\n\n        ctx.beginPath();\n        ctx.moveTo(lastX, lastY);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = brushColor;\n        ctx.lineWidth = brushSize;\n        // line caps\n        ctx.lineCap = 'round';\n        ctx.stroke();\n\n        setLastX(x);\n        setLastY(y);\n    };\n\n    const handleMouseUp = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        setIsDrawing(false);\n    };\n\n    const handleBrushSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setBrushSize(parseFloat(e.target.value));\n    };\n\n    const handleBrushColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setBrushColor(e.target.value);\n    };\n\n    const handleSave = () => {\n        if (canvas && ctx) {\n            const data = canvas.toDataURL('image/png');\n            onSave(data);\n        }\n    };\n\n    const handleCancel = () => {\n        onCancel();\n    };\n\n    return (\n        <Modal show={true} onHide={handleCancel} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Image Editor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <canvas\n                    style={{ width: \"100%\" }}\n                    id=\"canvas\" width=\"512\" height=\"512\" onMouseDown={handleMouseDown} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}></canvas>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushSize\">Brush Size</label>\n                            <input type=\"range\" className=\"form-control\" id=\"brushSize\" min=\"1\" max=\"100\" value={brushSize} onChange={handleBrushSizeChange} />\n                        </div>\n\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushColor\">Brush Color</label>\n                            <input type=\"color\" className=\"form-control\" id=\"brushColor\" value={brushColor} onChange={handleBrushColorChange} />\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-primary\" onClick={handleSave}>Save</button>\n                <button className=\"btn btn-secondary\" onClick={handleCancel}>Cancel</button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import { ImageStatusEnum } from \"../client/api\";\n\n// map from image status to font awesome class\n// possible values: Pending, Processing, Completed, Saved\nexport const imageStatusToIconClass = (status: ImageStatusEnum) => {\n    switch (status) {\n        case ImageStatusEnum.Pending:\n            return \"fas fa-hourglass-start\";\n        case ImageStatusEnum.Processing:\n            return \"fas fa-cog fa-spin\";\n        case ImageStatusEnum.Completed:\n            return \"fas fa-check\";\n        case ImageStatusEnum.Saved:\n            return \"fas fa-save\";\n        default:\n            return \"\";\n    }\n}","import React, { FC, useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\"\nimport { AIBrushApi, CreateImageInput, Image } from \"../client/api\"\nimport loadImage from \"blueimp-load-image\"\nimport qs from \"qs\";\nimport { ImageEditor } from \"../components/ImageEditor\";\n\ninterface CreateImageProps {\n    api: AIBrushApi\n    apiUrl: string;\n}\n\nexport const CreateImage: FC<CreateImageProps> = (props) => {\n    const searchParams = qs.parse(window.location.search.substring(1)) as any\n\n    const history = useHistory()\n    const [input, setInput] = useState<CreateImageInput>({\n        phrases: [],\n        label: \"\",\n        iterations: 100,\n        encoded_image: \"\",\n        enable_video: false,\n    });\n    const [editingImage, setEditingImage] = useState<string | null>(null);\n    const [count, setCount] = useState(1)\n\n    const onSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        for (let i = 0; i < count; i++) {\n            await props.api.createImage(input);\n        }\n\n        // redirect to images page\n        history.push(\"/images\")\n    }\n\n    const onCancel = () => {\n        // on cancel, return to the previous page\n        // check if there is a previous page. if not, redirect to home\n        if (history.length > 1) {\n            history.goBack()\n        } else {\n            history.push(\"/\")\n        }\n    }\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0]\n        if (!file) {\n            return\n        }\n        loadImage(file, (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n            if (!(img instanceof HTMLCanvasElement)) {\n                return\n            }\n            // convert image to base64\n            const canvas = img as HTMLCanvasElement\n            const dataUrl = canvas.toDataURL(\"image/jpeg\")\n            const base64 = dataUrl.split(\",\")[1]\n            setInput({\n                ...input,\n                encoded_image: base64\n            })\n        }, {\n            maxWidth: 512,\n            maxHeight: 512,\n            crop: true,\n            canvas: true,\n        })\n    }\n\n    const loadParent = async (parentId: string) => {\n        const image = await props.api.getImage(parentId)\n        // get encoded image data for parent\n        const resp = await props.api.getImageData(image.data.id, {\n            responseType: \"arraybuffer\"\n        })\n        const binaryImageData = Buffer.from(resp.data, \"binary\");\n        // convert binary to base64\n        const base64ImageData = binaryImageData.toString(\"base64\");\n        setInput({\n            ...input,\n            label: image.data.label,\n            phrases: image.data.phrases,\n            iterations: image.data.iterations,\n            parent: parentId,\n            encoded_image: base64ImageData,\n            enable_video: !!image.data.enable_video,\n        })\n    }\n\n    const onEditImage = () => {\n        let img = input.encoded_image;\n        if (!img) {\n            // blank 512 x 512 image with white background\n            // create a new canvas\n            const canvas = document.createElement(\"canvas\")\n            canvas.width = 512\n            canvas.height = 512\n            const ctx = canvas.getContext(\"2d\")\n            if (ctx) {\n                ctx.fillStyle = \"white\"\n                ctx.fillRect(0, 0, 512, 512)\n                img = canvas.toDataURL(\"image/jpeg\").split(\",\")[1]\n            }\n        }\n        if (img) {\n            setEditingImage(`data:image/jpeg;base64,${img}`)\n        }\n    }\n\n    const onImageEdited = (imageUri: string) => {\n        // extract base64 portion of the image uri\n        const base64 = imageUri.split(\",\")[1]\n        setInput({\n            ...input,\n            encoded_image: base64\n        })\n        setEditingImage(null)\n    }\n\n    useEffect(() => {\n        if (searchParams.parent) {\n            loadParent(searchParams.parent)\n        }\n    }, [searchParams.parent])\n\n    return (\n        <>\n            <div className=\"container\">\n                {/* Header: Create new image */}\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1>Create new image</h1>\n                    </div>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    <form onSubmit={onSubmit}>\n                        <div className=\"form-group\">\n                            <label>Phrases</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.phrases?.join(\"|\")}\n                                onChange={(e) => setInput({ ...input, phrases: e.target.value.split(\"|\") })}\n                                placeholder=\"Separate | phrases | like this\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Label</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.label}\n                                onChange={(e) => setInput({ ...input, label: e.target.value })}\n                                placeholder=\"Label\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Iterations</label>\n                            <input min={1} max={1000} className=\"form-control\" type=\"number\" value={input.iterations} onChange={(e) => setInput({ ...input, iterations: parseInt(e.target.value) })} />\n                        </div>\n                        {/* count */}\n                        <div className=\"form-group\">\n                            <label>Count</label>\n                            <input className=\"form-control\" type=\"number\" max={10} min={1} value={count} onChange={(e) => setCount(parseInt(e.target.value))} />\n                        </div>\n                        {/* boolean enable_video (bootstrap styled checkbox) */}\n                        <div className=\"form-group\">\n                            <label style={{marginRight: \"10px\"}}>Enable video</label>\n                            <div className=\"form-check\">\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.enable_video} onChange={(e) => setInput({ ...input, enable_video: e.target.checked })} />\n                            </div>\n                        </div>\n\n                        {/* If encoded_image (base64 only) is set, show the image using a base64 image url*/}\n                        {input.encoded_image && <div className=\"form-group\">\n                            <h5>Initial Image</h5>\n                            <img src={`data:image/jpeg;base64,${input.encoded_image}`} style={{ maxWidth: \"100%\" }} />\n                        </div>}\n                        {/* If encoded_image is set, display edit button */}\n                        <div className=\"form-group\">\n                            <label\n                                id=\"loadimage-wrapper\"\n                                className={`btn btn-sm btn-primary btn-file`}\n                                style={{ marginTop: \"8px\", marginRight: \"8px\" }}\n                            >\n                                {input.encoded_image ? \"Replace Image\" : \"Upload Image\"}\n                                <input\n                                    id=\"loadimage\"\n                                    type=\"file\"\n                                    style={{ display: \"none\" }}\n                                    onChange={e => onImageSelected(e)}\n                                />\n                            </label>\n                            <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={onEditImage}>Edit Image</button>\n                        </div>\n\n                        <div className=\"form-group\">\n                            {/* Cancel button \"/\" */}\n                            <button onClick={onCancel} type=\"button\" className=\"btn btn-secondary\">Cancel</button>\n                            &nbsp;\n                            <button type=\"submit\" className=\"btn btn-primary\">Create</button>\n                        </div>\n\n                    </form>\n                </div>\n            </div>\n            {editingImage && (\n                <ImageEditor\n                    encodedImage={`${editingImage}`}\n                    onCancel={() => setEditingImage(null)}\n                    onSave={onImageEdited}\n                />\n            )}\n        </>\n    )\n\n\n}","import React, { FC, useState, useEffect } from 'react';\r\nimport loadImage from \"blueimp-load-image\"\r\n\r\nimport { AIBrushApi, Image, CreateImageInput, ImageStatusEnum } from \"../client/api\";\r\nimport { getDesignerCurrentImageId, setDesignerCurrentImageId } from \"../lib/designer\";\r\nimport { imageStatusToIconClass } from '../lib/iconhelper';\r\nimport { ImageEditor } from '../components/ImageEditor';\r\n\r\ninterface InteractiveDesignerProps {\r\n    api: AIBrushApi;\r\n    apiUrl: string;\r\n}\r\n\r\nexport const InteractiveDesigner: FC<InteractiveDesignerProps> = ({ api }) => {\r\n\r\n    const [image, setImage] = useState<Image | null>(null);\r\n    const [input, setInput] = useState<CreateImageInput>({\r\n        phrases: [],\r\n        label: \"\",\r\n        iterations: 100,\r\n        encoded_image: \"\",\r\n        enable_video: false,\r\n    });\r\n    const [currentImageId, setCurrentImageId] = useState<string | null>(getDesignerCurrentImageId());\r\n    const [editingImage, setEditingImage] = useState<string | null>(null);\r\n\r\n    const loadImageData = async (id: string) => {\r\n        try {\r\n            const resp = await api.getImageData(id, {\r\n                responseType: \"arraybuffer\"\r\n            })\r\n            const binaryImageData = Buffer.from(resp.data, \"binary\");\r\n            // convert binary to base64\r\n            const base64ImageData = binaryImageData.toString(\"base64\");\r\n            setInput(input => ({\r\n                ...input,\r\n                encoded_image: base64ImageData,\r\n            }))\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    const fetchImage = async () => {\r\n        if (!currentImageId) {\r\n            return;\r\n        }\r\n        try {\r\n            const resp = await api.getImage(currentImageId);\r\n            setImage(image => {\r\n                if (resp.data) {\r\n                    // TODO: if updated_at has changed, load image data\r\n                    if (!image || image.updated_at !== resp.data.updated_at) {\r\n                        loadImageData(currentImageId);\r\n                        setInput(input => ({\r\n                            ...input,\r\n                            phrases: resp.data.phrases,\r\n                            label: resp.data.label,\r\n                            iterations: resp.data.iterations,\r\n                            enable_video: resp.data.enable_video,\r\n                        }))\r\n                        return resp.data;\r\n                    }\r\n                }\r\n                return image;\r\n            });\r\n        } catch (err) {\r\n            console.error(err)\r\n            // clear current image id\r\n            setCurrentImageId(null);\r\n            // clear image id in local storage\r\n            setDesignerCurrentImageId(null);\r\n        }\r\n    }\r\n\r\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files && e.target.files[0]\r\n        if (!file) {\r\n            return\r\n        }\r\n        loadImage(file, (img: Event | HTMLImageElement | HTMLCanvasElement) => {\r\n            if (!(img instanceof HTMLCanvasElement)) {\r\n                return\r\n            }\r\n            // convert image to base64\r\n            const canvas = img as HTMLCanvasElement\r\n            const dataUrl = canvas.toDataURL(\"image/jpeg\")\r\n            const base64 = dataUrl.split(\",\")[1]\r\n            setInput({\r\n                ...input,\r\n                encoded_image: base64\r\n            })\r\n        }, {\r\n            maxWidth: 512,\r\n            maxHeight: 512,\r\n            crop: true,\r\n            canvas: true,\r\n        })\r\n    }\r\n\r\n    const onPlay = async () => {\r\n        const resp = await api.createImage({\r\n            ...input,\r\n            parent: currentImageId || undefined,\r\n        });\r\n        if (resp.data) {\r\n            setDesignerCurrentImageId(resp.data.id);\r\n            setCurrentImageId(resp.data.id);\r\n            setImage(resp.data);\r\n        }\r\n    }\r\n\r\n    const renderPlayButton = () => {\r\n        const playButton = <button type=\"button\" className=\"btn btn-primary\" onClick={onPlay}>\r\n            {/* Play icon */}\r\n            <i className=\"fas fa-play\" />\r\n        </button>\r\n        if (!image || image.status === \"completed\" || image.status === \"saved\") {\r\n            return playButton;\r\n        }\r\n        return (\r\n            <button type=\"button\" className=\"btn btn-primary\" disabled={true}>\r\n                <i className={imageStatusToIconClass(image.status as ImageStatusEnum)}></i>&nbsp;\r\n            </button>\r\n        )\r\n    }\r\n\r\n    const onEditImage = () => {\r\n        let img = input.encoded_image;\r\n        if (!img) {\r\n            // blank 512 x 512 image with white background\r\n            // create a new canvas\r\n            const canvas = document.createElement(\"canvas\")\r\n            canvas.width = 512\r\n            canvas.height = 512\r\n            const ctx = canvas.getContext(\"2d\")\r\n            if (ctx) {\r\n                ctx.fillStyle = \"white\"\r\n                ctx.fillRect(0, 0, 512, 512)\r\n                img = canvas.toDataURL(\"image/jpeg\").split(\",\")[1]\r\n            }\r\n        }\r\n        if (img) {\r\n            setEditingImage(`data:image/jpeg;base64,${img}`)\r\n        }\r\n    }\r\n\r\n    const onImageEdited = (imageUri: string) => {\r\n        // extract base64 portion of the image uri\r\n        const base64 = imageUri.split(\",\")[1]\r\n        setInput({\r\n            ...input,\r\n            encoded_image: base64\r\n        })\r\n        setEditingImage(null)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchImage();\r\n        const timer = setInterval(fetchImage, 2000);\r\n        return () => clearInterval(timer);\r\n    }, [currentImageId])\r\n\r\n    const inprogress = (image && (image.status === \"pending\" || image.status == \"processing\")) || false;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <h1>Interactive Designer</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <div className=\"spacer\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\r\n                    <form onSubmit={e => e.preventDefault()}>\r\n                        <div className=\"form-group\">\r\n                            <label>Phrases</label>\r\n                            <input\r\n                                disabled={inprogress}\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                value={input.phrases?.join(\"|\")}\r\n                                onChange={(e) => setInput({ ...input, phrases: e.target.value.split(\"|\") })}\r\n                                placeholder=\"Separate | phrases | like this\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Label</label>\r\n                            <input\r\n                                disabled={inprogress}\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                value={input.label}\r\n                                onChange={(e) => setInput({ ...input, label: e.target.value })}\r\n                                placeholder=\"Label\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Iterations</label>\r\n                            <input disabled={inprogress} min={1} max={1000} className=\"form-control\" type=\"number\" value={input.iterations} onChange={(e) => setInput({ ...input, iterations: parseInt(e.target.value) })} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label style={{ marginRight: \"10px\" }}>Enable video</label>\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={input.enable_video} onChange={(e) => setInput({ ...input, enable_video: e.target.checked })} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* If encoded_image (base64 only) is set, show the image using a base64 image url*/}\r\n                        {input.encoded_image && <div className=\"form-group\">\r\n                            <h5>Image</h5>\r\n                            <img src={`data:image/jpeg;base64,${input.encoded_image}`} style={{ maxWidth: \"100%\" }} />\r\n                        </div>}\r\n                        <div className=\"form-group\">\r\n                            {image && image.status === \"processing\" && <div className=\"progress\">\r\n                                <div className=\"progress-bar\" role=\"progressbar\" style={{ width: `${(image.current_iterations * 1.0) / image.iterations * 100}%` }}>\r\n                                </div>\r\n                            </div>}\r\n                        </div>\r\n                        {/* If encoded_image is set, display edit button */}\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                id=\"loadimage-wrapper\"\r\n                                className={`btn btn-primary btn-file`}\r\n                                style={{ marginTop: \"8px\" }}\r\n                            >\r\n                                {/* Browse font-awesome icon */}\r\n                                <i className=\"fas fa-upload\" />\r\n\r\n                                <input\r\n                                    disabled={inprogress}\r\n                                    id=\"loadimage\"\r\n                                    type=\"file\"\r\n                                    style={{ display: \"none\" }}\r\n                                    onChange={e => onImageSelected(e)}\r\n                                />\r\n                            </label>&nbsp;\r\n                            {renderPlayButton()}&nbsp;\r\n                            <button disabled={inprogress} type=\"button\" className=\"btn btn-primary\" onClick={onEditImage}>\r\n                                {/* Edit icon */}\r\n                                <i className=\"fas fa-edit\" />\r\n                            </button>\r\n                        </div>\r\n\r\n\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            {editingImage && (\r\n                <ImageEditor\r\n                    encodedImage={`${editingImage}`}\r\n                    onCancel={() => setEditingImage(null)}\r\n                    onSave={onImageEdited}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}
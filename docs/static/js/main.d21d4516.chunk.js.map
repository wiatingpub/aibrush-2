{"version":3,"sources":["client/api.ts","client/base.ts","client/common.ts","pages/Login.tsx","pages/MainMenu.tsx","lib/iconhelper.ts","components/ImageThumbnail.tsx","components/ImagePopup.tsx","pages/WorkspacePage.tsx","pages/Images.tsx","components/TokenRefresher.tsx","components/Healthchecker.tsx","App.tsx","config.ts","reportWebVitals.ts","index.tsx","lib/workspace.ts","pages/CreateImage.tsx","components/ImageEditor.tsx"],"names":["HealthcheckStatusEnum","ImageStatusEnum","UpdateImageInputStatusEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","name","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setSearchParams","url","searchParams","URLSearchParams","search","objects","object","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AIBrushApiFp","localVarAxiosParamCreator","createImage","createImageInput","a","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","data","deleteImage","id","localVarPath","encodeURIComponent","String","getImage","download","getImageData","getThumbnailData","healthcheck","listImages","cursor","login","loginInput","processImage","refresh","refreshLoginInput","updateImage","updateImageInput","verify","verifyLoginInput","AIBrushApiAxiosParamCreator","localVarAxiosArgs","AIBrushApi","then","Login","props","useState","email","setEmail","emailSubmitted","setEmailSubmitted","code","setCode","err","setErr","onLogin","match","client","onVerify","result","console","error","className","htmlFor","type","placeholder","onChange","e","target","onClick","preventDefault","aria-describedby","MainMenu","to","imageStatusToIconClass","status","Pending","Processing","Completed","Saved","ImageThumbnail","apiUrl","image","onDelete","onSave","onFork","src","updated_at","useEffect","img","document","getElementById","onerror","style","padding","width","margin","alt","label","role","current_iterations","iterations","marginRight","ImagePopup","onClose","Modal","show","onHide","size","Header","closeButton","Title","Body","score","phrases","join","WorkspacePage","api","images","workspace","setWorkspace","selectedImage","setSelectedImage","history","useHistory","showStatuses","setShowStatuses","onChangeShowStatuses","onSaveImage","resp","updatedImage","updatedWorkspace","map","i","saveWorkspace","loadWorkspace","lock","timerHandle","setInterval","push","clearInterval","length","onDeleteImage","filter","onForkImage","onClickImage","checked","ImagesPage","setImages","loading","setLoading","setError","catch","message","TokenRefresher","onCredentialsRefreshed","credentials","interval","refreshToken","loginResult","Healthchecker","healthCheck","setHealthCheck","display","config","httpClient","localStorage","getItem","updateHttpClient","accessToken","defaults","common","App","setCredentials","init","log","storedCredentials","parse","setItem","prompt","window","location","reload","path","exact","CreateImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","qs","substring","encoded_image","input","setInput","editingImage","setEditingImage","count","setCount","onSubmit","onImageSelected","file","files","loadImage","HTMLCanvasElement","base64","toDataURL","split","maxWidth","maxHeight","crop","canvas","loadParent","parentId","responseType","binaryImageData","Buffer","from","base64ImageData","parent","parseInt","max","min","marginTop","createElement","height","ctx","getContext","fillStyle","fillRect","goBack","encodedImage","onCancel","imageUri","ImageEditor","setCanvas","setCtx","brushSize","setBrushSize","brushColor","setBrushColor","isDrawing","setIsDrawing","lastX","setLastX","lastY","setLastY","c","Image","onload","drawImage","getMousePos","rect","getBoundingClientRect","scaleX","scaleY","x","clientX","left","y","clientY","top","handleCancel","onMouseDown","mousePos","onMouseMove","beginPath","moveTo","lineTo","strokeStyle","lineWidth","lineCap","stroke","onMouseUp","parseFloat","Footer"],"mappings":"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","file":"static/js/main.d21d4516.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface CreateImageInput\n */\nexport interface CreateImageInput {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateImageInput\n     */\n    iterations?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    parent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateImageInput\n     */\n    encoded_image?: string;\n}\n/**\n * \n * @export\n * @interface Healthcheck\n */\nexport interface Healthcheck {\n    /**\n     * \n     * @type {string}\n     * @memberof Healthcheck\n     */\n    status?: HealthcheckStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum HealthcheckStatusEnum {\n    Ok = 'ok'\n}\n\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    id: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    created_at: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    created_by: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    updated_at: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Image\n     */\n    phrases: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    parent: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    current_iterations: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Image\n     */\n    score: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Image\n     */\n    status: ImageStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ImageStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface ImageList\n */\nexport interface ImageList {\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof ImageList\n     */\n    images?: Array<Image>;\n}\n/**\n * \n * @export\n * @interface LoginInput\n */\nexport interface LoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginInput\n     */\n    email?: string;\n}\n/**\n * \n * @export\n * @interface LoginResult\n */\nexport interface LoginResult {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    accessToken?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResult\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface RefreshLoginInput\n */\nexport interface RefreshLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof RefreshLoginInput\n     */\n    refreshToken?: string;\n}\n/**\n * \n * @export\n * @interface UpdateImageInput\n */\nexport interface UpdateImageInput {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    label?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateImageInput\n     */\n    current_iterations?: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdateImageInput\n     */\n    phrases?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    status?: UpdateImageInputStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateImageInput\n     */\n    encoded_image?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateImageInputStatusEnum {\n    Pending = 'pending',\n    Processing = 'processing',\n    Completed = 'completed',\n    Saved = 'saved'\n}\n\n/**\n * \n * @export\n * @interface VerifyLoginInput\n */\nexport interface VerifyLoginInput {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifyLoginInput\n     */\n    code?: string;\n}\n\n/**\n * AIBrushApi - axios parameter creator\n * @export\n */\nexport const AIBrushApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: async (createImageInput?: CreateImageInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage: async (id: string, download?: 'thumbnail' | 'image', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (download !== undefined) {\n                localVarQueryParameter['download'] = download;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getImageData', 'id', id)\n            const localVarPath = `/images/{id}/image.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getThumbnailData', 'id', id)\n            const localVarPath = `/images/{id}/thumbnail.jpg`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/healthcheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages: async (cursor?: number, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/images`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginInput?: LoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/process-image`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (refreshLoginInput?: RefreshLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage: async (id: string, updateImageInput?: UpdateImageInput, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateImage', 'id', id)\n            const localVarPath = `/images/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateImageInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (verifyLoginInput?: VerifyLoginInput, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/auth/verify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(verifyLoginInput, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AIBrushApi - functional programming interface\n * @export\n */\nexport const AIBrushApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AIBrushApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createImage(createImageInput?: CreateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(createImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteImage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImage(id: string, download?: 'thumbnail' | 'image', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, download, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getImageData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThumbnailData(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThumbnailData(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async healthcheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listImages(cursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listImages(cursor, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginInput?: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async processImage(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.processImage(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(refreshLoginInput?: RefreshLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImage(id, updateImageInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(verifyLoginInput?: VerifyLoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyLoginInput, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AIBrushApi - factory interface\n * @export\n */\nexport const AIBrushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AIBrushApiFp(configuration)\n    return {\n        /**\n         * Create a new image\n         * @param {CreateImageInput} [createImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageInput?: CreateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.createImage(createImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a saved image\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteImage(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteImage(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a saved image by id\n         * @param {string} id \n         * @param {'thumbnail' | 'image'} [download] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImage(id: string, download?: 'thumbnail' | 'image', options?: any): AxiosPromise<Image> {\n            return localVarFp.getImage(id, download, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary image data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getImageData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getImageData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the binary thumbnail data\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThumbnailData(id: string, options?: any): AxiosPromise<any> {\n            return localVarFp.getThumbnailData(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Healthcheck\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        healthcheck(options?: any): AxiosPromise<Healthcheck> {\n            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get a list of saved images\n         * @param {number} [cursor] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listImages(cursor?: number, options?: any): AxiosPromise<ImageList> {\n            return localVarFp.listImages(cursor, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Login by email\n         * @param {LoginInput} [loginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginInput?: LoginInput, options?: any): AxiosPromise<void> {\n            return localVarFp.login(loginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the next pending image and set its status to processing.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        processImage(options?: any): AxiosPromise<Image> {\n            return localVarFp.processImage(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Refresh Login code\n         * @param {RefreshLoginInput} [refreshLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(refreshLoginInput?: RefreshLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.refresh(refreshLoginInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a saved image\n         * @param {string} id \n         * @param {UpdateImageInput} [updateImageInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any): AxiosPromise<Image> {\n            return localVarFp.updateImage(id, updateImageInput, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Verify Login code\n         * @param {VerifyLoginInput} [verifyLoginInput] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(verifyLoginInput?: VerifyLoginInput, options?: any): AxiosPromise<LoginResult> {\n            return localVarFp.verify(verifyLoginInput, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AIBrushApi - object-oriented interface\n * @export\n * @class AIBrushApi\n * @extends {BaseAPI}\n */\nexport class AIBrushApi extends BaseAPI {\n    /**\n     * Create a new image\n     * @param {CreateImageInput} [createImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public createImage(createImageInput?: CreateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).createImage(createImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a saved image\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public deleteImage(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).deleteImage(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a saved image by id\n     * @param {string} id \n     * @param {'thumbnail' | 'image'} [download] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImage(id: string, download?: 'thumbnail' | 'image', options?: any) {\n        return AIBrushApiFp(this.configuration).getImage(id, download, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary image data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getImageData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getImageData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the binary thumbnail data\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public getThumbnailData(id: string, options?: any) {\n        return AIBrushApiFp(this.configuration).getThumbnailData(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Healthcheck\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public healthcheck(options?: any) {\n        return AIBrushApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get a list of saved images\n     * @param {number} [cursor] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public listImages(cursor?: number, options?: any) {\n        return AIBrushApiFp(this.configuration).listImages(cursor, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Login by email\n     * @param {LoginInput} [loginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public login(loginInput?: LoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).login(loginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the next pending image and set its status to processing.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public processImage(options?: any) {\n        return AIBrushApiFp(this.configuration).processImage(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Refresh Login code\n     * @param {RefreshLoginInput} [refreshLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public refresh(refreshLoginInput?: RefreshLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).refresh(refreshLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a saved image\n     * @param {string} id \n     * @param {UpdateImageInput} [updateImageInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public updateImage(id: string, updateImageInput?: UpdateImageInput, options?: any) {\n        return AIBrushApiFp(this.configuration).updateImage(id, updateImageInput, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Verify Login code\n     * @param {VerifyLoginInput} [verifyLoginInput] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AIBrushApi\n     */\n    public verify(verifyLoginInput?: VerifyLoginInput, options?: any) {\n        return AIBrushApiFp(this.configuration).verify(verifyLoginInput, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://aibrush.ngrok.io\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * AIBrush API\n * Orchestration backend for AI Brush\n *\n * The version of the OpenAPI document: 1.0.0\n * Contact: wolfgangmeyers@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","// Login react component with hooks\nimport React, { useState, useEffect, FC } from 'react';\nimport * as axios from \"axios\";\nimport { AIBrushApi, LoginResult } from \"../client/api\";\n\ninterface LoginProps {\n    httpClient: axios.AxiosInstance;\n    client: AIBrushApi;\n    onLogin: (loginResult: LoginResult) => void;\n}\n\nexport const Login: FC<LoginProps> = props => {\n    // login form accepts email only\n    const [email, setEmail] = useState(\"\");\n    const [emailSubmitted, setEmailSubmitted] = useState(false);\n    const [code, setCode] = useState(\"\");\n    const [err, setErr] = useState(\"\");\n\n    const onLogin = async () => {\n        // clear error\n        setErr(\"\");\n        // validate valid email\n        if (!email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\n            setErr(\"Invalid email address\");\n            return;\n        }\n        await props.client.login({\n            email\n        })\n        setEmailSubmitted(true);\n    }\n\n    const onVerify = async () => {\n        // clear error\n        setErr(\"\");\n        // attempt to verify code\n        try {\n            const result = await props.client.verify({\n                email,\n                code\n            });\n            props.onLogin(result.data);\n        } catch (err) {\n            console.error(err)\n            setErr(\"Failed to verify code\");\n        }\n    }\n\n    // bootstrap login form\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">Login</h5>\n                            {/* Display error if one is set */}\n                            {/* Use <p class=\"text-danger\" */}\n                            {err && <p className=\"text-danger\">{err}</p>}\n\n                            {/* If email submitted, show verify code form*/}\n                            {emailSubmitted && <div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"verifyCode\">Verify Code</label>\n                                        <input type=\"text\" className=\"form-control\" id=\"verifyCode\" placeholder=\"Verification Code\" value={code} onChange={(e) => setCode(e.target.value)} />\n                                    </div>\n                                    {/* Cancel verification and go back to email */}\n                                    <button className=\"btn btn-secondary\" onClick={() => setEmailSubmitted(false)}>Cancel</button>&nbsp;\n                                    {/* Verify code */}\n                                    <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                        e.preventDefault();\n                                        onVerify();\n                                    }}>Verify</button>\n                                </div>\n                            }\n                            {/* Else, show login form */}\n                            {!emailSubmitted && <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address</label>\n                                    <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n                                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                                </div>\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {\n                                    e.preventDefault();\n                                    onLogin();\n                                }}>Login</button>\n                            </div>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","// MainMenu react component with a list of buttons aligned verically\n// Buttons are \"Create a new image\", \"Upload an image\", and \"My Stuff\"\n// use bootstrap classes\n\nimport React, { FC } from 'react';\nimport { Link } from \"react-router-dom\"\n\nexport const MainMenu: FC = () => {\n    return (\n        <div className=\"container\">\n            {/* Header: Welcome to AIBrush! */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Welcome to AIBrush!</h1>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className=\"btn-group-vertical\">\n                        <Link to=\"/create-image\" className=\"btn btn-primary\">\n                            {/* font awesome image icon */}\n                            <i className=\"fas fa-image\" />&nbsp;\n                            Create a new image\n                        </Link>\n                        <Link to=\"/images\" className=\"btn btn-primary\">\n                            {/* my items */}\n                            <i className=\"fas fa-folder-open\" />&nbsp;\n                            My Images\n                        </Link>\n                        {/* Workspace */}\n                        <Link to=\"/workspace\" className=\"btn btn-primary\">\n                            {/* font awesome workspace icon */}\n                            <i className=\"fas fa-th\" />&nbsp;\n                            Workspace\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import { ImageStatusEnum } from \"../client/api\";\n\n// map from image status to font awesome class\n// possible values: Pending, Processing, Completed, Saved\nexport const imageStatusToIconClass = (status: ImageStatusEnum) => {\n    switch (status) {\n        case ImageStatusEnum.Pending:\n            return \"fas fa-hourglass-start\";\n        case ImageStatusEnum.Processing:\n            return \"fas fa-cog fa-spin\";\n        case ImageStatusEnum.Completed:\n            return \"fas fa-check\";\n        case ImageStatusEnum.Saved:\n            return \"fas fa-save\";\n        default:\n            return \"\";\n    }\n}","// Image Thumnail Component\nimport React, { FC, useState, useEffect } from \"react\";\nimport { Image, ImageStatusEnum } from \"../client/api\";\nimport { imageStatusToIconClass } from \"../lib/iconhelper\";\nimport { Config } from \"../config\";\n\ninterface ImageThumbnailProps {\n    apiUrl: string;\n    image: Image;\n    onClick: (image: Image) => void;\n    onDelete?: (image: Image) => void;\n    onSave?: (image: Image) => void;\n    onFork?: (image: Image) => void;\n}\n\nexport const ImageThumbnail: FC<ImageThumbnailProps> = ({ apiUrl, image, onClick, onDelete, onSave, onFork }) => {\n\n    const src = `${apiUrl}/images/${image.id}/thumbnail.jpg?updated_at=${image.updated_at}`;\n\n    useEffect(() => {\n        const img = document.getElementById(`image-${image.id}`) as HTMLImageElement;\n        img.onerror = () => {\n            img.src = \"/images/default.jpg\";\n        }\n    })\n\n    return (\n        <div className=\"card\" style={{ padding: \"10px\", width: \"200px\", margin: \"10px\" }}>\n            <img\n                style={{ cursor: \"pointer\" }}\n                id={`image-${image.id}`}\n                className=\"card-img-top\"\n                src={src}\n                alt={image.label} onClick={() => onClick(image)} />\n            <div className=\"card-body\">\n                <div>\n                    <h5 className=\"card-title\">\n                        {image.label}\n                    </h5>\n                    <p className=\"card-text\">\n                        {/* icon for image status */}\n                        <i className={imageStatusToIconClass(image.status as ImageStatusEnum)}></i>&nbsp;\n                        {image.status}\n                    </p>\n                    {/* if status is \"processing\" then show bootstrap progress bar for image.current_iterations / image.iterations */}\n                    {image.status === \"processing\" && <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: `${(image.current_iterations * 1.0) / image.iterations * 100}%` }}>\n                        </div>\n                    </div>}\n                </div>\n\n                <hr />\n                {onSave && image.status == \"completed\" && <button className=\"btn btn-primary btn-sm\" onClick={() => onSave(image)} style={{marginRight: \"5px\"}}>\n                    {/* save icon */}\n                    <i className=\"fas fa-save\"></i>\n                </button>}\n                {onDelete && <button className=\"btn btn-danger btn-sm\" onClick={() => onDelete && onDelete(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-trash-alt\"></i>\n                </button>}\n                {onFork && image.status == \"saved\" && <button className=\"btn btn-secondary btn-sm\" onClick={() => onFork && onFork(image)} style={{marginRight: \"5px\"}}>\n                    <i className=\"fas fa-code-branch\"></i>\n                </button>}\n            </div>\n        </div>\n    );\n}","import React, {FC, useEffect} from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Image } from \"../client/api\";\n\ninterface ImagePopupProps {\n    apiUrl: string;\n    image: Image;\n    onClose: () => void;\n}\n\nexport const ImagePopup: FC<ImagePopupProps> = ({apiUrl, image, onClose}) => {\n\n    const src = `${apiUrl}/images/${image.id}/image.jpg?updated_at=${image.updated_at}`;\n\n    useEffect(() => {\n        const img = document.getElementById(`image-popup-${image.id}`) as HTMLImageElement;\n        img.onerror = () => {\n            img.src = \"/images/default.jpg\"\n        }\n    })\n\n    // if open, show modal with image\n    return (\n        <Modal show={true} onHide={onClose} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>{image.label}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img style={{width: \"100%\"}} id={`image-popup-${image.id}`} src={src} alt={image.label} />\n                {/* List these fields: status, iterations, phrases */}\n                <div>\n                    <p>Status: {image.status}</p>\n                    <p>Iterations: {image.iterations}</p>\n                    <p>Current iterations: {image.current_iterations}</p>\n                    <p>Score: {image.score}</p>\n                    <p>Phrases: {image.phrases.join(\", \")}</p>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n\n}","// Workspace react component\n// Display the workspace images\n// use bootstrap\n\nimport React, { FC, useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\"\nimport { ImageThumbnail } from \"../components/ImageThumbnail\"\nimport { Workspace, loadWorkspace, saveWorkspace } from \"../lib/workspace\"\nimport { AIBrushApi, Image, ImageStatusEnum, UpdateImageInputStatusEnum } from \"../client/api\";\nimport { ImagePopup } from \"../components/ImagePopup\";\n\ninterface WorkspacePageProps {\n    apiUrl: string;\n    api: AIBrushApi;\n}\n\nexport const WorkspacePage: FC<WorkspacePageProps> = ({ apiUrl, api }) => {\n    const [workspace, setWorkspace] = useState<Workspace>({ images: [] })\n    const [err, setErr] = useState(\"\")\n    const [selectedImage, setSelectedImage] = useState<Image>()\n\n    const history = useHistory();\n\n    const [showStatuses, setShowStatuses] = useState({\n        [ImageStatusEnum.Pending]: true,\n        [ImageStatusEnum.Processing]: true,\n        [ImageStatusEnum.Completed]: true,\n        [ImageStatusEnum.Saved]: true,\n    })\n\n    const onChangeShowStatuses = (status: ImageStatusEnum, value: boolean) => {\n        setShowStatuses({\n            ...showStatuses,\n            [status]: value\n        })\n    }\n\n    const onSaveImage = async (image: Image) => {\n        // patch image with status=saved\n        try {\n            const resp = await api.updateImage(image.id as string, { status: UpdateImageInputStatusEnum.Saved })\n            const updatedImage = resp.data;\n            const updatedWorkspace = {\n                images: workspace.images.map(i => i.id === updatedImage.id ? updatedImage : i)\n            }\n            setWorkspace(updatedWorkspace)\n            saveWorkspace(updatedWorkspace)\n        } catch (err) {\n            console.error(err)\n            setErr(\"Could not save image\")\n        }\n    }\n\n    useEffect(() => {\n        let workspace = loadWorkspace()\n        setWorkspace(workspace)\n        let lock = false;\n\n        const timerHandle = setInterval(async () => {\n            if (lock) {\n                return;\n            }\n            try {\n                lock = true;\n                const images: Array<Image> = []\n                for (let image of workspace.images) {\n                    try {\n                        const resp = await api.getImage(image.id)\n                        const updatedImage = resp.data;\n                        images.push(updatedImage)\n                        if (selectedImage && updatedImage.id == selectedImage.id) {\n                            setSelectedImage(updatedImage)\n                        }\n                    } catch (err) {\n                        console.error(err)\n                    }\n                }\n                \n                workspace = {\n                    images: images\n                }\n                setWorkspace(workspace)\n                saveWorkspace(workspace)\n            } finally {\n                lock = false;\n            }\n        }, 5000)\n        return () => {\n            clearInterval(timerHandle)\n        }\n    }, [workspace && workspace.images.length])\n\n    const onDeleteImage = async (image: Image) => {\n        // clear error\n        setErr(\"\")\n        // attempt to delete image\n        try {\n            const updatedWorkspace = {\n                ...workspace,\n                images: workspace.images.filter(i => i.id !== image.id)\n            }\n            setWorkspace(updatedWorkspace)\n            saveWorkspace(updatedWorkspace)\n            await api.deleteImage(image.id as string)\n        } catch (err) {\n            console.error(err)\n            setErr(\"Could not delete image\")\n        }\n    }\n\n    const onForkImage = async (image: Image) => {\n        // navigate to /create-image with ?parent=image.id\n        history.push(`/create-image?parent=${image.id}`)\n    }\n\n    const onClickImage = (image: Image) => {\n        setSelectedImage(image)\n    }\n\n    // show the images in the workspace\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>Workspace</h1>\n                </div>\n            </div>\n            {/* display error message if one is set */}\n            {err && <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        {err}\n                    </div>\n                </div>\n            </div>}\n            <hr />\n            {/* Link to navigate to CreateImage */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <Link to=\"/create-image\" className=\"btn btn-primary\">\n                        <i className=\"fas fa-plus\"></i>&nbsp;\n                        Create Image\n                    </Link>\n                </div>\n            </div>\n            <hr />\n            {/* checkboxes to toggle show pending, processing, completed and saved */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"form-check\">\n                        <input className=\"form-check-input\" type=\"checkbox\" checked={showStatuses[ImageStatusEnum.Pending]} onChange={(e) => onChangeShowStatuses(ImageStatusEnum.Pending, e.target.checked)} />\n                        <label className=\"form-check-label\">\n                            Pending\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <input className=\"form-check-input\" type=\"checkbox\" checked={showStatuses[ImageStatusEnum.Processing]} onChange={(e) => onChangeShowStatuses(ImageStatusEnum.Processing, e.target.checked)} />\n                        <label className=\"form-check-label\">\n                            Processing\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <input className=\"form-check-input\" type=\"checkbox\" checked={showStatuses[ImageStatusEnum.Completed]} onChange={(e) => onChangeShowStatuses(ImageStatusEnum.Completed, e.target.checked)} />\n                        <label className=\"form-check-label\">\n                            Completed\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <input className=\"form-check-input\" type=\"checkbox\" checked={showStatuses[ImageStatusEnum.Saved]} onChange={(e) => onChangeShowStatuses(ImageStatusEnum.Saved, e.target.checked)} />\n                        <label className=\"form-check-label\">\n                            Saved\n                        </label>\n                    </div>\n                </div>\n            </div>\n\n            <hr />\n            {/*  spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\"></div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        {workspace.images.filter(image => showStatuses[image.status as ImageStatusEnum]).map(image => (\n                            <ImageThumbnail onFork={onForkImage} onSave={onSaveImage} key={`image-thumbnail-${image.id}`} apiUrl={apiUrl} image={image} onClick={onClickImage} onDelete={onDeleteImage} />\n                        ))}\n                    </div>\n                </div>\n            </div>\n            {/* show ImagePopup if selectedImage is set */}\n            {selectedImage && <ImagePopup apiUrl={apiUrl} image={selectedImage as Image} onClose={() => setSelectedImage(undefined)} />}\n        </div>\n    )\n}","// React page to show all images\r\n// use bootstrap\r\nimport React, { FC, useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ImageThumbnail } from \"../components/ImageThumbnail\";\r\nimport { AIBrushApi, Image } from \"../client/api\";\r\n\r\ninterface Props {\r\n    api: AIBrushApi;\r\n    apiUrl: string;\r\n}\r\n\r\nexport const ImagesPage: FC<Props> = ({ api, apiUrl }) => {\r\n    const history = useHistory();\r\n    const [images, setImages] = useState<Array<Image>>([]);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [selectedImage, setSelectedImage] = useState<Image | null>(null);\r\n\r\n    const onForkImage = async (image: Image) => {\r\n        // navigate to /create-image with ?parent=image.id\r\n        history.push(`/create-image?parent=${image.id}`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        api.listImages().then(images => {\r\n            if (images.data.images) {\r\n                setImages(images.data.images);\r\n            }\r\n            setLoading(false);\r\n        }).catch(err => {\r\n            setError(err.message);\r\n            setLoading(false);\r\n        });\r\n    }, [api]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <h1>Images</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"row\">\r\n                        {images.map(image => (\r\n                            <ImageThumbnail\r\n                                onFork={onForkImage}\r\n                                onClick={setSelectedImage} apiUrl={apiUrl} key={image.id} image={image} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// Given a set of credentials, this component will refresh them\n// every 5 minutes and invoke the onCredentialsRefreshed callback\n\nimport React, { useEffect, FC } from \"react\"\nimport { LoginResult, AIBrushApi } from \"../client/api\";\n\ninterface TokenRefresherProps {\n    onCredentialsRefreshed: (loginResult: LoginResult) => void;\n    api: AIBrushApi;\n    credentials: LoginResult;\n}\n\nexport const TokenRefresher : FC<TokenRefresherProps> = ({ onCredentialsRefreshed, api, credentials }) => {\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (credentials && credentials.refreshToken) {\n                api.refresh({refreshToken: credentials.refreshToken}).then(loginResult => {\n                    onCredentialsRefreshed(loginResult.data);\n                });\n            }\n\n        }, 5 * 60 * 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [credentials && credentials.refreshToken]);\n    return <div></div>;\n}","import React, { FC, useEffect, useState } from 'react';\r\nimport { AIBrushApi } from \"../client/api\";\r\n\r\ninterface HealthcheckerProps {\r\n    api: AIBrushApi;\r\n}\r\n\r\nexport const Healthchecker: FC<HealthcheckerProps> = ({ api }) => {\r\n    // automatically check health every 5 seconds\r\n    const [healthCheck, setHealthCheck] = useState(true);\r\n    \r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            api.healthcheck().then(() => setHealthCheck(true)).catch(() => setHealthCheck(false));\r\n        }, 5000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [api]);\r\n\r\n    // only display bootstrap danger alert if healthcheck failed\r\n    // \"service is unavailable\"\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\" style={{ display: healthCheck ? 'none' : 'block' }}>\r\n            <strong>Service is unavailable</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport * as axios from \"axios\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\"\nimport logo from './logo.svg';\nimport './App.css';\nimport \"./bootstrap.min.css\";\nimport { AIBrushApi, LoginResult } from \"./client/api\";\nimport { getConfig } from './config';\nimport { Login } from \"./pages/Login\"\nimport { MainMenu } from './pages/MainMenu';\nimport { CreateImage } from \"./pages/CreateImage\"\nimport { WorkspacePage } from \"./pages/WorkspacePage\";\nimport { ImagesPage } from \"./pages/Images\";\nimport { TokenRefresher } from \"./components/TokenRefresher\";\nimport { Healthchecker } from './components/Healthchecker';\n\nconst config = getConfig()\nconst httpClient = axios.default;\nconst client = new AIBrushApi(undefined, localStorage.getItem(\"apiUrl\") || config.apiUrl, httpClient);\n\nfunction updateHttpClient(loginResult: LoginResult) {\n  if (loginResult.accessToken) {\n    httpClient.defaults.headers.common['Authorization'] = `Bearer ${loginResult.accessToken}`;\n  }\n}\n\nfunction App() {\n\n  const [credentials, setCredentials] = useState<LoginResult | null>(null);\n\n  const init = async () => {\n    console.log(\"App.init\")\n    const storedCredentials = localStorage.getItem(\"credentials\");\n    if (storedCredentials) {\n      // attempt to refresh token\n      try {\n        const credentials = JSON.parse(storedCredentials) as LoginResult;\n        const result = await client.refresh({\n          refreshToken: credentials.refreshToken\n        });\n        setCredentials(result.data);\n        // save to storage\n        localStorage.setItem(\"credentials\", JSON.stringify(result.data));\n        updateHttpClient(result.data);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  const onLogin = async (credentials: LoginResult) => {\n    localStorage.setItem(\"credentials\", JSON.stringify(credentials));\n    setCredentials(credentials);\n    updateHttpClient(credentials);\n  };\n\n  const onUpdateAPIUrl = () => {\n    let apiUrl = localStorage.getItem(\"apiUrl\") || config.apiUrl;\n    const resp = prompt(\"Configure backend url\", apiUrl)\n    if (resp) {\n      apiUrl = resp;\n      localStorage.setItem(\"apiUrl\", apiUrl);\n      // reload page\n      window.location.reload();\n    }\n  }\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <TokenRefresher api={client} credentials={credentials as LoginResult} onCredentialsRefreshed={onLogin} />\n      <Healthchecker api={client} />\n      {/* settings button */}\n      <button className=\"btn btn-primary top-button\" onClick={onUpdateAPIUrl}>\n        {/* font awesome settings icon */}\n        <i className=\"fas fa-cog\"></i>&nbsp;\n        Settings\n      </button>\n      <BrowserRouter>\n        {/* if credentials are not set, show Login component */}\n        {!credentials && <Login httpClient={httpClient} client={client} onLogin={onLogin} />}\n        {/* if credentials are set, show a bootstrap logout button a the far top right corner div */}\n        {credentials && <>\n          <button className=\"btn btn-primary top-button\" onClick={() => setCredentials(null)}>\n            {/* font awesome logout icon */}\n            <i className=\"fas fa-sign-out-alt\"></i>&nbsp;\n            Logout\n          </button>\n          {/* home button */}\n          <Link className=\"btn btn-primary top-button\" to=\"/\">\n            {/* font awesome home icon */}\n            <i className=\"fas fa-home\"></i>&nbsp;\n            Home\n          </Link>\n\n        </>}\n        {/* if credentials are set, show the rest of the app */}\n        {credentials && <Switch>\n          <Route path=\"/\" exact={true}>\n            <MainMenu />\n          </Route>\n          <Route path=\"/create-image\">\n            <CreateImage api={client} apiUrl={config.apiUrl} />\n          </Route>\n          <Route path=\"/workspace\">\n            <WorkspacePage apiUrl={config.apiUrl} api={client} />\n          </Route>\n          <Route path=\"/images\">\n            <ImagesPage apiUrl={config.apiUrl} api={client} />\n          </Route>\n          {/* <Route path=\"/image-editor\">\n            <ImageEditor onCancel={() => {}} onSave={img => console.log(img)} />\n          </Route> */}\n        </Switch>}\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","export interface Config {\n    apiUrl: string;\n}\n\nexport function getConfig(): Config {\n    if (process.env.REACT_APP_ENV == \"prod\") {\n        return {\n            apiUrl: \"https://aibrush.ngrok.io\"\n        };\n    } else {\n        return {\n            apiUrl: \"http://localhost:3000\"\n        };\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Image } from \"../client/api\";\n\nexport interface Workspace {\n    images: Image[];\n}\n\nexport function loadWorkspace(): Workspace {\n    const workspace = localStorage.getItem('workspace');\n    if (workspace) {\n        return JSON.parse(workspace);\n    }\n    return {\n        images: [],\n    };\n}\n\nexport function saveWorkspace(workspace: Workspace) {\n    localStorage.setItem('workspace', JSON.stringify(workspace));\n}\n","import React, { FC, useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\"\nimport { AIBrushApi, CreateImageInput, Image } from \"../client/api\"\nimport { loadWorkspace, saveWorkspace } from '../lib/workspace';\nimport loadImage from \"blueimp-load-image\"\nimport qs from \"qs\";\nimport { ImageThumbnail } from \"../components/ImageThumbnail\"\nimport { ImagePopup } from \"../components/ImagePopup\";\nimport { ImageEditor } from \"../components/ImageEditor\";\n\ninterface CreateImageProps {\n    api: AIBrushApi\n    apiUrl: string;\n}\n\nexport const CreateImage: FC<CreateImageProps> = (props) => {\n    const searchParams = qs.parse(window.location.search.substring(1)) as any\n\n    const history = useHistory()\n    const [input, setInput] = useState<CreateImageInput>({\n        phrases: [],\n        label: \"\",\n        iterations: 100,\n        encoded_image: \"\",\n    });\n    const [editingImage, setEditingImage] = useState<string | null>(null);\n    const [count, setCount] = useState(1)\n\n    const onSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const workspace = loadWorkspace()\n        for (let i = 0; i < count; i++) {\n            const image = await props.api.createImage(input);\n            // add image to workspace\n            workspace.images.push(image.data as Image)\n        }\n\n        saveWorkspace(workspace);\n        // redirect to workspace page\n        history.push(\"/workspace\")\n    }\n\n    const onCancel = () => {\n        // on cancel, return to the previous page\n        // check if there is a previous page. if not, redirect to home\n        if (history.length > 1) {\n            history.goBack()\n        } else {\n            history.push(\"/\")\n        }\n    }\n\n    const onImageSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0]\n        if (!file) {\n            return\n        }\n        loadImage(file, (img: Event | HTMLImageElement | HTMLCanvasElement) => {\n            if (!(img instanceof HTMLCanvasElement)) {\n                return\n            }\n            // convert image to base64\n            const canvas = img as HTMLCanvasElement\n            const dataUrl = canvas.toDataURL(\"image/jpeg\")\n            const base64 = dataUrl.split(\",\")[1]\n            setInput({\n                ...input,\n                encoded_image: base64\n            })\n        }, {\n            maxWidth: 512,\n            maxHeight: 512,\n            crop: true,\n            canvas: true,\n        })\n    }\n\n    const loadParent = async (parentId: string) => {\n        const image = await props.api.getImage(parentId)\n        // get encoded image data for parent\n        const resp = await props.api.getImageData(image.data.id, {\n            responseType: \"arraybuffer\"\n        })\n        const binaryImageData = Buffer.from(resp.data, \"binary\");\n        // convert binary to base64\n        const base64ImageData = binaryImageData.toString(\"base64\");\n        setInput({\n            ...input,\n            label: image.data.label,\n            phrases: image.data.phrases,\n            iterations: image.data.iterations,\n            parent: parentId,\n            encoded_image: base64ImageData,\n        })\n    }\n\n    const onEditImage = () => {\n        let img = input.encoded_image;\n        if (!img) {\n            // blank 512 x 512 image with white background\n            // create a new canvas\n            const canvas = document.createElement(\"canvas\")\n            canvas.width = 512\n            canvas.height = 512\n            const ctx = canvas.getContext(\"2d\")\n            if (ctx) {\n                ctx.fillStyle = \"white\"\n                ctx.fillRect(0, 0, 512, 512)\n                img = canvas.toDataURL(\"image/jpeg\").split(\",\")[1]\n            }\n        }\n        if (img) {\n            setEditingImage(`data:image/jpeg;base64,${img}`)\n        }\n        \n    }\n\n\n\n    const onImageEdited = (imageUri: string) => {\n        // extract base64 portion of the image uri\n        const base64 = imageUri.split(\",\")[1]\n        setInput({\n            ...input,\n            encoded_image: base64\n        })\n        setEditingImage(null)\n    }\n\n    useEffect(() => {\n        if (searchParams.parent) {\n            loadParent(searchParams.parent)\n        }\n    }, [searchParams.parent])\n\n    return (\n        <>\n            <div className=\"container\">\n                {/* Header: Create new image */}\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1>Create new image</h1>\n                    </div>\n                </div>\n            </div>\n            {/* 50px vertical spacer */}\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"spacer\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"offset-lg-3 col-lg-6 col-sm-12\">\n                    <form onSubmit={onSubmit}>\n                        <div className=\"form-group\">\n                            <label>Phrases</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.phrases?.join(\"|\")}\n                                onChange={(e) => setInput({ ...input, phrases: e.target.value.split(\"|\") })}\n                                placeholder=\"Separate | phrases | like this\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Label</label>\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                value={input.label}\n                                onChange={(e) => setInput({ ...input, label: e.target.value })}\n                                placeholder=\"Label\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Iterations</label>\n                            <input className=\"form-control\" type=\"number\" value={input.iterations} onChange={(e) => setInput({ ...input, iterations: parseInt(e.target.value) })} />\n                        </div>\n                        {/* count */}\n                        <div className=\"form-group\">\n                            <label>Count</label>\n                            <input className=\"form-control\" type=\"number\" max={10} min={1} value={count} onChange={(e) => setCount(parseInt(e.target.value))} />\n                        </div>\n\n                        {/* If encoded_image (base64 only) is set, show the image using a base64 image url*/}\n                        {input.encoded_image && <div className=\"form-group\">\n                            <h5>Initial Image</h5>\n                            <img src={`data:image/jpeg;base64,${input.encoded_image}`} style={{ maxWidth: \"100%\" }} />\n                        </div>}\n                        {/* If encoded_image is set, display edit button */}\n                        <div className=\"form-group\">\n                            <label\n                                id=\"loadimage-wrapper\"\n                                className={`btn btn-sm btn-primary btn-file`}\n                                style={{ marginTop: \"8px\", marginRight: \"8px\" }}\n                            >\n                                {input.encoded_image ? \"Replace Image\" : \"Upload Image\"}\n                                <input\n                                    id=\"loadimage\"\n                                    type=\"file\"\n                                    style={{ display: \"none\" }}\n                                    onChange={e => onImageSelected(e)}\n                                />\n                            </label>\n                            <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={onEditImage}>Edit Image</button>\n                        </div>\n\n                        <div className=\"form-group\">\n                            {/* Cancel button \"/\" */}\n                            <button onClick={onCancel} type=\"button\" className=\"btn btn-secondary\">Cancel</button>\n                            &nbsp;\n                            <button type=\"submit\" className=\"btn btn-primary\">Create</button>\n                        </div>\n\n                    </form>\n                </div>\n            </div>\n            {editingImage && (\n                <ImageEditor\n                    encodedImage={`${editingImage}`}\n                    onCancel={() => setEditingImage(null)}\n                    onSave={onImageEdited}\n                />\n            )}\n        </>\n    )\n\n\n}","// react bootstrap large modal with a canvas for image editing.\n// Brush size, brush size preview, color selector, color picker\n// Save and cancel buttons\n\nimport React, { FC, useState, useEffect } from 'react';\nimport { Modal } from \"react-bootstrap\";\n\ninterface ImageEditorProps {\n    encodedImage: string | null;\n    onSave: (image: string) => void;\n    onCancel: () => void;\n}\n\nexport const ImageEditor : FC<ImageEditorProps> = ({ encodedImage, onSave, onCancel }) => {\n    const [canvas, setCanvas] = useState<HTMLCanvasElement | null>(null);\n    const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n    const [brushSize, setBrushSize] = useState(10);\n    const [brushColor, setBrushColor] = useState('#000000');\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [lastX, setLastX] = useState(0);\n    const [lastY, setLastY] = useState(0);\n\n    useEffect(() => {\n        const c = document.getElementById('canvas') as HTMLCanvasElement;\n        if (c) {\n            setCanvas(c);\n            setCtx(c.getContext('2d'));\n        }\n    }, [canvas]);\n\n    useEffect(() => {\n        if (ctx && canvas) {\n            // if image is not null, draw it on the canvas\n            if (encodedImage) {\n                const img = new Image();\n                img.src = encodedImage;\n                img.onload = () => {\n                    ctx.drawImage(img, 0, 0);\n                }\n            } else {\n                ctx.fillStyle = '#ffffff';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n        }\n    }, [ctx, canvas, encodedImage])\n\n    const getMousePos = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvas) {\n            throw Error(\"No canvas\")\n        }\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        return {\n            x: (e.clientX - rect.left) * scaleX,\n            y: (e.clientY - rect.top) * scaleY\n        }\n    }\n\n    const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvas) {\n            return;\n        }\n        setIsDrawing(true);\n        const mousePos = getMousePos(e);\n        setLastX(mousePos.x);\n        setLastY(mousePos.y);\n    };\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!isDrawing || !ctx || !canvas) {\n            return;\n        }\n\n\n        // get x and y relative to the canvas\n        const mousePos = getMousePos(e);\n        const x = mousePos.x;\n        const y = mousePos.y;\n\n        ctx.beginPath();\n        ctx.moveTo(lastX, lastY);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = brushColor;\n        ctx.lineWidth = brushSize;\n        // line caps\n        ctx.lineCap = 'round';\n        ctx.stroke();\n\n        setLastX(x);\n        setLastY(y);\n    };\n\n    const handleMouseUp = (e: React.MouseEvent<HTMLCanvasElement>) => {\n        setIsDrawing(false);\n    };\n\n    const handleBrushSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setBrushSize(parseFloat(e.target.value));\n    };\n\n    const handleBrushColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setBrushColor(e.target.value);\n    };\n\n    const handleSave = () => {\n        if (canvas && ctx) {\n            const data = canvas.toDataURL('image/png');\n            onSave(data);\n        }\n    };\n\n    const handleCancel = () => {\n        onCancel();\n    };\n\n    return (\n        <Modal show={true} onHide={handleCancel} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Image Editor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <canvas\n                    style={{width: \"100%\"}}\n                     id=\"canvas\" width=\"512\" height=\"512\" onMouseDown={handleMouseDown} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}></canvas>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushSize\">Brush Size</label>\n                            <input type=\"range\" className=\"form-control\" id=\"brushSize\" min=\"1\" max=\"100\" value={brushSize} onChange={handleBrushSizeChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"brushColor\">Brush Color</label>\n                            <input type=\"color\" className=\"form-control\" id=\"brushColor\" value={brushColor} onChange={handleBrushColorChange} />\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <button className=\"btn btn-primary\" onClick={handleSave}>Save</button>\n                <button className=\"btn btn-secondary\" onClick={handleCancel}>Cancel</button>\n            </Modal.Footer>\n        </Modal>\n    );\n}"],"sourceRoot":""}